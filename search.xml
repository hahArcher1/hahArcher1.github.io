<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Centos8集群Torque作业管理系统安装（四）</title>
      <link href="/2024/03/23/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2024/03/23/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>前面安装了这么多的软件，终于要安装我们的主角 Torque 了。组里的服务器就是用的Torque作为作业管理的。</p><h1 id="Torque-作业系统的搭建"><a href="#Torque-作业系统的搭建" class="headerlink" title="Torque 作业系统的搭建"></a>Torque 作业系统的搭建</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>对于高性能计算集群而言，作业调度系统是必不可少的工具软件，不论是单机计算还是集群计算，它的作用是更好的分配计算资源，管理用户的作业。作业调度软件有很多种，常见的有Torque、MAUI、SGE、slurm、HTcondar、openPBS等。我这里采用的Torque软件。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>关机的时候先关计算节点再关控制节点，开机的时候先开控制节点再开计算节点。</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><table><thead><tr><th align="center">主机名</th><th align="center">系统</th><th align="center">ip</th></tr></thead><tbody><tr><td align="center">master（控制节点）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.122</td></tr><tr><td align="center">node1（计算节点）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.123</td></tr></tbody></table><h2 id="控制节点和计算节点的共同配置"><a href="#控制节点和计算节点的共同配置" class="headerlink" title="控制节点和计算节点的共同配置"></a>控制节点和计算节点的共同配置</h2><ol><li>为了避免服务端和客户端无法通信，关闭防火墙和selinux<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure></li><li>修改hosts文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">172.16.34.122 master</span><br><span class="line">172.16.34.123 node1</span><br></pre></td></tr></table></figure></li></ol><h2 id="控制节点的配置"><a href="#控制节点的配置" class="headerlink" title="控制节点的配置"></a>控制节点的配置</h2><ol><li>安装相关的软件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install libxml2-devel openssl-devel gcc gcc-c++ boost-devel libtool -y</span><br></pre></td></tr></table></figure></li><li>下载 Torque 软件，相应的软件可以在本博客的<a href="https://haharcher1.github.io/download/" title="资源">资源</a>页面找到，上传到控制节点并解压。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf torque-6.1.3_gcc8.tar.gz</span><br></pre></td></tr></table></figure></li><li>进入 Torque 文件夹，并配置安装位置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd torque-6.1.3</span><br><span class="line">./configure --prefix=/usr/local/torque --with-scp --with-default-server=master #注意 master 为控制节点主机名，请根据自己的情况修改</span><br></pre></td></tr></table></figure><img src="1.png"></li><li>进行安装<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br><span class="line">make packages</span><br></pre></td></tr></table></figure></li><li>添加库到系统<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">libtool --finish /usr/local/torque/lib</span><br></pre></td></tr></table></figure><img src="2.png"></li><li>拷贝作业调度服务到 &#x2F;etc&#x2F;init.d ，当我们安装集群版本时，控制节点一般不参与计算，无需拷贝 pbs_mom ，其为作业调度的客户端服务进程，只需要 pbs_server 和pbs_trqauthd 。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp contrib/init.d/pbs_server /etc/init.d/</span><br><span class="line">cp contrib/init.d/trqauthd /etc/init.d/</span><br></pre></td></tr></table></figure></li><li>配置 Torque 环境，编译完成后会在 &#x2F;etc&#x2F;profile.d&#x2F;目录下自动生成torque.sh文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls </span><br></pre></td></tr></table></figure><img src="3.png"><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile.d/torque.sh</span><br></pre></td></tr></table></figure></li><li>设置所有用户每次登陆都配置 Torque 环境<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line">#添加 </span><br><span class="line">source /etc/profile.d/torque.sh</span><br></pre></td></tr></table></figure></li><li>设置服务开机自动启动<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable pbs_server.service</span><br><span class="line">systemctl enable trqauthd.service</span><br></pre></td></tr></table></figure></li><li>初始化并启动 Torque 服务<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./torque.setup root</span><br><span class="line">qterm</span><br><span class="line">for i in pbs_server trqauthd; do service $i start;done</span><br></pre></td></tr></table></figure><img src="4.png"></li><li>在 &#x2F;var&#x2F;spool&#x2F;torque&#x2F;server_priv&#x2F;nodes 添加计算节点的信息<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /var/spool/torque/server_priv/nodes</span><br></pre></td></tr></table></figure><img src="5.png"></li></ol><ul><li>nodes文件的添加规则为：主机名，可用CPU核心数（物理核心数），作业队列名</li><li>node1 为主机名</li><li>np&#x3D;填写该主机的可用CPU核心数，请注意，填写物理核心数，而不是超线程数</li><li>bigmem 是队列名。可以填写多个队列名</li></ul><ol start="12"><li>将计算节点的所需要的安装包上传到计算节点<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp torque-package-clients-linux-x86_64.sh torque-package-mom-linux-x86_64.sh node1:/root/</span><br><span class="line">scp contrib/init.d/pbs_mom node1:/etc/init.d/</span><br><span class="line">scp contrib/init.d/trqauthd node1:/etc/init.d/</span><br></pre></td></tr></table></figure></li></ol><h2 id="计算节点的配置"><a href="#计算节点的配置" class="headerlink" title="计算节点的配置"></a>计算节点的配置</h2><ol><li>运行安装程序<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./torque-package-mom-linux-x86_64.sh --install</span><br><span class="line">./torque-package-clients-linux-x86_64.sh --install</span><br></pre></td></tr></table></figure></li><li>修改配置文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /var/spool/torque/mom_priv/config</span><br><span class="line">#添加</span><br><span class="line">pbsserver master</span><br><span class="line">logevent 255</span><br></pre></td></tr></table></figure></li><li>启动服务设置开机自动启动<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/pbs_mom start</span><br><span class="line">systemctl enable pbs_mom </span><br><span class="line">/etc/init.d/trqauthd start</span><br><span class="line">systemctl enable trqauthd</span><br></pre></td></tr></table></figure></li><li>每一个计算节点都需要这样配置</li></ol><h2 id="重启作业调度系统"><a href="#重启作业调度系统" class="headerlink" title="重启作业调度系统"></a>重启作业调度系统</h2><ul><li>控制节点：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart pbs_server</span><br><span class="line">systemctl restart trqauthd</span><br></pre></td></tr></table></figure></li><li>计算节点：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart trqauthd</span><br><span class="line">systemctl restart pbs_mom</span><br></pre></td></tr></table></figure></li></ul><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><ul><li>for i in pbs_server pbs_sched pbs_mom trqauthd; do service $i start; done</li><li>for i in pbs_server pbs_sched pbs_mom trqauthd; do service $i stop; done</li><li>for i in pbs_server pbs_sched pbs_mom trqauthd; do service $i status; done<br>或者</li><li>&#x2F;etc&#x2F;init.d&#x2F;pbs_server start|stop|status  </li><li>&#x2F;etc&#x2F;init.d&#x2F;pbs_sched start|stop|status  </li><li>&#x2F;etc&#x2F;init.d&#x2F;pbs_mom start|stop|status  </li><li>&#x2F;etc&#x2F;init.d&#x2F;trqauthd start|stop|status</li></ul><h1 id="Maui的安装"><a href="#Maui的安装" class="headerlink" title="Maui的安装"></a>Maui的安装</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><p>Torque自带一个任务调度器 pbs_sched ，但是我们并没有安装。我们安装Maui来代替，其功能丰富，适合中小集群使用。Maui 只需装在控制节点上，计算节点上不必安装。为丰富torque的管理调度功能，一般用maui调度和管理torque作业。</p><h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><p>Maui 只需要安装在控制节点上。</p><h2 id="开始安装-Maui"><a href="#开始安装-Maui" class="headerlink" title="开始安装 Maui"></a>开始安装 Maui</h2><ol><li>下载 Maui 软件，相应的软件可以在本博客的<a href="https://haharcher1.github.io/download/" title="资源">资源</a>页面找到，上传到控制节点并解压。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf maui-3.3.1.tar.gz</span><br></pre></td></tr></table></figure></li><li>进入 Maui 文件夹，并配置安装位置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd maui-3.3.1</span><br><span class="line">./configure --prefix=/usr/local/maui --with-pbs=/usr/local/torque</span><br></pre></td></tr></table></figure></li></ol><ul><li>.&#x2F;configure 预编译</li><li>–prefix&#x3D; 指定编译安装路径</li><li>–with-pbs&#x3D;&#x2F;usr&#x2F;local&#x2F;torque 指定torque路径<br><img src="6.png"></li></ul><ol start="3"><li>安装<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>如果make过程中出现类似“&#x2F;usr&#x2F;bin&#x2F;ld: cannot find -ltorque”，编辑Makefile文件，参考如下添加torque的库路径和头文件路径：<br>export PBSCFLAGS &#x3D; -I&#x2F;usr&#x2F;local&#x2F;torque&#x2F;include<br>export PBSLDFLAGS &#x3D; -L&#x2F;usr&#x2F;local&#x2F;torque&#x2F;lib -ltorque<br><img src="15.png"></li><li>配置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi contrib/service-scripts/redhat.maui.d</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改</span></span><br><span class="line">MAUI_PREFIX=/opt -&gt; MAUI_PREFIX=/usr/local/maui</span><br><span class="line">daemon --user maui -&gt; daemon --user root</span><br></pre></td></tr></table></figure><img src="7.png"></li><li>启动 Maui ，并设置开机自动启动<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp contrib/service-scripts/redhat.maui.d /etc/init.d/maui</span><br><span class="line">chmod a+x /etc/init.d/maui</span><br><span class="line">chkconfig maui on</span><br><span class="line">systemctl enable maui #开机启动</span><br><span class="line">/etc/init.d/maui start #启动</span><br></pre></td></tr></table></figure></li><li>相关命令</li></ol><ul><li>&#x2F;etc&#x2F;init.d&#x2F;maui  start      #启动maui</li><li>&#x2F;etc&#x2F;init.d&#x2F;maui  status     #查看maui开启状态</li><li>&#x2F;etc&#x2F;init.d&#x2F;maui  restart    #重启maui</li><li>&#x2F;etc&#x2F;init.d&#x2F;maui  stop       #停止maui</li></ul><h1 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h1><ul><li>pbsnodes: Server has no node list MSG&#x3D;node list is empty - check ‘server_priv&#x2F;nodes’ file<br>用 qterm 之后重启服务</li></ul><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ol><li>控制节点和计算节点都关机重启，注意顺序</li><li>看到进程<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -e | grep 进程名字</span><br></pre></td></tr></table></figure><img src="8.png"><br><img src="9.png"></li><li>设置队列<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qmgr -c &quot;create queue bigmem queue_type=execution&quot;</span><br><span class="line">qmgr -c &quot;set queue bigmem enabled = True&quot;</span><br><span class="line">qmgr -c &quot;set queue bigmem started = True&quot; #我这里设置的队列名字是 bigmem</span><br></pre></td></tr></table></figure></li><li>使用 VASP 进行测试</li><li>准备好 VASP文件和提交任务脚本<br><img src="10.png"><br><img src="11.png"></li><li>设置好 VSAP 和 Intel oneAPI 的环境变量，可以参考：<a href="/2024/03/20/Centos8-stream%E5%AE%89%E8%A3%85VASP-2024-Intel-oneAPI/" title="Centos8 stream安装VASP--2024 Intel oneAPI">Centos8 stream安装 VASP 2024 Intel oneAPI</a></li><li>由于我的 VASP 安装在 &#x2F;opt 下面 所以我需要将 node1 的&#x2F;opt 挂载到master的 &#x2F;opt 下面，具体方法参考：<a href="/2024/03/22/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89/" title="Centos8集群Torque作业管理系统安装（二）">Centos8集群Torque作业管理系统安装（二）</a></li><li>完成后就可以提交任务。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qsub workVasp.pbs</span><br></pre></td></tr></table></figure><img src="13.png"><br><img src="14.png"><br><img src="12.png"><br>可以看到计算成功，表明我们的Torque作业管理系统安装成功。</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/387947448" title="Centos7+Torque+Maui安装">Centos7+Torque+Maui安装</a></li><li><a href="https://zhuanlan.zhihu.com/p/201400741" title="Centos 7 或 Centos 8 下集群服务器 Torque作业管理系统的安装（小白专用）">Centos 7 或 Centos 8 下集群服务器 Torque作业管理系统的安装（小白专用）</a></li><li><a href="https://gist.github.com/wangxianhe/1236d22319ddff6b42b1dcfc7f60eac7" title="CentOS 7 高性能计算（HPC）集群搭建过程">CentOS 7 高性能计算（HPC）集群搭建过程</a></li><li><a href="https://blog.csdn.net/u012460749/article/details/78583026" title="Centos7安装-多节点Torque">Centos7安装-多节点Torque</a></li><li><a href="http://bbs.keinsci.com/thread-20943-1-1.html" title="CentOS下安装PBS+maui教程">CentOS下安装PBS+maui教程</a></li><li><a href="https://cloud.tencent.com/developer/article/2158787" title="Centos7安装-多节点Torque">Centos7安装-多节点Torque</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> Torque </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8集群Torque作业管理系统安装（三）</title>
      <link href="/2024/03/23/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2024/03/23/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>搭建集群的时候需要频繁的到个个节点上去，因此需要设置节点之间的免密登录</p><h1 id="集群免密登录"><a href="#集群免密登录" class="headerlink" title="集群免密登录"></a>集群免密登录</h1><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><table><thead><tr><th align="center">主机名</th><th align="center">系统</th><th align="center">ip</th></tr></thead><tbody><tr><td align="center">master（服务端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.122</td></tr><tr><td align="center">node1（客户端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.123</td></tr></tbody></table><h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><ol><li>修改hosts文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">172.16.34.122 master</span><br><span class="line">172.16.34.123 node1</span><br></pre></td></tr></table></figure></li><li>在每台机器上都生成秘钥对<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>输入三次回车后，在家目录下会生成 .ssh 文件夹<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -a</span><br></pre></td></tr></table></figure><img src="1.png"><br>在 .ssh 目录下会看见 id_rsa（私钥）和 id_rsa.pub （公钥）<br><img src="2.png"></li><li>将 master 的 id_rsa.pub 复制到 node1<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp ~/.ssh/id_rsa.pub root@node1:~/.ssh/master_pub</span><br></pre></td></tr></table></figure><img src="3.png"><br><img src="4.png"></li><li>合并 master_pub 和 node1 的 id_rsa.pub 合并为 authorized_keys<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat master_pub id_rsa.pub &gt; authorized_keys</span><br></pre></td></tr></table></figure></li><li>将生成好的 authorized_keys 发送回 master<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp authorized_keys root@master:~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li>测试成功<br><img src="5.png"><br><img src="6.png"></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/136152982" title="linux 集群免密登录，多种方式，详细">linux 集群免密登录，多种方式，详细</a><br><a href="https://gist.github.com/wangxianhe/d9bb9a4006bc0ec456c0ddb62d69a1a8" title="CentOS7 ssh免密码访问">CentOS7 ssh免密码访问</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8集群Torque作业管理系统安装（二）</title>
      <link href="/2024/03/22/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2024/03/22/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>主要还是工作原因，需要搭建高性能计算集群，因此这里用虚拟机搭一个小的集群，学习一下。</p><h1 id="NFS系统的搭建"><a href="#NFS系统的搭建" class="headerlink" title="NFS系统的搭建"></a>NFS系统的搭建</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>对于我们进行集群计算，远程多用户提交算例不仅要求每一台服务器上用户一样，必要程序的文件路径同样要求相同，因此需要将计算节点的部分文件夹挂载到控制节点。NFS（Network File System）就可以实现这样的功能。NFS 即网络文件系统。功能是让客户端通过网络访问不同主机上磁盘里的数据。特别是我们在控制节点上装上了某个软件，但是没有在计算节点上装，一定要把这个软件地址挂载到控制节点上，不然无法进行计算，要保证软件的路径相同。NFS的实现依赖于RPC（远程过程调用）机制，RPC充当NFS服务器和客户端的中介，以完成从远程到本地的映射过程，提供RPC支持的服务为rpcbind，提供NFS共享的服务为nfs-server。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>关机的时候先关客户端再关服务端，开机的时候先开服务端再开客户端。</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><table><thead><tr><th align="center">主机名</th><th align="center">系统</th><th align="center">ip</th></tr></thead><tbody><tr><td align="center">master（服务端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.122</td></tr><tr><td align="center">node1（客户端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.123</td></tr></tbody></table><h2 id="服务端和客户端共同配置"><a href="#服务端和客户端共同配置" class="headerlink" title="服务端和客户端共同配置"></a>服务端和客户端共同配置</h2><ol><li>为了避免服务端和客户端无法通信，关闭防火墙和selinux<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure></li><li>修改hosts文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">172.16.34.122 master</span><br><span class="line">172.16.34.123 node1</span><br></pre></td></tr></table></figure></li></ol><h2 id="服务端的配置"><a href="#服务端的配置" class="headerlink" title="服务端的配置"></a>服务端的配置</h2><ol><li>安装服务端需要的软件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install nfs-utils</span><br></pre></td></tr></table></figure>注意我们只安装 nfs-utils 就可以，rpcbind 属于它的依赖，也会安装上。</li><li>启动 NSF 并开启开机自动启动<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable rpcbind</span><br><span class="line">systemctl enable --now nfs-server</span><br><span class="line">systemctl start rpcbind</span><br><span class="line">systemctl start nfs-server</span><br></pre></td></tr></table></figure></li><li>我们以挂载 \home 为例<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/exports</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line"> /home 172.16.34.0/24(rw,sync,no_root_squash,no_all_squash)</span><br></pre></td></tr></table></figure></li></ol><ul><li>共享 &#x2F;home 目录</li><li>172.16.34.0&#x2F;24 设置客户端的 ip 地址范围，* 代表所有，即没有限制</li><li>rw: 权限设置，可读可写。</li><li>sync: 同步共享目录。</li><li>no_root_squash: 可以使用 root 授权。</li><li>no_all_squash: 可以使用普通用户授权。</li></ul><ol start="4"><li>刷新配置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exportfs -rv</span><br></pre></td></tr></table></figure></li><li>重启 NFS 服务<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart nfs-server</span><br></pre></td></tr></table></figure></li><li>检查一下本地的共享目录<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">showmount -e 主机名</span><br></pre></td></tr></table></figure><img src="1.png"></li></ol><h2 id="客户端的配置"><a href="#客户端的配置" class="headerlink" title="客户端的配置"></a>客户端的配置</h2><ol><li>安装客户端需要的软件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install nfs-utils</span><br></pre></td></tr></table></figure></li><li>启动 NFS 相关的服务并设置开机启动<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable rpcbind</span><br><span class="line">systemctl enable --now nfs-server</span><br><span class="line">systemctl start rpcbind</span><br><span class="line">systemctl start nfs-server</span><br></pre></td></tr></table></figure></li><li>检查服务端的共享目录<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">showmount -e 服务端主机名</span><br></pre></td></tr></table></figure><img src="2.png"></li><li>挂载共享文件夹<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount -t nfs 服务端主机名:/home/ /home/</span><br></pre></td></tr></table></figure><img src="3.png"></li><li>查看挂载<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount</span><br></pre></td></tr></table></figure><img src="4.png"></li><li>测试挂载，在客户端的共享区创建文件，在服务端可以看到相应的文件<br><img src="5.png"><br><img src="6.png"><br>7.设置开机自动挂载<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.local</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">mount -t nfs 主机名:/home/ /home/</span><br></pre></td></tr></table></figure></li><li>关机之后重启<br><img src="7.png"><br><img src="8.png"></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://developer.aliyun.com/article/834355" title="如果有人问你Centos8怎么安装配置NFS，就把这篇文章丢给她!">如果有人问你Centos8怎么安装配置NFS，就把这篇文章丢给她!</a></li><li><a href="https://gist.github.com/wangxianhe/d42c0b777287f215d5c18757fc0e0308" title="CentOS nfs服务">CentOS nfs服务</a></li><li><a href="https://blog.csdn.net/suifeng1984114/article/details/122467608" title="Centos8 NFS服务器搭建">Centos8 NFS服务器搭建</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> NFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8集群Torque作业管理系统安装（一）</title>
      <link href="/2024/03/22/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/03/22/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>主要还是工作原因，需要搭建高性能计算集群，因此这里用虚拟机搭一个小的集群，学习一下。</p><h1 id="NIS服务的搭建"><a href="#NIS服务的搭建" class="headerlink" title="NIS服务的搭建"></a>NIS服务的搭建</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>对于一个高性能计算集群，里面有很多台服务器，而且一般每台服务器都会有相同的用户，因此如果对每一台服务器都去设置相同的用户的用户名和密码，那将是一个非常繁杂的问题，特别是如果要进行增删改那就是巨大的任务量，因为每台服务器都要去增删改。那么，如果能够有一台服务器作为主节点来管理该集群中所有服务器的帐号密码，当其他的服务器有用户登录的需求时，可以到这台服务器上去查询请求相关的帐号密码等信息，如此这样一来，如果想要增删改，只需要到主节点服务器上面进行处理即可，便于管理。NIS（Network Information Services）就可以实现这样的功能。NIS早期为Sun Yellow Pages 简称YP 黄页的意思。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><h3 id="NIS-server-（服务端）"><a href="#NIS-server-（服务端）" class="headerlink" title="NIS server （服务端）"></a>NIS server （服务端）</h3><ul><li>NIS 服务端包括 master 和 slave服务端两种，slave的作用主要是做备份，master出现问题后，slave代替master工作，以此不让整个系统崩溃。</li></ul><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><ol><li>master先把帐号密码相关文件制作成数据库文件。</li><li>master告诉slave来更新或者slave主动来更新。</li><li>如果帐号密码，需要重新制作数据库文件并重新同步master和slave。</li></ol><h3 id="NIS-client（客户端）"><a href="#NIS-client（客户端）" class="headerlink" title="NIS client（客户端）"></a>NIS client（客户端）</h3><h4 id="工作流程-1"><a href="#工作流程-1" class="headerlink" title="工作流程"></a>工作流程</h4><ol><li>当用户登录 NIS 客户端时，会优先查询本机的账号和密码。</li><li>如果没有找到账号和密码，开始向整个 NIS 网域的主机广播查询。</li><li>每个 NIS 服务端（master&#x2F;slave）都可以进行相应，先响应者优先。</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>关机的时候先关客户端再关服务端，开机的时候先开服务端再开客户端。</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><table><thead><tr><th align="center">主机名</th><th align="center">系统</th><th align="center">ip</th></tr></thead><tbody><tr><td align="center">master（服务端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.122</td></tr><tr><td align="center">node1（客户端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.123</td></tr></tbody></table><h2 id="服务端和客户端共同配置"><a href="#服务端和客户端共同配置" class="headerlink" title="服务端和客户端共同配置"></a>服务端和客户端共同配置</h2><ol><li>为了避免服务端和客户端无法通信，关闭防火墙和selinux<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure></li><li>修改hosts文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">172.16.34.122 master</span><br><span class="line">172.16.34.123 node1</span><br></pre></td></tr></table></figure></li></ol><h2 id="服务端的配置"><a href="#服务端的配置" class="headerlink" title="服务端的配置"></a>服务端的配置</h2><ol><li>安装服务端需要的软件：ypserv, yp-tools, rpcbind<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install ypserv yp-tools rpcbind</span><br></pre></td></tr></table></figure></li></ol><ul><li>ypserv：提供 NIS Server端的设定软件</li><li>yp-tools：提供 NIS 相关的查寻指令功能</li><li>rpcbind：提供RPC程序号码和通用地址互相转换</li></ul><ol start="2"><li>设置 NIS 域名<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nisdomainname archer # NIS 域名为 archer</span><br></pre></td></tr></table></figure></li><li>设置自动挂载 NIS 域名，设置相关权限<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.d/rc.local</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">/bin/nisdomainname archer</span><br><span class="line">chmod 777 /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure></li><li>设置172.16.34.0网段访问权限<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/ypserv.conf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">172.16.34.0: *: *:none</span><br></pre></td></tr></table></figure>相关功能<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 192.168.10.110:*:*:none #给予该IP访问权限</span><br><span class="line">- 192.168.10.110:*:*:deny #拒绝该IP访问权限</span><br><span class="line">-               :*:*:deny #拒绝所有网络的访问权限</span><br></pre></td></tr></table></figure></li><li>建立存放用户信息的数据库<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/lib64/yp/ypinit -m  #next host to add：需要ctrl+d</span><br></pre></td></tr></table></figure><img src="2.png"></li><li>创建测试用户<br><img src="1.png"></li><li>同步新用户信息到数据库，注意：每次有用户数据更新，都要执行<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /var/yp</span><br><span class="line">make</span><br></pre></td></tr></table></figure><img src="3.png"></li><li>重新启动服务，设置为开机自启动<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart ypserv.service yppasswdd.service rpcbind.service</span><br><span class="line">systemctl enable ypserv.service yppasswdd.service rpcbind.service </span><br></pre></td></tr></table></figure><img src="4.png"></li></ol><h2 id="客户端的配置"><a href="#客户端的配置" class="headerlink" title="客户端的配置"></a>客户端的配置</h2><ol><li>安装客户端需要的软件：ypbind, rpcbind, oddjob-mkhomedir<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install ypbind rpcbind oddjob-mkhomedir</span><br></pre></td></tr></table></figure></li></ol><ul><li>ypbind ：提供 NIS Client 端的设定软件</li><li>oddjob-mkhomedir：用来创建主目录</li></ul><ol start="2"><li><p>设置域名</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nisdomainname archer</span><br></pre></td></tr></table></figure></li><li><p>开启自动挂载 NIS 域名，并设置权限</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.d/rc.local</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">/bin/nisdomainname archer</span><br><span class="line">chmod 777 /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure></li><li><p>指定 NIS 域和服务器 ip</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/yp.conf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">domain archer server master</span><br></pre></td></tr></table></figure></li><li><p>重新启动服务，设置开机自启</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart ypbind.service rpcbind.service nis-domainname oddjobd.service</span><br><span class="line">systemctl enable --now ypbind.service rpcbind.service nis-domainname oddjobd.service</span><br></pre></td></tr></table></figure></li><li><p>查看用户是否加入 archer 域中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yptest</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]# yptest</span><br><span class="line">Test 1: domainname</span><br><span class="line">Configured domainname is &quot;archer&quot;</span><br><span class="line"></span><br><span class="line">Test 2: ypbind</span><br><span class="line">Use Protocol V1: Used NIS server: 172.16.34.122</span><br><span class="line">Use Protocol V2: Used NIS server: 172.16.34.122</span><br><span class="line">Use Protocol V3:</span><br><span class="line">ypbind_nconf:</span><br><span class="line">nc_netid: udp</span><br><span class="line">nc_semantics: 1</span><br><span class="line">nc_flag: 1</span><br><span class="line">nc_protofmly: &#x27;inet&#x27;</span><br><span class="line">nc_proto: &#x27;udp&#x27;</span><br><span class="line">nc_device: &#x27;-&#x27;</span><br><span class="line">nc_nlookups: 0</span><br><span class="line">ypbind_svcaddr: 172.16.34.122:805</span><br><span class="line">ypbind_servername: master</span><br><span class="line">ypbind_hi_vers: 2</span><br><span class="line">ypbind_lo_vers: 2</span><br><span class="line"></span><br><span class="line">Test 3: yp_match</span><br><span class="line">WARNING: No such key in map (Map passwd.byname, key nobody)</span><br><span class="line"></span><br><span class="line">Test 4: yp_first</span><br><span class="line">user1 user1:$6$IVDk9bvENpB.vNaU$Jg1oZ2W2j9sIysW6kVysZBz5I67u.SWvQBPrype32FiosWH5td0XIOcoSPGlPI2L./aTjQZ5e..grUSAe1piN1:1001:1002::/home/user1:/bin/bash</span><br><span class="line"></span><br><span class="line">Test 5: yp_next</span><br><span class="line">user2 user2:$6$Fztg7jJWLUMjmiIC$jsnlqAveJ8Vr22MRPfzjjVHY5LiNedgv1GiEHZoCEhwQ6iODCkDxLH8gV9.ChwWwk3teOnvRQHshlcqLouvOt1:1002:1003::/home/user2:/bin/bash</span><br><span class="line">user_test user_test:$6$N74q30Iqd8OgX7mX$JvhizpG0Hg3tdtc9bAnqx2JQpiv.DpywRiDSGM/csz5ICLMdGMeMVSYbp0l9ZhoUD10iwvg9wiq.unS/Nklue1:1000:1001::/home/user_test:/bin/bash</span><br><span class="line"></span><br><span class="line">Test 6: yp_master</span><br><span class="line">master</span><br><span class="line"></span><br><span class="line">Test 7: yp_order</span><br><span class="line">1711108162</span><br><span class="line"></span><br><span class="line">Test 8: yp_maplist</span><br><span class="line">netid.byname</span><br><span class="line">group.bygid</span><br><span class="line">group.byname</span><br><span class="line">passwd.byuid</span><br><span class="line">passwd.byname</span><br><span class="line">mail.aliases</span><br><span class="line">protocols.byname</span><br><span class="line">protocols.bynumber</span><br><span class="line">services.byservicename</span><br><span class="line">services.byname</span><br><span class="line">rpc.bynumber</span><br><span class="line">rpc.byname</span><br><span class="line">hosts.byaddr</span><br><span class="line">hosts.byname</span><br><span class="line">ypservers</span><br><span class="line"></span><br><span class="line">Test 9: yp_all</span><br><span class="line">user1 user1:$6$IVDk9bvENpB.vNaU$Jg1oZ2W2j9sIysW6kVysZBz5I67u.SWvQBPrype32FiosWH5td0XIOcoSPGlPI2L./aTjQZ5e..grUSAe1piN1:1001:1002::/home/user1:/bin/bash</span><br><span class="line">user2 user2:$6$Fztg7jJWLUMjmiIC$jsnlqAveJ8Vr22MRPfzjjVHY5LiNedgv1GiEHZoCEhwQ6iODCkDxLH8gV9.ChwWwk3teOnvRQHshlcqLouvOt1:1002:1003::/home/user2:/bin/bash</span><br><span class="line">user_test user_test:$6$N74q30Iqd8OgX7mX$JvhizpG0Hg3tdtc9bAnqx2JQpiv.DpywRiDSGM/csz5ICLMdGMeMVSYbp0l9ZhoUD10iwvg9wiq.unS/Nklue1:1000:1001::/home/user_test:/bin/bash</span><br><span class="line">1 tests failed</span><br></pre></td></tr></table></figure></li><li><p>配置用户身份验证</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">authselect select nis --force </span><br></pre></td></tr></table></figure><p><img src="5.png"></p></li><li><p>配置初次登陆自动创建家目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">authselect enable-feature with-mkhomedir</span><br></pre></td></tr></table></figure><p><img src="6.png"></p></li><li><p>登录测试</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - user2</span><br></pre></td></tr></table></figure><p><img src="7.png"></p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/qq_63986545/article/details/126101135" title="Centos8.5搭建NIS详细步骤">Centos8.5搭建NIS详细步骤</a></li><li><a href="https://www.cnblogs.com/wangmuchen/p/14671708.html" title="Centos8.3-NIS">Centos8.3-NIS</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> NIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2024/03/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/03/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>以后工作会经常用到 Linux 系统，在这里记录一下常用的命令，持续更新。</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a  #查看ip</span><br><span class="line">nmcli connection down enp0s3 &amp;&amp; nmcli connection up enp0s3 ——重启网卡enp0s3</span><br><span class="line">ping www.baidu.com  #向某个网址发送请求，检查网络是否通畅</span><br></pre></td></tr></table></figure><h2 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname 主机名 #设置主机名</span><br></pre></td></tr></table></figure><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf -y install 软件名  #下载软件</span><br><span class="line">yum -y install 软件名  #下载软件</span><br></pre></td></tr></table></figure><h2 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su - 用户名 #root用户登陆其他账号</span><br></pre></td></tr></table></figure><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -e | grep 进程名字 #查看进程</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机的网络类型和静态ip的设置</title>
      <link href="/2024/03/21/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E7%B1%BB%E5%9E%8B%E5%92%8C%E9%9D%99%E6%80%81ip%E7%9A%84%E8%AE%BE%E7%BD%AE/"/>
      <url>/2024/03/21/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E7%B1%BB%E5%9E%8B%E5%92%8C%E9%9D%99%E6%80%81ip%E7%9A%84%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>虚拟机的网络配置对于使用虚拟机特别重要，我去了解了一下关于虚拟机网络的东西，在这里做个记录。</p><h1 id="虚拟机的网络配置"><a href="#虚拟机的网络配置" class="headerlink" title="虚拟机的网络配置"></a>虚拟机的网络配置</h1><h2 id="虚拟机的网络类型"><a href="#虚拟机的网络类型" class="headerlink" title="虚拟机的网络类型"></a>虚拟机的网络类型</h2><ul><li>NAT (Network address translation) 模式<br>也叫网络地址转换模式。在 NAT 模式下，虚拟机要访问外部网络，需要经过宿主机进行处理，再连接到外部网络。虚拟机可以访问外部网络和宿主机，宿主机无法访问虚拟机。举个形象的例子，小红（虚拟机）要过桥去村子外面买菜，但是这座桥是小黄（宿主机）的，因此需要小黄同意才可以过桥。在这种情况下，宿主机可以看做充当路由器的作用，宿主机虚拟出来的dhcp服务器会给虚拟机分配一个局域网的 ip 地址。在这种情况下，外部网络无法访问我们的虚拟机，比较安全。</li><li>桥接模式<br>在桥接模式下，虚拟机和宿主机类似于兄弟，属于同一网段的独立网络。虚拟机直接和外部网络相连，宿主机充当了虚拟机和外部网络的桥梁，从而实现了虚拟机和外部网络的通信。虚拟机可以访问外部网络和宿主机，宿主机也可以访问虚拟机。但是在这种情况下，外部网络可以访问虚拟机，并不安全。</li><li>仅主机模式Host-only网络<br>开启仅主机模式Host-only网络之前，我们需要在Virtual Box创建一个Ethernet Adapter，其和宿主机虚拟出来的网卡处于在同一个网段，虚拟机和宿主机共享一个网络，从而实现了主机和多个虚拟机之间的通信。虚拟机可以访问宿主机，无法访问外部网络。宿主机可以访问虚拟机。</li></ul><h2 id="NAT模式"><a href="#NAT模式" class="headerlink" title="NAT模式"></a>NAT模式</h2><ol><li>将虚拟机设置为 NAT 模式<br><img src="1.png"></li><li>查看 ip<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="2.png"><br>ip 为10.0.2.15</li><li>访问宿主机(172.16.34.145)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 172.16.34.145</span><br></pre></td></tr></table></figure><img src="3.png"><br>能和宿主机通信</li><li>访问外部网络<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><img src="4.png"><br>能够访问外部网络。</li><li>宿主机访问虚拟机<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 10.0.2.15</span><br></pre></td></tr></table></figure><img src="5.png"><br>宿主机无法访问虚拟机。</li></ol><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><ol><li>将虚拟机设置为桥接模式<br><img src="6.png"></li><li>查看 ip<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="7.png"><br>ip 为172.16.34.246，与宿主机的外部网络在同一网段。</li><li>访问宿主机(172.16.34.145)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 172.16.34.145</span><br></pre></td></tr></table></figure><img src="8.png"><br>能和宿主机通信</li><li>访问外部网络<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><img src="9.png"><br>能够访问外部网络。</li><li>宿主机访问虚拟机<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 172.16.34.246</span><br></pre></td></tr></table></figure><img src="10.png"><br>宿主机可以访问虚拟机。</li></ol><h2 id="仅主机模式Host-only网络"><a href="#仅主机模式Host-only网络" class="headerlink" title="仅主机模式Host-only网络"></a>仅主机模式Host-only网络</h2><ol><li>设置全局的网卡：管理 -&gt; 工具 -&gt; 网络配置管理器 -&gt; 创建<br><img src="12.png"><br>启动DHCP服务器<br><img src="13.png"><br><img src="14.png"></li><li>将虚拟机设置为仅主机模式Host-only网络<br><img src="11.png"></li><li>查看 ip<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="15.png"><br>ip 为192.168.176.3</li><li>访问宿主机(172.16.34.145)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 172.16.34.145</span><br></pre></td></tr></table></figure><img src="16.png"><br>无法和宿主机进行通信，经过分析发现宿主机和虚拟机的 ip 不在一个网段，肯定无法访问的，现在宿主机的 ip 相当于一个外部网络的 ip 。 我们可以通过宿主机的局域网 ip (192.168.176.1)进行访问，其和虚拟机的 ip 在同一个网段。<br><img src="17.png"><br>可以访问宿主机<br><img src="18.png"><br>通过查看 Virtual Box的网络配置，可以看到相应的 ip 地址分配方案，ip 地址会在最小地址和最大地址之间随机生成。<br><img src="19.png"></li><li>访问外部网络<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><img src="20.png"><br>无法访问外部网络。</li><li>宿主机访问虚拟机<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 192.168.176.3</span><br></pre></td></tr></table></figure><img src="21.png"><br>宿主机可以访问虚拟机，如果访问不了，请关闭宿主机的防火墙。</li></ol><h2 id="常用的网络配置"><a href="#常用的网络配置" class="headerlink" title="常用的网络配置"></a>常用的网络配置</h2><ul><li>NAT模式+仅主机模式Host-only网络</li><li>桥接网络</li></ul><h2 id="NAT模式-仅主机模式Host-only网络"><a href="#NAT模式-仅主机模式Host-only网络" class="headerlink" title="NAT模式+仅主机模式Host-only网络"></a>NAT模式+仅主机模式Host-only网络</h2><ol><li>网卡1设置为仅主机模式Host-only网络，网卡2设置设置为NAT模式<br><img src="22.png"><br><img src="23.png"></li><li>查看 ip<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="24.png"><br>存在两张网卡：enp0s3 (192.168.176.3)，enp0s8 (10.0.3.15)</li><li>访问宿主机(172.16.34.145)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 172.16.34.145</span><br></pre></td></tr></table></figure><img src="25.png"><br>能和宿主机通信</li><li>访问外部网络<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><img src="26.png"><br>能够访问外部网络。</li><li>宿主机访问虚拟机<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 192.168.176.3</span><br></pre></td></tr></table></figure><img src="27.png"><br>宿主机可以访问虚拟机。</li></ol><h2 id="静态-ip-地址配置：以桥接网络为例"><a href="#静态-ip-地址配置：以桥接网络为例" class="headerlink" title="静态 ip 地址配置：以桥接网络为例"></a>静态 ip 地址配置：以桥接网络为例</h2><ol><li>查看 ip<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="28.png"><br>ip 为172.16.34.246，与宿主机的外部网络在同一网段。</li><li>该 ip 为动态分配的，下次开机可能 ip 会改变，因此需要设置静态 ip。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=172.16.34.123</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=172.16.34.1 #和宿主机一样</span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line">DNS2=8.8.8.8</span><br></pre></td></tr></table></figure><img src="29.png"></li><li>重启网卡<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmcli connection down enp0s3 &amp;&amp; nmcli connection up enp0s3 ——重启网卡enp0s3</span><br></pre></td></tr></table></figure></li><li>查看 ip<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="30.png"><br>修改 ip 为：172.16.34.123</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://cloud.tencent.com/developer/article/1463782" title="桥接、NAT、Host-only上网方式的区别">桥接、NAT、Host-only上网方式的区别</a></li><li><a href="https://www.ctyun.cn/developer/article/353763363754053" title="Linux虚拟机的创建与配网（一）">Linux虚拟机的创建与配网（一）</a></li><li><a href="https://www.bilibili.com/video/BV1nF41117d1/?spm_id_from=333.788.recommend_more_video.-1&vd_source=4470be84aba61145fe9d1690fe726951" title="002.十分钟带你搞懂虚拟机各种网络配置以及centos7配置静态IP,看完学的会，配的出！">002.十分钟带你搞懂虚拟机各种网络配置以及centos7配置静态IP,看完学的会，配的出！</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 虚拟机网络配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> Virtual Box </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加hexo搭建个人博客（七）</title>
      <link href="/2024/03/21/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%83%EF%BC%89/"/>
      <url>/2024/03/21/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%83%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>主要是自己想把收集来的好看的图片整理成相册之类的，所以想着在博客中添加一个相册功能。</p><h1 id="相册仓库搭建"><a href="#相册仓库搭建" class="headerlink" title="相册仓库搭建"></a>相册仓库搭建</h1><ol><li>在主题配置文件 _config.butterfly.yml 中设置相册<br><img src="5.png"></li><li>在 Git Bash 输入：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new [layout] gallery</span><br></pre></td></tr></table></figure>创建相册仓库</li><li>修改仓库 &#x2F;source&#x2F;gallery&#x2F;index.md<br><img src="1.png"></li><li>创建相册<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;gallery-group-main&quot;&gt;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><ul><li>name：图库名字</li><li>description：图库描述</li><li>link：连接到对应相册的地址</li><li>img-url：图库封面的地址<br>例如：<br><img src="2.png"></li></ul><h1 id="相册的创建"><a href="#相册的创建" class="headerlink" title="相册的创建"></a>相册的创建</h1><ol><li>在 Git Bash 输入：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page landscape</span><br></pre></td></tr></table></figure>创建相册</li><li>修改相册 &#x2F;source&#x2F;landscape&#x2F;index.md<br><img src="3.png"></li><li>创建相册内容<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% gallery [lazyload],[rowHeight],[limit] %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>lazyload ：【可选】点击按钮加载更多图片，填写 true&#x2F;false。默认为 false。</li><li>rowHeight ：【可选】图片显示的高度，如果需要一行显示更多的图片，可设置更小的数字。默认为 220。</li><li>limit ：【可选】每次加载多少张照片。默认为 10。<br>例如：<br><img src="4.png"></li></ul><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="6.png"><br><img src="7.png"><br><img src="8.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://butterfly.js.org/" title="butterfly 的官方教程网站">butterfly 的官方教程网站</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
          <category> 个人博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机安装Centos8 stream以及网络配置</title>
      <link href="/2024/03/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Centos8-stream%E4%BB%A5%E5%8F%8A%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/03/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Centos8-stream%E4%BB%A5%E5%8F%8A%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>由于以后会从事和 Linux 相关的工作，但我手头没有服务器，组里的服务器我也没有权限去动，所以只能在虚拟机里面搞一搞，学习学习。</p><h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><h2 id="相关软件"><a href="#相关软件" class="headerlink" title="相关软件"></a>相关软件</h2><ul><li><a href="https://www.virtualbox.org/wiki/Downloads" title="Virtual Box 下载链接">Virtual Box</a></li><li><a href="https://mirrors.aliyun.com/centos/8-stream/" title="Centos8 stream 下载链接">Centos8 stream</a></li></ul><h2 id="下载Virtual-Box"><a href="#下载Virtual-Box" class="headerlink" title="下载Virtual Box"></a>下载Virtual Box</h2><ol><li>前往<a href="https://www.virtualbox.org/wiki/Downloads" title="Virtual Box 下载链接">Virtual Box 官网</a>下载对应版本的 Virtual Box 。<br><img src="1.png"></li><li>除了修改安装目录其他就是傻瓜式一路下一步就行。<br><img src="2.png"><br><img src="3.png"></li></ol><h2 id="安装-Centos8-stream-系统"><a href="#安装-Centos8-stream-系统" class="headerlink" title="安装 Centos8 stream 系统"></a>安装 Centos8 stream 系统</h2><ol><li>打开Virtual Box ，新建一个虚拟机。<br><img src="4.png"></li><li>设置好虚拟机名称，安装路径，Centos8 stream 的目录，内存，CPU和硬盘大小。<br><img src="5.png"><br><img src="6.png"><br><img src="7.png"><br><img src="8.png"></li><li>设置好网络，这里选择桥接网卡，之后会介绍其他网卡类型。<br><img src="9.png"><br><img src="10.png"></li><li>“原神”启动！<br><img src="11.png"></li><li>设置最小化安装，选择好硬盘，连接好网络设置好root密码，开始安装。<br><img src="12.png"><br><img src="13.png"><br><img src="14.png"><br><img src="16.png"><br><img src="15.png"><br><img src="17.png"></li><li>重启后，用 root 账户登录。<br><img src="18.png"><br><img src="19.png"><br><img src="20.png"></li><li>查看 ip 为172.16.34.246。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="21.png"></li><li>检查网络是否通畅。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><img src="22.png"></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/111567471" title="win10虚拟机Oracle VM VirtualBox安装和使用教程">win10虚拟机Oracle VM VirtualBox安装和使用教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> Virtual Box </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8 stream安装VASP--2024 Intel oneAPI</title>
      <link href="/2024/03/20/Centos8-stream%E5%AE%89%E8%A3%85VASP-2024-Intel-oneAPI/"/>
      <url>/2024/03/20/Centos8-stream%E5%AE%89%E8%A3%85VASP-2024-Intel-oneAPI/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>组里的服务器安装的是 Centos7的系统，在2020年的时候 Centos 项目与红帽联合宣布将全部投资转向Centos stream , Centos7 将会在2024年6月30日停止维护。并且组里之前安装 VASP 是依赖于 Intel Parallel Studio ，但是现在 Intel 也不继续更新这个软件了，转而去开发 Intel oneAPI 。 再加上我以后从事的工作和这个很相关，因此就想着自己先试着安装一下看看，以这篇文章记录一下自己的安装过程，估计以后应该会用得到。</p><h1 id="软件的安装"><a href="#软件的安装" class="headerlink" title="软件的安装"></a>软件的安装</h1><h2 id="相关的软件"><a href="#相关的软件" class="headerlink" title="相关的软件"></a>相关的软件</h2><ul><li><a href="https://www.virtualbox.org/wiki/Downloads" title="Virtual Box 下载链接">Virtual Box</a></li><li><a href="https://mirrors.aliyun.com/centos/8-stream/" title="Centos8 stream 下载链接">Centos8 stream</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/developer/tools/oneapi/base-toolkit-download.html" title="l_BaseKit 下载链接">l_BaseKit</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/developer/tools/oneapi/hpc-toolkit-download.html" title="l_HPCKit 下载链接">l_HPCKit</a></li><li><a href="https://www.vasp.at/" title="VASP 官网">VASP</a></li></ul><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><p>由于我手头没有服务器，组里的服务器我也没有权限去动，所以只能在虚拟机里面搞一搞了。相应的软件可以在官网上进行下载，由于 VASP 是收费的软件，因为版权原因，这里就不提供了，需要的话可以评论区说一下。</p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><ol><li><p>Virtual Box 和 Centos8 stream 的安装很简单，可以参考这篇知乎文章：<a href="https://zhuanlan.zhihu.com/p/111567471" title="win10虚拟机Oracle VM VirtualBox安装和使用教程">win10虚拟机Oracle VM VirtualBox安装和使用教程</a>和之前的文章：<a href="/2024/03/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Centos8-stream%E4%BB%A5%E5%8F%8A%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/" title="虚拟机安装Centos8 stream以及网络配置">虚拟机安装Centos8 stream以及网络配置</a>，最小化安装即可。</p></li><li><p>安装一些 Linux 的软件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install gcc</span><br><span class="line">yum install gcc-c++</span><br><span class="line">yum install make</span><br><span class="line">yum install tar</span><br><span class="line">yum install rsync</span><br></pre></td></tr></table></figure></li><li><p>对于这两个 Intel 软件 ，我这里分别下载的是：l_BaseKit_p_2024.0.1.46_offline.sh 和 l_HPCKit_p_2024.0.1.38_offline.sh 。<br><img src="1.png"></p></li><li><p>首先安装 l_BaseKit_p_2024.0.1.46_offline.sh，输入命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh l_BaseKit_p_2024.0.1.46_offline.sh</span><br></pre></td></tr></table></figure><p>按照提示一步一步安装就行。</p></li><li><p>安装 l_HPCKit_p_2024.0.1.38_offline.sh，同上。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh l_HPCKit_p_2024.0.1.38_offline.sh</span><br></pre></td></tr></table></figure><p>安装成功后在 &#x2F;opt 下面会出现 intel 文件夹。 </p></li><li><p>执行以下命令设置环境变量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /opt/intel/oneapi/setvars.sh</span><br></pre></td></tr></table></figure><p>会出现一下信息：<br><img src="2.png"></p></li><li><p>执行以下命令生成 libfftw3xf_intel.a 。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /opt/intel/oneapi/mkl/2024.0/share/mkl/interfaces/fftw3xf</span><br><span class="line">source /opt/intel/oneapi/setvars.sh</span><br><span class="line">make libintel64</span><br></pre></td></tr></table></figure><p><img src="3.png"></p></li><li><p>解压 VASP 我这里的版本是 6.3.0</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf vasp.6.3.0.tgz</span><br></pre></td></tr></table></figure></li><li><p>复制生成 makefile.include </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd vasp.6.3.0</span><br><span class="line">cp arch/makefile.include.intel makefile.include</span><br></pre></td></tr></table></figure></li><li><p>修改 makefile.include</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MKLROOT    ?=        #直接设置为空，之前设置好了环境变量了，可以使用 echo $MKLROOT 查看环境变量</span><br><span class="line">CC_LIB      = icx</span><br><span class="line">CXX_PARS    = icpx</span><br></pre></td></tr></table></figure></li><li><p>修改后保存，之后直接安装。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make all</span><br></pre></td></tr></table></figure><p>大概等个半个小时就可以安装成功了。<br><img src="4.png"></p></li><li><p>每次登陆都要添加 oneAPI 的环境变量，配置好 VASP的环境变量。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi ~/.bashrc</span><br><span class="line">添加 ：</span><br><span class="line">export PATH=/opt/vasp.6.3.0/bin/:$PATH</span><br><span class="line">source /opt/intel/oneapi/setvars.sh</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p><img src="5.png"></p></li></ol><h2 id="测试-VASP"><a href="#测试-VASP" class="headerlink" title="测试 VASP"></a>测试 VASP</h2><ol><li>准备好输入文件后启动 VASP。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mpirun -np 2 vasp_std</span><br></pre></td></tr></table></figure><img src="6.png"></li><li>出现了相应的结果，表明安装成功！<br><img src="7.png"></li><li>注意如果是非 root 用户安装， intel 文件夹将会出现在 &#x2F;home&#x2F;用户名&#x2F; 下面，剩下的安装方法都是一样的。</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/qq_28778001/article/details/135576784" title="VASP6.3.2版本安装教程及运行测试(续)  --2024 intel OneAPI">VASP6.3.2版本安装教程及运行测试(续) – 2024 intel OneAPI</a></li><li><a href="https://blog.csdn.net/passsive/article/details/132982277" title="VASP6.3.2版本安装教程">VASP6.3.2版本安装教程</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/developer/articles/technical/building-vasp-with-intel-mkl-and-intel-compilers.html?&us" title="Building VASP* with Intel® oneAPI Base and HPC toolkits">Building VASP* with Intel® oneAPI Base and HPC toolkits</a></li><li><a href="https://zhuanlan.zhihu.com/p/565198883" title="Vasp5.4.4最新安装教程">Vasp5.4.4最新安装教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VASP </tag>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> Intel oneAPI </tag>
            
            <tag> Virtual Box </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加hexo搭建个人博客（六）</title>
      <link href="/2024/03/20/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2024/03/20/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="图床的搭建和使用"><a href="#图床的搭建和使用" class="headerlink" title="图床的搭建和使用"></a>图床的搭建和使用</h1><h2 id="为什么要使用图床"><a href="#为什么要使用图床" class="headerlink" title="为什么要使用图床"></a>为什么要使用图床</h2><p>在前面的文章中，我们使用了大量的图片。但是图片存储在什么地方，将会是一个很大的问题。如果将图片存储在hexo的项目文件中，就会使得整个项目很臃肿。同时我们也会使用大量的图片的url，通过网上去定位图片，但是这样做有时候，无法定位到这些图片。当然我们可以下载图片之后，再进行引用，这就又回到了前一个问题。解决这个问题的方式，可以将所有的本地图片上传到服务器，也就是图床。</p><h2 id="github仓库加Picogo软件"><a href="#github仓库加Picogo软件" class="headerlink" title="github仓库加Picogo软件"></a>github仓库加Picogo软件</h2><p>有很多方式都可以实现图床的功能，既然我们是要免费搭建，那就要白嫖到底了。这里我们选择采用 github 仓库 加 Picogo 的方式。</p><h3 id="新建-github-仓库"><a href="#新建-github-仓库" class="headerlink" title="新建 github 仓库"></a>新建 github 仓库</h3><p>这里就不多说了，参考前面：<a href="/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/" title="github加hexo搭建个人博客（一）">github加hexo搭建个人博客（一）</a>。</p><h3 id="Picogo-的安装和配置"><a href="#Picogo-的安装和配置" class="headerlink" title="Picogo 的安装和配置"></a>Picogo 的安装和配置</h3><h4 id="下载和安装-Picogo"><a href="#下载和安装-Picogo" class="headerlink" title="下载和安装 Picogo"></a>下载和安装 Picogo</h4><p>在这里<a href="https://github.com/Molunerfinn/PicGo/releases" title="Picogo的下载地址">下载</a>后，正常安装就行，傻瓜式安装。</p><h4 id="生成-github-token"><a href="#生成-github-token" class="headerlink" title="生成 github token"></a>生成 github token</h4><ol><li>进入主页，点击右上角的头像，点击 Settings<br><img src="3.png"></li><li>下拉至最末尾，点击 Developer settings<br><img src="4.png"></li><li>依次点击：Personal access tokens -&gt; Token -&gt; Generate a personal access token<br><img src="5.png"></li><li>Note 随便填，然后将所有都打勾选上，点击 Generate token<br><img src="6.png"></li><li>复制 token 备用<br><img src="7.png"></li></ol><h4 id="配置-Picogo"><a href="#配置-Picogo" class="headerlink" title="配置 Picogo"></a>配置 Picogo</h4><ol><li>打开软件后，进入图床设置，进行 github 的图床配置<br><img src="1.png"></li><li>按照下图进行配置，设定为新建的仓库名，在 token 那一栏中输入复制的 token ，保存即可。<br><img src="2.png"></li><li>在 PicGo 设置中可以开启代理，如果不需要的话，也可以不用开。<br><img src="11.png"></li><li>能够上传图片和复制 url 表明配置成功。<br><img src="8.png"><br><img src="9.png"><br><img src="10.png"></li><li>可以在 新建的 github 仓库中看到上传的图片。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
          <category> 个人博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
            <tag> Picgo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加hexo搭建个人博客（五）</title>
      <link href="/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hexo-主题的使用和相关设置"><a href="#hexo-主题的使用和相关设置" class="headerlink" title="hexo 主题的使用和相关设置"></a>hexo 主题的使用和相关设置</h1><p>hexo 有着很多好看有趣的主题，我们可以去<a href="https://hexo.io/themes/" title="hexo 主题">主题</a>官网上查看、下载和使用。 我这里使用的是 <a href="https://github.com/jerryc127/hexo-theme-butterfly" title="butterfly 主题">butterfly</a>。</p><h2 id="butterfly-主题的安装和配置"><a href="#butterfly-主题的安装和配置" class="headerlink" title="butterfly 主题的安装和配置"></a>butterfly 主题的安装和配置</h2><p>在博客目录下，打开 Git Bash，输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>进行安装。<br><img src="1.png"><br>安装 pug 以及 stylus 的渲染器。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p><img src="2.png"><br>将 _config.yml 中的主题换成 butterfly 。<br><img src="3.png"><br>部署成功后，我们的博客变得更加的漂亮。<br><img src="4.png"><br>我们接下来可以按照 <a href="https://butterfly.js.org/" title="butterfly 的官方教程网站">butterfly 的官方教程网站</a>进行修改，加上特效和一些其他的功能，就可以让博客变得很漂亮和炫酷，就像<a href="https://butterfly.js.org/" title="butterfly 的官方教程网站">butterfly 的官方教程网站</a>一样。</p><h2 id="设置搜索功能"><a href="#设置搜索功能" class="headerlink" title="设置搜索功能"></a>设置搜索功能</h2><p>当我们的博客内容越来越多的时候，能够快速搜索到相应的文章，就会显得越来越重要。 我们采用本地搜索，先安装相关的插件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p><img src="5.png"><br>install hexo-generator-search 插件会把文章的信息生成一个搜素的数据库保存到本地，因此搜素的速度很快。在博客的配置文件 _config.yml 中添加：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml #生成的搜素文件名</span><br><span class="line">  field: post  #指定搜素的对象，我们这里用的是文章</span><br><span class="line">  format: html #搜素结果的格式</span><br><span class="line">  limit: 10000 #最多的显示结果数</span><br></pre></td></tr></table></figure><p>修改主题的配置文件 _config.butterfly.yml ，打开 local_search：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  CDN:</span><br></pre></td></tr></table></figure><p>生成搜素文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>部署到 github 上，可以看到搜素栏可以使用。<br><img src="6.png"></p><h2 id="设置评论区和-Gitalk-的使用"><a href="#设置评论区和-Gitalk-的使用" class="headerlink" title="设置评论区和 Gitalk 的使用"></a>设置评论区和 Gitalk 的使用</h2><p>由于 hexo 是纯静态博客框架，所以其本身无法支持评论功能，需要第三方平台和软件的支持。在博客中我们需要读者的评论和交流，以提高我们的技术。因此我们需要给博客添加评论功能，我们采用的是利用 github 的免费评论平台—— Gitalk 。</p><h3 id="配置部署"><a href="#配置部署" class="headerlink" title="配置部署"></a>配置部署</h3><ul><li>进入 github 主页，点击右上方头像，点击 Settings<br><img src="7.png"></li><li>下拉到最后点击 Developer settings<br><img src="8.png"></li><li>依次点击 QAuth Apps ，Register a new application<br><img src="9.png"></li><li>填好之后点击 Regiter application<br><img src="10.png"></li><li>点击 Generate a new client secret , 并复制 Client ID 和 Client secrets。<br><img src="11.jpg"></li><li>修改主题的配置文件 _config.butterfly.yml<br><img src="12.png"><br><img src="13.png"><br>部署到 github 上可以看到评论已经开启。<br><img src="14.png"></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://butterfly.js.org/" title="butterfly 的官方教程网站">butterfly 的官方教程网站</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
          <category> 个人博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdownpad2的安装和破解</title>
      <link href="/2024/03/19/markdownpad2%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%A0%B4%E8%A7%A3/"/>
      <url>/2024/03/19/markdownpad2%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="软件下载和安装"><a href="#软件下载和安装" class="headerlink" title="软件下载和安装"></a>软件下载和安装</h2><p>markdownpad2 和 awesomium_v1.6.6_sdk_win 的下载链接可以在<a href="https://haharcher1.github.io/download/" title="博客的资源页面">博客的资源页面</a>找到。<br>先安装 awesomium_v1.6.6_sdk_win 。<br><img src="1.png"><br>一路next下去，安装路径可以自己选。<br><img src="2.png"><br>最后完成安装。<br><img src="3.png"><br>接下来安装 markdownpad2 。<br><img src="4.png"><br>一路next下去，安装路径可以自己选。<br><img src="5.png"><br>最后安装成功。<br><img src="6.png"></p><h2 id="markdownpad2-的破解"><a href="#markdownpad2-的破解" class="headerlink" title="markdownpad2 的破解"></a>markdownpad2 的破解</h2><p>运行 markdownpad2 之后会出现激活的界面。<br><img src="7.png"><br>输入邮箱地址：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Soar360@live.com</span><br></pre></td></tr></table></figure><p>输入 License key</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="8.png"><br>最后激活成功。<br><img src="9.png"><br>感谢<a href="https://www.cnblogs.com/Ning-Blog/p/15142839.html" title="MarkdownPad 2在win10上安装及破解（含安装包">这篇博客的博主提供的破解码</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdownpad2 </tag>
            
            <tag> awesomium_v1.6.6_sdk_win </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加hexo搭建个人博客（四）</title>
      <link href="/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文章书写和图片插入"><a href="#文章书写和图片插入" class="headerlink" title="文章书写和图片插入"></a>文章书写和图片插入</h1><h2 id="文章创建"><a href="#文章创建" class="headerlink" title="文章创建"></a>文章创建</h2><p>在 My_Blog 目录下打开 Git Bash ，输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &quot;文章名字&quot; # layout 可以省略</span><br></pre></td></tr></table></figure><p>关于 layout 的说明可以参考，<a href="https://fuguigui.github.io/hexo2/" title="一次完整的Hexo写作流程">这篇博客</a>和<a href="https://hexo.io/zh-cn/docs/writing.html" title="官方文档">官方文档</a>。<br><img src="1.png"><br>执行结束后会在 My_Blog\source_posts 文件夹下面生成 demo.md 文件。 hexo 支持将 markdown 语法写出来的文章转换为 Html 的格式。 因此我们在demo.md 文件中只需要按照 markdown 语法进行写作就可以了。 markdown 的语法可以参考<a href="https://www.zhihu.com/tardis/zm/art/99319314?source_id=1003" title="Markdown语法及原理从入门到高级（可能是全网最全）">这篇知乎专栏</a>。书写 markdown 的软件，我使用的是 markdownpad2 和 awesomium_v1.6.6_sdk 。软件的下载和安装请参考：<a href="/2024/03/19/markdownpad2%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%A0%B4%E8%A7%A3/" title="markdownpad2的安装和破解">markdownpad2的安装和破解</a>。</p><p>软件安装成功后，直接打开 demo.md ，输入博客内容就行，如图：<br><img src="2.png"><br>依次在 Git Bash 中输入命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>部署到 github 上，进入博客网站，可以看到：<br><img src="3.png"></p><h2 id="图片的插入"><a href="#图片的插入" class="headerlink" title="图片的插入"></a>图片的插入</h2><p>修改主目录 My_Blog 中的配置文件 _config.yml 中的参数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p><img src="4.png"><br>修改之后，每次我们用命令在 _posts 文件夹下面生成 .md 文件时，将会同时生成一个同名的文件夹，图片就可以放在这个文件夹下。<br><img src="5.png"><br><img src="6.png"><br>在 Git Bash 输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>安装插件。<br><img src="7.png"><br>按照<a href="https://github.com/xcodebuild/hexo-asset-image" title="官方文档">官方的使用说明</a>。<br><img src="14.png"><br>我的图片位置和文档中的书写方法。<br><img src="8.png"><br><img src="9.png"><br>部署成功后，发现图片无法显示：<br><img src="10.png"></p><p>我在这里卡了好久，在网上找了好多教程，都发现没有用。我用谷歌浏览器的开发者工具，发现在图片的 url 中莫名其妙会多出来一个 .com ，完全不能理解。<br><img src="11.png"><br>我都快放弃了，最后在一篇<a href="https://zhuanlan.zhihu.com/p/542101567" title="Hexo 图片插入无法显示的问题">知乎文章</a>中找到了解决方案。主要是这个插件太老了，出bug了，作者也不更新了，而hexo 都已经更新了好几个版本了。解决方法是在根目录中，我这里是 My_Blog ，按照以下顺序：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node_modules -&gt; hexo-asset-image -&gt; index.js</span><br></pre></td></tr></table></figure><ul><li>找到 index.js 文件</li><li>用记事本打开 index.js 文件</li><li>修改内容 index.js 里面的内容</li></ul><p>修改前：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, config.<span class="property">root</span> + link + src);</span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, src);</span><br></pre></td></tr></table></figure><p><img src="12.png"><br>重新部署到 github 上，可以看到图片加载成功！<br><img src="13.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
          <category> 个人博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加hexo搭建个人博客（三）</title>
      <link href="/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装-hexo-并生成网页"><a href="#安装-hexo-并生成网页" class="headerlink" title="安装 hexo 并生成网页"></a>安装 hexo 并生成网页</h1><h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><p>创建一个任意名字的文件夹，这里我创建的是 My_Blog 。 进入该文件夹，右键进入 Git Bash 输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="1.png"><br>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>初始化我们的博客。<br><img src="2.png"><br>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>生成静态文件。<br><img src="3.png"><br>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>进行本地查看。<br><img src="4.png"><br>在浏览器中输入： <a href="http://localhost:4000/">http://localhost:4000/</a><br><img src="5.png"><br>可以看到我们的博客已经布置成功了。</p><h2 id="部署到github上"><a href="#部署到github上" class="headerlink" title="部署到github上"></a>部署到github上</h2><p>在 My_Blog 文件夹中，用笔记本打开 _config.yml 文件，在最后添加：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/你的 github 用户名/你的 github 用户名.github.io.git  #你的仓库地址</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p><img src="6.png"></p><p>在 My_Blog 文件夹中，打开 Git Bash，输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装 Git 部署插件。<br><img src="7.png"><br>第一次提交到 github ，会报错，我们需要先配置邮箱和用户名。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;you@example.com&quot; #注册 github 时的邮箱</span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;Your Name&quot; #注册 github 时的用户名</span><br></pre></td></tr></table></figure><p>依次输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean #清除缓存文件和静态文件</span><br><span class="line"></span><br><span class="line">hexo g #生成静态文件</span><br><span class="line"></span><br><span class="line">hexo d # 部署到对应的 github 仓库</span><br></pre></td></tr></table></figure><p>在浏览器中输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://你的 github 用户名.github.io/</span><br></pre></td></tr></table></figure><p>就可以看到相应的网站：<br><img src="8.png"><br>同时对应的 github 仓库也存在文件。<br><img src="9.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
          <category> 个人博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加hexo搭建个人博客（二）</title>
      <link href="/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装-node-js-并配置-node-js-的环境"><a href="#安装-node-js-并配置-node-js-的环境" class="headerlink" title="安装 node.js 并配置 node.js 的环境"></a>安装 node.js 并配置 node.js 的环境</h1><p>由于 hexo 是基于 node.js 开发的框架，因此我们需要安装 node.js 并配置好相应的环境。</p><h2 id="下载并安装-node-js"><a href="#下载并安装-node-js" class="headerlink" title="下载并安装 node.js"></a>下载并安装 node.js</h2><p>进入 <a href="https://nodejs.org/en," title="node.js 的官网">node.js</a> 的官网，选择相应的版本下载就行。<br><img src="1.png"><br>安装路径那里可以选择安装的地方，其他就是一路 next 就好。<br><img src="2.png"><br>安装完成后，node.js 默认会添加进环境变量中，因此在windows的命令提示符窗口中输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line"></span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>可以看到下面的版本信息，就表明安装成功了。<br><img src="3.png"></p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>我们在使用 npm 安装一些包和插件的时候，会默认安装到 C 盘，占用系统盘的空间，影响计算机的运行速度，因此我们需要更改默认设置。在命令提示符窗口中输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set prefix &quot;D:\Program Files\nodejs\node_global&quot;</span><br><span class="line"></span><br><span class="line">npm config set cache &quot;D:\Program Files\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure><p><img src="4.png"><br>在我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量 -&gt; 系统环境变量，新建一个名叫 NODE_PATH 的变量名，在变量值处，输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\Program Files\nodejs\node_modules</span><br></pre></td></tr></table></figure><p><img src="10.png"></p><p>再编辑上面的用户环境变量中的 Path。<br>修改前：<br><img src="5.png"><br>编辑为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\Program Files\nodejs\node_global</span><br></pre></td></tr></table></figure><p>修改后：<br><img src="6.png"><br>在命令提示符中输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure><p>可以看到安装的包已经安装到了我们所指定的文件夹，对于 node.js 的安装和环境的配置就算完成了。<br><img src="7.png"><br><img src="8.png"><br><img src="9.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/antma/article/details/86104068," title="node.js 安装详细步骤教程">node.js 安装详细步骤教程</a>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
          <category> 个人博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加hexo搭建个人博客（一）</title>
      <link href="/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>由于本人刚准备转码，希望可以提高个人技术，因此搭建个人博客，来记录学习过程，遇到的问题以及解决问题的方法。希望这个搭建的方法可以帮助到大家。</p><p><a href="https://hexo.io/" title="hexo官网">hexo</a> 是一个快速、简洁且高效的博客框架。hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。我们可以利用大型同性交友网站<a href="https://github.com/" title="github官网">github</a>和 hexo 免费搭建个人博客，白嫖是第一声力！</p><h1 id="github账号注册和git软件的下载"><a href="#github账号注册和git软件的下载" class="headerlink" title="github账号注册和git软件的下载"></a>github账号注册和git软件的下载</h1><h2 id="github账号注册"><a href="#github账号注册" class="headerlink" title="github账号注册"></a>github账号注册</h2><p>进入<a href="https://github.com/" title="github官网">github</a>官网，点击右上角用邮箱进行注册。<br><img src="1.png"><br><img src="2.png"><br>注册完成，登录之后，选择免费的就好。<br><img src="3.png"><br>创建仓库：<br><img src="4.png"><br>仓库名为：你的github账号名.github.io 如图：<br><img src="5.png"><br>创建好仓库之后，在浏览器中输入：https:&#x2F;&#x2F;你的github账号名.github.io&#x2F; 可以看到相应的网站，当然现在都是空白的网页：<br><img src="6.png"></p><h2 id="git软件的下载"><a href="#git软件的下载" class="headerlink" title="git软件的下载"></a>git软件的下载</h2><p>前往<a href="https://git-scm.com/" title="git官网">git</a>官网，下载git软件：<br><img src="7.png"><br>下载相应的版本，本人是win10 64位系统：<br><img src="8.png"><br>接下来安装git软件，除了选择安装目录那里，其他的按照默认的就可以了：<br><img src="9.png"><br>安装完成后，右键选择Open Git Bash here ，打开Git Bash<br><img src="10.png"><br>输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git</span><br></pre></td></tr></table></figure><p><img src="11.png"><br>得到以下信息，表示git安装成功！<br><img src="12.png"></p><h2 id="与github进行绑定"><a href="#与github进行绑定" class="headerlink" title="与github进行绑定"></a>与github进行绑定</h2><p>由于本人的博客会利用github，需要利用git将相应的文件上传到github，因此需用通过SSH登录远程的主机，相应的方式有两种：1，口令登录。2，公钥登录。前者每次都要输入密码，比较繁琐。本人选择公钥登录，以避免频繁输入密码，在 git bash 中输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>然后一直回车进行，如果出现下面的图，表示生成成功。<br><img src="13.png"><br>生成的秘钥 id_rsa 和公钥 id_rsa.pub 在 C:\Users\你的windows用户名\.ssh 目录下：<br><img src="14.png"><br>用记事本打开公钥，将里面的内容复制，进入github主页点击右边头像，然后点击 Settings<br><img src="15.png"><br>点击SSH and GPG keys ，再点击 New SSH key<br><img src="16.png"><br>在 Key 中输入公钥的内容，然后点击 Add SSH key<br><img src="17.png"><br>在 Git Bash 中输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>再输入 yes ，得到下面的结果就表示和github连接成功。<br><img src="18.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
          <category> 个人博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
