<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux的Shell编程</title>
      <link href="/2024/04/14/Linux%E7%9A%84Shell%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/04/14/Linux%E7%9A%84Shell%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="shell语言的概述"><a href="#shell语言的概述" class="headerlink" title="shell语言的概述"></a>shell语言的概述</h1><h2 id="shell的背景"><a href="#shell的背景" class="headerlink" title="shell的背景"></a>shell的背景</h2><p>shell语言是指UNIX操作系统的命令语言，也是一种程序设计语言。</p><h2 id="shell的作用"><a href="#shell的作用" class="headerlink" title="shell的作用"></a>shell的作用</h2><p>可以自动化的执行命令，提升效率。</p><h2 id="shell的执行方式"><a href="#shell的执行方式" class="headerlink" title="shell的执行方式"></a>shell的执行方式</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash file1.sh #利用bash执行</span><br><span class="line">sh file1.sh #利用sh执行</span><br><span class="line">. file1.sh #利用.执行，注意空格</span><br><span class="line">source file1.sh #利用source执行</span><br><span class="line">chmod u+x file1.sh #添加文件执行</span><br><span class="line">./file1.sh #直接执行</span><br></pre></td></tr></table></figure><h2 id="shell的执行方式的区别"><a href="#shell的执行方式的区别" class="headerlink" title="shell的执行方式的区别"></a>shell的执行方式的区别</h2><p><code>bash file1.sh</code>，<code>sh file1.sh</code>和<code>./file1.sh</code>采用的是子shell，而<code>. file1.sh</code>和<code>source file1.sh</code>采用的是本shell。</p><ul><li>子shell：重新开启一个环境，即独立的环境，执行完成后退出，执行结果不会影响本环境。简单的例子如果shell脚本里面有前往其他目录的命令。shell结束后会回到执行目录，因为是在新环境中执行的。</li><li>本shell：在本环境中执行，执行结果会影响本环境。简单的例子如果shell脚本里面有前往其他目录的命令。shell结束后就会在新的目录。</li><li>最好使用前三种执行方式。</li></ul><h2 id="shell解释器"><a href="#shell解释器" class="headerlink" title="shell解释器"></a>shell解释器</h2><p>可以通过<code>cat /etc/shells</code>或者<code>chsh -l</code>查询</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www ~]# cat /etc/shells</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/usr/bin/sh</span><br><span class="line">/usr/bin/bash</span><br></pre></td></tr></table></figure><h1 id="shell的变量"><a href="#shell的变量" class="headerlink" title="shell的变量"></a>shell的变量</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>用固定的<strong>字符串</strong>去表达固定的内容</p><h2 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>用户自定义的变量名和变量值，注意<code>=</code>两边<strong>不能加空格</strong>，<strong>不能加空格</strong>，<strong>不能加空格</strong></p><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">name=&quot;archer&quot;</span><br><span class="line">ddd=123</span><br><span class="line">ccc=gege</span><br></pre></td></tr></table></figure><h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><ul><li><strong>变量名不能以数字开头</strong></li><li><code>=</code><strong>左右不能有空格</strong>，空格在shell起分割左右，会被看做是多个命令</li><li><strong>变量的值如果有空格必须加引号</strong></li></ul><h3 id="重复定义变量"><a href="#重复定义变量" class="headerlink" title="重复定义变量"></a>重复定义变量</h3><ul><li>如果重复定义变量时，会被覆盖<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a=123</span><br><span class="line">a=789</span><br><span class="line">echo $a</span><br><span class="line">[root@www ~]# echo $a</span><br><span class="line">789</span><br></pre></td></tr></table></figure></li><li>如果需要变量叠加的话，可以使用<code>a=&quot;$a&quot;789</code>或者<code>a=$&#123;a&#125;789</code><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a=123</span><br><span class="line">a=&quot;$a&quot;789</span><br><span class="line">echo $a</span><br><span class="line">[root@www ~]# echo $a</span><br><span class="line">123789</span><br></pre></td></tr></table></figure></li></ul><h3 id="查看变量"><a href="#查看变量" class="headerlink" title="查看变量"></a>查看变量</h3><p>使用<code>set</code>命令可以查看变量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set | grep a</span><br><span class="line">[root@www ~]# set | grep name</span><br><span class="line">name=archer</span><br></pre></td></tr></table></figure><h3 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h3><p>使用命令：<code>unset 变量名</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unset name</span><br><span class="line">[root@www ~]# echo $name #无法给出变量值</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/bash</span></span><br><span class="line">read -p &quot;please input ip:&quot; IP</span><br><span class="line">ping -c 1 $IP &amp;&gt; /dev/null &amp;&amp; echo $&#123;IP&#125;upupup || echo $&#123;IP&#125;down #查主句是否在线</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ping -c 1 只发送一个包</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&amp;&gt; /dev/null 把输出的正确信息和错误信息重定向到/dev/null，类似于垃圾桶</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&amp;&amp;和|| 是三目运算符，&amp;&amp;前命令执行成功后执行&amp;&amp;后的命令，没成功就执行||后的命令</span></span><br></pre></td></tr></table></figure><h3 id="交互式定义变量"><a href="#交互式定义变量" class="headerlink" title="交互式定义变量"></a>交互式定义变量</h3><ul><li><code>read</code>从键盘读入变量值，<code>read 变量名</code></li><li><code>read -p &quot;请输入变量值：&quot; ppp</code>，<code>-p</code>表示print，会打印后面那一段话<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www ~]# read -p &quot;请输入变量值：&quot; ppp</span><br><span class="line">请输入变量值：258</span><br><span class="line">[root@www ~]# echo $ppp</span><br><span class="line">258</span><br></pre></td></tr></table></figure></li></ul><h3 id="注意三种引号"><a href="#注意三种引号" class="headerlink" title="注意三种引号"></a>注意三种引号</h3><ul><li><code>&quot;&quot;</code>弱引用：里面只会对一些变量起作用，如果有特殊符号，会把特殊符号的效果执行</li><li><code>&#39;&#39;</code>强引用：取消特殊符号的效果，单引号里面是啥就是啥</li><li><code>``</code>优先执行：引号里面必须为命令，会把引号里面的命令执行，把执行后的结果保存<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www ~]# a=123</span><br><span class="line">[root@www ~]# a=&quot;$123&quot;145</span><br><span class="line">[root@www ~]# echo $a</span><br><span class="line">23145</span><br><span class="line"></span><br><span class="line">[root@www ~]# a=123</span><br><span class="line">[root@www ~]# a=&#x27;$123&#x27;145</span><br><span class="line">[root@www ~]# echo $a</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">123145</span></span><br><span class="line"></span><br><span class="line">[root@www ~]# a=`ls /home`</span><br><span class="line">[root@www ~]# echo $a</span><br><span class="line">uuuu uuuuu www</span><br></pre></td></tr></table></figure></li></ul><h2 id="整数运算"><a href="#整数运算" class="headerlink" title="整数运算"></a>整数运算</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>使用<code>expr</code>命令，<code>expr 1 + 2</code> 或者 <code>expr $num1 + $num2</code>，可以使用<code>+</code>加，<code>-</code>减，<code>\*</code>乘，<code>/</code>除，<code>%</code>取余，注意由于<code>*</code>在shell中表示任意字符，因此需要用<code>\</code>进行转义。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">num1=1</span><br><span class="line">num2=2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##加法运算</span></span></span><br><span class="line">[root@www ~]# expr $num1 + $num2</span><br><span class="line">3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##减法</span></span></span><br><span class="line">[root@www ~]# expr $num1 - $num2</span><br><span class="line">-1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##乘法</span></span></span><br><span class="line">[root@www ~]# expr $num1 \* $num2</span><br><span class="line">2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##除法</span></span></span><br><span class="line">[root@www ~]# expr $num1 /  $num2</span><br><span class="line">0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##取余</span></span></span><br><span class="line">[root@www ~]# expr $num1 %  $num2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>使用<code>$(())</code>命令，<code>$(($num1 + $num2))</code>，<code>$((num1 + num2))</code>，可以按照正常的四则运算进行计算</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">num1=1</span><br><span class="line">num2=2</span><br><span class="line">echo $(($num1 + $num2))</span><br><span class="line">[root@www ~]# echo $(($num1 + $num2))</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">[root@www ~]# echo $((num1 + num2)) #可以不用$取值</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">[root@www ~]# echo $((5-3*2)) #这种方法*不用转义</span><br><span class="line">-1</span><br><span class="line"></span><br><span class="line">[root@www ~]# echo $((3**2)) #可以使用**进行乘方计算</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h3 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h3><p>使用<code>$[]</code>命令，<code>$[5+2]</code>，<code>$[$num1 + $num2]</code>，<code>$[num1 * num2]</code>，可以按照正常的四则运算进行计算</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">num1=1</span><br><span class="line">num2=2</span><br><span class="line">[root@www ~]# echo $[5+2]</span><br><span class="line">7</span><br><span class="line"></span><br><span class="line">[root@www ~]# echo $[$num1 + $num2]</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">[root@www ~]# echo $[num1 * num2] #这种方法*不用转义，#可以不用$取值</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">[root@www ~]# echo $[3**2] #可以使用**进行乘方计算</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h3 id="方法4"><a href="#方法4" class="headerlink" title="方法4"></a>方法4</h3><p>使用<code>let</code>命令，<code>let sum=2+3;echo $sum</code>，<code>let sum++;echo $sum</code>，可以按照正常的四则运算进行计算，和C语言类似，可以使用<code>++</code>，<code>--</code>等语法</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www ~]# let sum=2+3;echo $sum</span><br><span class="line">5</span><br><span class="line">[root@www ~]# let sum++;echo $sum #C语言的语法</span><br><span class="line">6</span><br><span class="line"></span><br><span class="line">num1=1</span><br><span class="line">num2=2</span><br><span class="line">[root@www ~]# let sum=$num1+$num2;echo $sum</span><br><span class="line">3</span><br><span class="line">[root@www ~]# let sum=num1+num2;echo $sum #可以不用$取值</span><br><span class="line">3</span><br><span class="line">[root@www ~]# let sum=num1*num2;echo $sum #这种方法*不用转义</span><br><span class="line">2</span><br><span class="line">[root@www ~]# let sum=num1**num2;echo $sum #可以使用乘方</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="小数运算"><a href="#小数运算" class="headerlink" title="小数运算"></a>小数运算</h2><p>shell执行小数的运算需要用到<code>bc</code>，用法<code>&quot;scale=保留小数的位数;6/4&quot;|bc</code>，<code>&quot;scale=2;6/4&quot;|bc</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install bc</span><br><span class="line">[root@www ~]# echo &quot;scale=2;6/4&quot;|bc</span><br><span class="line">1.50</span><br><span class="line"></span><br><span class="line">[root@www ~]# echo &quot;2^4&quot;|bc</span><br><span class="line">16</span><br><span class="line"></span><br><span class="line">[root@www ~]# echo &quot;scale=9;10/3&quot;|bc</span><br><span class="line">3.333333333</span><br></pre></td></tr></table></figure><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>环境变量可以参考：<a href="/2024/04/13/Centos%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/" title="Centos中的环境变量">Centos中的环境变量</a></p><h2 id="位置变量"><a href="#位置变量" class="headerlink" title="位置变量"></a>位置变量</h2><ol><li>由系统定义，每个程序都会有位置变量，位置变量语法：<code>$0(命令名)</code>，<code>$1~$9(位置0~位置9)</code>，<code>$9</code>以后有特殊定义</li><li>示例<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/bash</span></span><br><span class="line">name=$0</span><br><span class="line">number1=$1</span><br><span class="line">number2=$2</span><br><span class="line">echo -n &quot;平均值为：&quot; #-n表示不换行</span><br><span class="line">echo &quot;scale=2;($number1+$number2)/2&quot; | bc</span><br><span class="line">echo $name</span><br><span class="line"></span><br><span class="line">[root@www ~]# sh ggg.sh 1 2</span><br><span class="line">平均值为：1.50</span><br><span class="line">ggg.sh</span><br></pre></td></tr></table></figure></li></ol><h2 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h2><ol><li><code>$0</code>：脚本&#x2F;程序名字</li><li><code>$*</code>：所有的参数</li><li><code>$#</code>：参数的个数</li><li><code>$?</code>：上一个程序的返回值，(0是成功，非0失败)</li><li><code>$$</code>：程序的PID<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ggg.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/bash</span></span><br><span class="line">number1=$1</span><br><span class="line">number2=$2</span><br><span class="line">echo &quot;程序名字:&quot; $0</span><br><span class="line">echo &quot;所有参数:&quot; $*</span><br><span class="line">echo &quot;程序参数个数:&quot; $#</span><br><span class="line">echo &quot;程序的PID:&quot; $$</span><br><span class="line">[root@www ~]# sh ggg.sh 1 2</span><br><span class="line">程序名字: ggg.sh</span><br><span class="line">所有参数: 1 2</span><br><span class="line">程序参数个数: 2</span><br><span class="line">程序的PID: 2009</span><br><span class="line"></span><br><span class="line">[root@www ~]# echo $? #表明上一个程序执行成功</span><br><span class="line">0</span><br></pre></td></tr></table></figure></li></ol><h2 id="变量的示例"><a href="#变量的示例" class="headerlink" title="变量的示例"></a>变量的示例</h2><ol><li>脚本创建用户名和密码，<code>user.sh</code><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim user.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/bash</span></span><br><span class="line">useradd $1</span><br><span class="line">echo &quot;$2&quot; | passwd --stdin &quot;$1&quot; &amp;&gt; /dev/null #--stdin 表示标准输入输出，说明不管后面出现什么都输入$2的内容，因为输入密码要输入两次</span><br><span class="line">echo &quot;$1&quot; 创建成功，密码是：&quot;$2&quot;</span><br></pre></td></tr></table></figure></li><li>脚本配置本地<code>yum</code>源，<code>yum.sh</code><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim yum.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/bash</span></span><br><span class="line">mount /dev/cdrom /mnt &amp;&gt; /dev/null</span><br><span class="line">cp -r /etc/yum.repos.d /etc/yum.repos.d_back</span><br><span class="line">rm -rf /etc/yum.repos.d/*</span><br><span class="line">cat &lt;&lt;EOF &gt;/etc/yum.repos.d/yum.repo</span><br><span class="line">[local]</span><br><span class="line">name=localyum</span><br><span class="line">baseurl=file:///mnt/AppStream/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">EOF</span><br><span class="line">yum repolist all</span><br></pre></td></tr></table></figure></li></ol><h1 id="shell的判断语句"><a href="#shell的判断语句" class="headerlink" title="shell的判断语句"></a>shell的判断语句</h1><h2 id="shell的条件测试"><a href="#shell的条件测试" class="headerlink" title="shell的条件测试"></a>shell的条件测试</h2><h3 id="数值比较"><a href="#数值比较" class="headerlink" title="数值比较"></a>数值比较</h3><ul><li>语法：<br><code>[ $num1 operation $num2 ]</code>，注意<code>[]</code>作为一个语法规则，不能和其他字符连在一起，<strong>必须要打空格</strong>，执行结果保存在<code>$?</code>中，为<code>0</code>表示运算为真，<code>1</code>表示运算为假。<table><thead><tr><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>[ $num1 -gt $num2 ]</code></td><td align="center">大于</td></tr><tr><td align="center"><code>[ $num1 -lt $num2 ]</code></td><td align="center">小于</td></tr><tr><td align="center"><code>[ $num1 -eq $num2 ]</code></td><td align="center">等于</td></tr><tr><td align="center"><code>[ $num1 -ne $num2 ]</code></td><td align="center">不等于</td></tr><tr><td align="center"><code>[ $num1 -ge $num2 ]</code></td><td align="center">大于等于</td></tr><tr><td align="center"><code>[ $num1 -le $num2 ]</code></td><td align="center">小于等于</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">num1=20</span><br><span class="line">num2=10</span><br><span class="line">[root@www ~]# [ $num1 -gt $num2 ];echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# [ $num1 -lt $num2 ];echo $?</span><br><span class="line">1</span><br><span class="line">[root@www ~]# [ $num1 -eq $num2 ];echo $?</span><br><span class="line">1</span><br><span class="line">[root@www ~]# [ $num1 -ne $num2 ];echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# [ $num1 -ge $num2 ];echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# [ $num1 -le $num2 ];echo $?</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li></ul><h3 id="文件测试"><a href="#文件测试" class="headerlink" title="文件测试"></a>文件测试</h3><ul><li>语法：<code>[ 操作符 文件/目录 ]</code>，注意<code>[]</code>作为一个语法规则，不能和其他字符连在一起，<strong>必须要打空格</strong>，执行结果保存在<code>$?</code>中，为<code>0</code>表示运算为真，<code>1</code>表示运算为假，不止这些，有很多。<table><thead><tr><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>[ -f filename ]</code></td><td align="center">当filename存在时返回真</td></tr><tr><td align="center"><code>[ -b filename ]</code></td><td align="center">当filename存在且为块文件时返回真</td></tr><tr><td align="center"><code>[ -d pathname ]</code></td><td align="center">当pathname存在且为文件夹时返回真</td></tr><tr><td align="center"><code>[ -h filename ]</code></td><td align="center">当filename存在且为符号链接文件时返回真</td></tr><tr><td align="center"><code>[ -L filename ]</code></td><td align="center">当filename存在且为符号链接文件时返回真</td></tr><tr><td align="center"><code>[ -c filename ]</code></td><td align="center">当filename存在且为字符文件时返回真</td></tr><tr><td align="center"><code>[ -e pathname ]</code></td><td align="center">当pathname指定的文件或路径存在时返回真</td></tr><tr><td align="center"><code>[ -u pathname ]</code></td><td align="center">当pathname指定的文件或路径存在，并设置了SUID位时返回真</td></tr><tr><td align="center"><code>[ -g pathname ]</code></td><td align="center">当pathname指定的文件或路径存在，并设置了SGID位时返回真</td></tr><tr><td align="center"><code>[ -k pathname ]</code></td><td align="center">当pathname指定的文件或路径存在，并设置了“粘滞”位时返回真</td></tr><tr><td align="center"><code>[ -p filename ]</code></td><td align="center">当filename指定的文件存在并且文件类型是管道时返回真</td></tr><tr><td align="center"><code>[ -r pathname ]</code></td><td align="center">当pathname指定的文件或路径存在，并且可读时返回真，对于当前用户而言</td></tr><tr><td align="center"><code>[ -s filename ]</code></td><td align="center">当filename指定的文件并且文件大小大于0时返回真</td></tr><tr><td align="center"><code>[ -S filename ]</code></td><td align="center">当filename指定的文件存在并且是Socket时返回真</td></tr><tr><td align="center"><code>[ -w pathname ]</code></td><td align="center">当pathname指定的文件或路径存在，并且可写时返回真，对于当前用户而言</td></tr><tr><td align="center"><code>[ -x pathname ]</code></td><td align="center">当pathname指定的文件或路径存在，并且可执行时返回真，对于当前用户而言</td></tr><tr><td align="center"><code>[ -O pathname ]</code></td><td align="center">当pathname指定的文件或路径存在，并且属主是当前用户时为真</td></tr><tr><td align="center"><code>[ -G pathname ]</code></td><td align="center">当pathname指定的文件或路径存在，并且属组是当前用户的组时为真</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www ~]# [ -f file1.sh ];echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# [ -f file2.sh ];echo $?</span><br><span class="line">1</span><br><span class="line">[root@www ~]# [ -b /dev/sda ]; echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# [ -b /root/file1 ]; echo $?</span><br><span class="line">1</span><br><span class="line">[root@www ~]# [ -d /root/ ]; echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# [ -d /root/file1.sh ]; echo $?</span><br><span class="line">1</span><br><span class="line">[root@www ~]# [ -h /bin ]; echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# [ -h /root/file1.sh ]; echo $?</span><br><span class="line">1</span><br><span class="line">[root@www ~]# [ -L /bin ]; echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# [ -c /dev/sg0 ];echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# [ -e /root ];echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# chmod u+s bash.sh;[ -u /root/bash.sh ];echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# chmod g+s bash.sh;[ -g /root/bash.sh ];echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# chmod o+t bash.sh;[ -k /root/bash.sh ];echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# [ -p /run/systemd/initctl/fifo ];echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# [ -r /root/file1.sh ];echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# [ -s /root/file1.sh ];echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# [ -S /run/lvm/lvmpolld.socket ];echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# [ -w /root/file1.sh ];echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# [ -x /root/file1.sh ];echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# [ -O /root/file1.sh ];echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# [ -G /root/file1.sh ];echo $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><ul><li>语法：<code>[ string1 operation string2 ]</code>，注意<code>[]</code>作为一个语法规则，不能和其他字符连在一起，<strong>必须要打空格</strong>，执行结果保存在<code>$?</code>中，为<code>0</code>表示运算为真，<code>1</code>表示运算为假<table><thead><tr><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>[ $string1 = $string2 ]</code></td><td align="center">字符串相等</td></tr><tr><td align="center"><code>[ $string1 != $string2 ]</code></td><td align="center">字符串不相等</td></tr><tr><td align="center"><code>[ -z $string ]</code></td><td align="center">判断字符串的个数是否为<code>0</code>，如果个数为<code>0</code>，返回真</td></tr><tr><td align="center"><code>[ -n $string ]</code></td><td align="center">判断字符串的个数是否为<code>0</code>，如果个数不为<code>0</code>，返回真</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www ~]# [ &quot;yes&quot; = &quot;yes&quot; ];echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# [ &quot;yes&quot; != &quot;yes&quot; ];echo $?</span><br><span class="line">1</span><br><span class="line">[root@www ~]# string1=yes</span><br><span class="line">[root@www ~]# string2=yes</span><br><span class="line">[root@www ~]# [ $string1 = $string2 ];echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# [ $string1 != $string2 ];echo $?</span><br><span class="line">1</span><br><span class="line">[root@www ~]# string=&quot;&quot;;[ -z $string ];echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# string=&quot;DDD&quot;;[ -n $string ];echo $?</span><br><span class="line">0</span><br><span class="line">[root@www ~]# num=$&#123;#string&#125;;echo $num # $&#123;#string&#125;可以统计字符串的长度。</span><br><span class="line">3</span><br></pre></td></tr></table></figure></li></ul><h3 id="多条件测试"><a href="#多条件测试" class="headerlink" title="多条件测试"></a>多条件测试</h3><ul><li>语法：如下，注意<code>[]</code>作为一个语法规则，不能和其他字符连在一起，<strong>必须要打空格</strong>，执行结果保存在<code>$?</code>中，为<code>0</code>表示运算为真，<code>1</code>表示运算为假，<code>and</code>有两种写法：<code>&amp;&amp;</code>, <code>-a</code>。<code>or</code>也有两种写法：<code>||</code>, <code>-o</code><table><thead><tr><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>[ 条件1 -a 条件2 ]</code></td><td align="center">两边都为真才为真，否则为假</td></tr><tr><td align="center"><code>[[ 条件1 &amp;&amp; 条件2 ]]</code></td><td align="center">两边都为真才为真，否则为假</td></tr><tr><td align="center"><code>[ 条件1 ] &amp;&amp; [ 条件2 ]</code></td><td align="center">两边都为真才为真，否则为假</td></tr><tr><td align="center"><code>[ 条件1 -o 条件2 ]</code></td><td align="center">一边为真就为真，否则为假</td></tr><tr><td align="center"><code>[[ 条件1 || 条件2 ]]</code></td><td align="center">一边为真就为真，否则为假</td></tr><tr><td align="center"><code>[ 条件1 ] || [ 条件2 ]</code></td><td align="center">一边为真就为真，否则为假</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos设置开机自动启动</title>
      <link href="/2024/04/14/Centos%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8/"/>
      <url>/2024/04/14/Centos%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Centos设置开机自动启动"><a href="#Centos设置开机自动启动" class="headerlink" title="Centos设置开机自动启动"></a>Centos设置开机自动启动</h1><h2 id="利用systemd服务实现开机自动启动"><a href="#利用systemd服务实现开机自动启动" class="headerlink" title="利用systemd服务实现开机自动启动"></a>利用systemd服务实现开机自动启动</h2><ol><li>创建配置文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/systemd/system/hello.service</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">### 文件内容</span></span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Hello</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/python /root/hello.py</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li>创建 python 脚本文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /root/hello.py</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">### 脚本内容</span></span></span><br><span class="line">import logging</span><br><span class="line">import time</span><br><span class="line">logging.basicConfig(format=&#x27;Date-Time : %(asctime)s : Line No. : %(lineno)d - %(message)s&#x27;, level = logging.DEBUG)</span><br><span class="line">while True:</span><br><span class="line">logging.debug(&quot;A Debug logging Message&quot;)</span><br><span class="line">time.sleep(10)</span><br></pre></td></tr></table></figure></li><li>启动服务，并设置开机自启<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload # 编写后需要重新加载新的配置文件</span><br><span class="line">systemctl start hello.service #启动服务</span><br><span class="line">systemctl enable hello.service #设置开机自动启动</span><br><span class="line">systemctl status hello.service #查看状态</span><br><span class="line"></span><br><span class="line">[root@www ~]# systemctl status hello.service -l</span><br><span class="line">● hello.service - Hello</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/hello.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sun 2024-04-14 11:27:37 CST; 2min 17s ago</span><br><span class="line"> Main PID: 8128 (python)</span><br><span class="line">   CGroup: /system.slice/hello.service</span><br><span class="line">           └─8128 /usr/bin/python /root/hello.py</span><br><span class="line"></span><br><span class="line">Apr 14 11:28:17 www.a.org python[8128]: Date-Time : 2024-04-14 11:28:17,540 : Line No. : 5 - A Debug logging Message</span><br><span class="line">Apr 14 11:28:27 www.a.org python[8128]: Date-Time : 2024-04-14 11:28:27,549 : Line No. : 5 - A Debug logging Message</span><br><span class="line">Apr 14 11:28:37 www.a.org python[8128]: Date-Time : 2024-04-14 11:28:37,580 : Line No. : 5 - A Debug logging Message</span><br><span class="line">Apr 14 11:28:47 www.a.org python[8128]: Date-Time : 2024-04-14 11:28:47,612 : Line No. : 5 - A Debug logging Message</span><br><span class="line">Apr 14 11:28:57 www.a.org python[8128]: Date-Time : 2024-04-14 11:28:57,619 : Line No. : 5 - A Debug logging Message</span><br><span class="line">Apr 14 11:29:07 www.a.org python[8128]: Date-Time : 2024-04-14 11:29:07,638 : Line No. : 5 - A Debug logging Message</span><br><span class="line">Apr 14 11:29:17 www.a.org python[8128]: Date-Time : 2024-04-14 11:29:17,642 : Line No. : 5 - A Debug logging Message</span><br><span class="line">Apr 14 11:29:27 www.a.org python[8128]: Date-Time : 2024-04-14 11:29:27,701 : Line No. : 5 - A Debug logging Message</span><br><span class="line">Apr 14 11:29:37 www.a.org python[8128]: Date-Time : 2024-04-14 11:29:37,728 : Line No. : 5 - A Debug logging Message</span><br><span class="line">Apr 14 11:29:47 www.a.org python[8128]: Date-Time : 2024-04-14 11:29:47,737 : Line No. : 5 - A Debug logging Message</span><br><span class="line"></span><br><span class="line">systemctl restart hello #重启服务</span><br><span class="line">ps aux | grep hello #查看进程</span><br><span class="line">[root@www ~]# ps aux | grep hello</span><br><span class="line">root      8347  0.0  0.2 138728  5404 ?        Ss   11:31   0:00 /usr/bin/python /root/hello.py</span><br><span class="line">root      8373  0.0  0.0 112812   976 pts/0    S+   11:31   0:00 grep --color=auto hello</span><br><span class="line"></span><br><span class="line">systemctl stop hello #停止服务</span><br></pre></td></tr></table></figure></li></ol><h2 id="利用rc-local文件实现开机自启"><a href="#利用rc-local文件实现开机自启" class="headerlink" title="利用rc.local文件实现开机自启"></a>利用rc.local文件实现开机自启</h2><ol><li>添加启动命令<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/rc.d/rc.local</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">/bin/echo ddd &gt; /root/ddd.txt</span><br></pre></td></tr></table></figure></li><li>为rc.local添加执行权限<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure></li><li>重启计算机，相应的程序就会执行了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux的Syetemd服务</title>
      <link href="/2024/04/13/Linux%E7%9A%84Syetemd%E6%9C%8D%E5%8A%A1/"/>
      <url>/2024/04/13/Linux%E7%9A%84Syetemd%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在Linux操作系统中，系统会首先启动<code>init daemon (pid = 1)</code>做为第一个进程，其以守护进程的形式在系统中运行，直到系统关闭。守护进程一种在后台执行，而不由用户直接交互控制的程序。<code>init daemon</code>可以作为其他所有进程的父进程，来管理所有其他进程的启动。</p><p>在<code>Centos7</code>之前，是通过<code>Init</code>架构（又被称为System V Init或SysVinit）来实现<code>init daemon</code>如<code>Centos6</code>，而现在<code>Centos</code>系统一般都是以<code>Systemd</code>架构来实现<code>init daemon</code>。我们可以通过<code>pstree -p</code>命令来查看进程树。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install psmisc</span><br><span class="line">pstree -p</span><br><span class="line">[root@www ~]# pstree -p</span><br><span class="line">systemd(1)─┬─NetworkManager(696)─┬─&#123;NetworkManager&#125;(714)</span><br><span class="line">           │                     └─&#123;NetworkManager&#125;(716)</span><br><span class="line">           ├─agetty(713)</span><br><span class="line">           ├─atd(703)</span><br><span class="line">           ├─auditd(665)───&#123;auditd&#125;(666)</span><br><span class="line">           ├─crond(705)</span><br><span class="line">           ├─dbus-daemon(691)</span><br><span class="line">           ├─httpd(934)─┬─httpd(1476)</span><br><span class="line">           │            ├─httpd(1477)</span><br><span class="line">           │            ├─httpd(1478)</span><br><span class="line">           │            ├─httpd(1479)</span><br><span class="line">           │            └─httpd(1480)</span><br><span class="line">           ├─irqbalance(689)</span><br><span class="line">           ├─lvmetad(539)</span><br><span class="line">           ├─master(1248)─┬─pickup(1279)</span><br><span class="line">           │              └─qmgr(1280)</span><br><span class="line">           ├─mysqld_safe(1084)───mysqld(1291)─┬─&#123;mysqld&#125;(1457)</span><br><span class="line">           │                                  ├─&#123;mysqld&#125;(1458)</span><br><span class="line">           │                                  ├─&#123;mysqld&#125;(1459)</span><br><span class="line">           │                                  ├─&#123;mysqld&#125;(1460)</span><br><span class="line">           │                                  ├─&#123;mysqld&#125;(1461)</span><br><span class="line">           │                                  ├─&#123;mysqld&#125;(1462)</span><br><span class="line">           │                                  ├─&#123;mysqld&#125;(1463)</span><br><span class="line">           │                                  ├─&#123;mysqld&#125;(1464)</span><br><span class="line">           │                                  ├─&#123;mysqld&#125;(1465)</span><br><span class="line">           │                                  ├─&#123;mysqld&#125;(1466)</span><br><span class="line">           │                                  ├─&#123;mysqld&#125;(1468)</span><br><span class="line">           │                                  ├─&#123;mysqld&#125;(1469)</span><br><span class="line">           │                                  ├─&#123;mysqld&#125;(1470)</span><br><span class="line">           │                                  ├─&#123;mysqld&#125;(1471)</span><br><span class="line">           │                                  ├─&#123;mysqld&#125;(1472)</span><br><span class="line">           │                                  ├─&#123;mysqld&#125;(1473)</span><br><span class="line">           │                                  ├─&#123;mysqld&#125;(1637)</span><br><span class="line">           │                                  └─&#123;mysqld&#125;(1638)</span><br><span class="line">           ├─polkitd(688)─┬─&#123;polkitd&#125;(695)</span><br><span class="line">           │              ├─&#123;polkitd&#125;(699)</span><br><span class="line">           │              ├─&#123;polkitd&#125;(702)</span><br><span class="line">           │              ├─&#123;polkitd&#125;(706)</span><br><span class="line">           │              ├─&#123;polkitd&#125;(707)</span><br><span class="line">           │              └─&#123;polkitd&#125;(708)</span><br><span class="line">           ├─rsyslogd(938)─┬─&#123;rsyslogd&#125;(1019)</span><br><span class="line">           │               └─&#123;rsyslogd&#125;(1074)</span><br><span class="line">           ├─sshd(933)───sshd(1647)───bash(1650)───pstree(1691)</span><br><span class="line">           ├─systemd-journal(513)</span><br><span class="line">           ├─systemd-logind(698)</span><br><span class="line">           ├─systemd-udevd(547)</span><br><span class="line">           ├─tuned(935)─┬─&#123;tuned&#125;(1625)</span><br><span class="line">           │            ├─&#123;tuned&#125;(1626)</span><br><span class="line">           │            ├─&#123;tuned&#125;(1628)</span><br><span class="line">           │            └─&#123;tuned&#125;(1636)</span><br><span class="line">           └─vsftpd(940)</span><br></pre></td></tr></table></figure><p>我使用的是<code>centos7.9</code>，因此<code>systemd(1)</code>是第一个进程，作为所有其他进程的父进程。因为最近在学习中看到了相关的命令，所以在这里学习记录一下。</p><h1 id="Init架构"><a href="#Init架构" class="headerlink" title="Init架构"></a>Init架构</h1><h2 id="系统的运行级别"><a href="#系统的运行级别" class="headerlink" title="系统的运行级别"></a>系统的运行级别</h2><p>在<code>Init</code>架构中存在<code>7</code>个运行级别：</p><table><thead><tr><th align="center">级别</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>0</code></td><td align="center">Shutdown（关机）</td></tr><tr><td align="center"><code>1</code></td><td align="center">Single User Mode（单用户模式）</td></tr><tr><td align="center"><code>2</code></td><td align="center">Multiuser mode without networking（断网多用户模式）</td></tr><tr><td align="center"><code>3</code></td><td align="center">Multiuser mode with networking（联网多用户模式）默认</td></tr><tr><td align="center"><code>4</code></td><td align="center">Unused（未使用）</td></tr><tr><td align="center"><code>5</code></td><td align="center">Multiuser mode with networking and GUI（图形化界面的联网多用户模式）</td></tr><tr><td align="center"><code>6</code></td><td align="center">Reboot（重启）</td></tr></tbody></table><p>配置文件<code>/etc/inittab</code>决定以哪种方式运行系统，它是系统在启动<code>init daemon</code>时读取的第一个文件，默认是以<code>3</code>来启动。当然对于<code>Centos7</code>来说，这个文件已经没有用了，文件内容：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www ~]# cat /etc/inittab</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">inittab is no longer used when using systemd.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># ADDING CONFIGURATION HERE WILL HAVE NO EFFECT ON YOUR SYSTEM.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Ctrl-Alt-Delete is handled by /usr/lib/systemd/system/ctrl-alt-del.target</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># systemd uses &#x27;targets&#x27; instead of runlevels. By default, there are two main targets:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># multi-user.target: analogous to runlevel 3</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">graphical.target: analogous to runlevel 5</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># To view current default target, run:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl get-default</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># To set a default target, run:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl set-default TARGET.target</span></span><br></pre></td></tr></table></figure><h2 id="Init架构的服务"><a href="#Init架构的服务" class="headerlink" title="Init架构的服务"></a>Init架构的服务</h2><p>在<code>Centos6</code>，可以通过<code>service</code>命令来启动相应的服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><p>在<code>/etc/rc.d/init.d</code>存放着能够通过<code>service</code>命令管理的服务，通过按照相应的规则编写好对应的脚本，放到<code>/etc/rc.d/init.d</code>里面，就可以通过<code>service</code>命令来管理。在<code>/etc/rc.d/</code>文件夹里面，还存在<code>/etc/rc.d/rc&#123;0..6&#125;.d</code>文件夹，其中数字就是对应于<code>Init</code>架构中的<code>7</code>个级别，当系统以相应的级别开机或关机的时候，就会直接启动对应那个级别的文件夹里面的脚本。在<code>/etc</code>下存在软链接指向这几个目录：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www etc]# ll init.d rc&#123;0..6&#125;.d rc.local -d</span><br><span class="line">lrwxrwxrwx. 1 root root 11 Apr  9 13:33 init.d -&gt; rc.d/init.d</span><br><span class="line">lrwxrwxrwx. 1 root root 10 Apr  9 13:33 rc0.d -&gt; rc.d/rc0.d</span><br><span class="line">lrwxrwxrwx. 1 root root 10 Apr  9 13:33 rc1.d -&gt; rc.d/rc1.d</span><br><span class="line">lrwxrwxrwx. 1 root root 10 Apr  9 13:33 rc2.d -&gt; rc.d/rc2.d</span><br><span class="line">lrwxrwxrwx. 1 root root 10 Apr  9 13:33 rc3.d -&gt; rc.d/rc3.d</span><br><span class="line">lrwxrwxrwx. 1 root root 10 Apr  9 13:33 rc4.d -&gt; rc.d/rc4.d</span><br><span class="line">lrwxrwxrwx. 1 root root 10 Apr  9 13:33 rc5.d -&gt; rc.d/rc5.d</span><br><span class="line">lrwxrwxrwx. 1 root root 10 Apr  9 13:33 rc6.d -&gt; rc.d/rc6.d</span><br><span class="line">lrwxrwxrwx. 1 root root 13 Apr  9 13:34 rc.local -&gt; rc.d/rc.local</span><br></pre></td></tr></table></figure><p>我们以级别<code>3</code>为例，查看相应的文件：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www rc3.d]# pwd</span><br><span class="line">/etc/rc.d/rc3.d</span><br><span class="line">[root@www rc3.d]# ll</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx. 1 root root 20 Apr  9 13:34 K50netconsole -&gt; ../init.d/netconsole</span><br><span class="line">lrwxrwxrwx. 1 root root 17 Apr  9 13:34 S10network -&gt; ../init.d/network</span><br></pre></td></tr></table></figure><p>可以看到这里面的文件，其实<code>/etc/rc.d/init.d</code>中脚本的软链接，并且名字也有所不同，原因在于<code>Init</code>架构在执行相应的脚本时，是根据脚本的名字来执行的即：</p><ul><li>S：即Start，系统开机时执行</li><li>K：即Kill，系统关机时执行</li><li>数字：执行的顺序</li><li>最后才是脚本的名字<br>虽然自从<code>Centos7</code>后，就有<code>Systemd</code>架构来代替<code>Init</code>架构，但是在<code>Centos7</code>中依然兼容了<code>Init</code>架构。</li></ul><h2 id="Init架构的启动"><a href="#Init架构的启动" class="headerlink" title="Init架构的启动"></a>Init架构的启动</h2><p>当我们打开给Linux系统的电脑开机的时候，BIOS 会从非易失性存储器中加载，并执行上电自检，之后BIOS会检测系统资源，然后会查找硬盘的主引导记录（MBR），MBR会初始化引导程序如GRBU，GRUB加载内核，内核会执行<code>/sbin/init</code>程序，其就会成为<code>Pid = 1</code>的所有Linux进程的父进程，然后<code>/sbin/init</code>会读取<code>/etc/inittab</code>文件，确定操作系统的运行级别，从文件<code>/etc/fstab</code>里查找分区表信息进行相应的挂载，然后按照运行级别执行<code>/etc/rc.d/rcX.d</code>里面的脚本，按顺序一个一个执行，每次只启动一个服务。关机过程差不多是相反，首先<code>Init</code>停止所有服务，最后阶段会卸载文件系统。</p><h1 id="Systemd架构"><a href="#Systemd架构" class="headerlink" title="Systemd架构"></a>Systemd架构</h1><p>一直以来，<code>Centos</code>都是采用<code>Init</code>架构，但是<code>Init</code>架构启动慢，需要串行启动，即进程是一个接着一个启动，只有当前一个进程启动成功，才会去启动下一个进程，同时启动进程的脚本比较复杂，因此<code>Centos7</code>之后，<code>Systemd</code>架构取代了<code>Init</code>架构，其可以做到并行启动，减少系统引导时间和计算开销。同时其为系统的启动和管理提供了完整的解决方案，如下图所示，<code>Systemd</code>架构及其复杂。<br><img src="1.png"></p><h2 id="Systemd-unit"><a href="#Systemd-unit" class="headerlink" title="Systemd unit"></a>Systemd unit</h2><p><code>Systemd</code>可以管理系统的所有资源，并把这些资源统一称为<code>unit</code>。对应的<code>unit</code>有12种。</p><h2 id="unit-分类"><a href="#unit-分类" class="headerlink" title="unit 分类"></a>unit 分类</h2><table><thead><tr><th align="center"><code>unit</code>类型</th><th align="center">文件后缀</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>Service</code></td><td align="center"><code>.service</code></td><td align="center">系统服务，包括启动，重启，关闭服务的相关指令</td></tr><tr><td align="center"><code>Target</code></td><td align="center"><code>.target</code></td><td align="center">定义了一组<code>unit</code>的集合，一般作为<code>unit</code>启动的同步点，某个<code>Target</code>启动成功对应着一组相关的<code>Service</code>启动成功</td></tr><tr><td align="center"><code>Automount</code></td><td align="center"><code>.automount</code></td><td align="center">系统引导时会进行自动挂载的挂载点</td></tr><tr><td align="center"><code>Mount</code></td><td align="center"><code>.mount</code></td><td align="center">由<code>systemd</code>管理的文件系统挂载点</td></tr><tr><td align="center"><code>Path</code></td><td align="center"><code>.path</code></td><td align="center">定义了一条用于基于路径激活服务的文件路径。例如，可以基于某一条文件路径的状态（是否存在等）来启动某个服务。</td></tr><tr><td align="center"><code>Scope</code></td><td align="center"><code>.scope</code></td><td align="center">定义了来自<code>systemd</code>总线接口的信息，通常用来管理额外的系统进程</td></tr><tr><td align="center"><code>Slice</code></td><td align="center"><code>.slice</code></td><td align="center">定义了资源限额，基于<code>Linux cgroup nodes</code>实现。</td></tr><tr><td align="center"><code>Snapshot</code></td><td align="center"><code>.snapshot</code></td><td align="center">当前的<code>systemd</code>状态，通常在对<code>systemd</code>做修改后回滚使用</td></tr><tr><td align="center"><code>Socket</code></td><td align="center"><code>.socket</code></td><td align="center">定义了进程间通信使用的<code>socket</code>，往往<code>socket</code>会与<code>service</code>相关联</td></tr><tr><td align="center"><code>Swap</code></td><td align="center"><code>.swap</code></td><td align="center">定义了系统中的交换空间</td></tr><tr><td align="center"><code>Timer</code></td><td align="center"><code>.timer</code></td><td align="center">定义了一个定时激活另一个单元的定时器</td></tr></tbody></table><h2 id="unit-的存放路径"><a href="#unit-的存放路径" class="headerlink" title="unit 的存放路径"></a>unit 的存放路径</h2><table><thead><tr><th align="center">路径</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>/etc/systemd/system</code></td><td align="center">由<code>systemctl enable</code>命令创建的<code>systemd unit</code>文件将存放在此处，实际上是指向<code>/usr/lib/systemd/system</code>的软链接。系统管理员自定义的<code>unit</code>也存放在该目录下。默认在这里读取文件</td></tr><tr><td align="center"><code>/run/systemd/system</code></td><td align="center">服务运行时产生的相关<code>unit</code>都存放在这个目录下</td></tr><tr><td align="center"><code>/usr/lib/systemd/system</code></td><td align="center">系统或第三方软件安装时添加的<code>unit</code>放在这个目录下</td></tr></tbody></table><h2 id="常用的unit"><a href="#常用的unit" class="headerlink" title="常用的unit"></a>常用的unit</h2><p>可以利用<code>man 5 systemd.unit类型</code>去查看帮助文档，如<code>man 5 systemd.slice</code>，里面包括怎么写配置文件。这里简单介绍一下常用的<code>unit</code>，包括<code>Service</code>和<code>Target</code>。</p><h3 id="Service-简单介绍"><a href="#Service-简单介绍" class="headerlink" title="Service 简单介绍"></a>Service 简单介绍</h3><p><code>Service</code>类型是最常用的<code>unit</code>，主要是用来启动像<code>httpd</code>和<code>sshd</code>这样的服务的配置文件，对应的文件名是<code>httpd.service</code>和<code>ssh.d.service</code>，可以使用<code>systemctl cat sshd.service</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www etc]# systemctl cat sshd.service</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/usr/lib/systemd/system/sshd.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=OpenSSH server daemon</span><br><span class="line">Documentation=man:sshd(8) man:sshd_config(5)</span><br><span class="line">After=network.target sshd-keygen.service</span><br><span class="line">Wants=sshd-keygen.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">EnvironmentFile=/etc/sysconfig/sshd</span><br><span class="line">ExecStart=/usr/sbin/sshd -D $OPTIONS</span><br><span class="line">ExecReload=/bin/kill -HUP $MAINPID</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=42s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>可以看到比较多字段，接下来我们简单了解一下：<br><code># /usr/lib/systemd/system/sshd.service</code>给出了对应的路径，一个<code>unit</code>包括三个字段<code>[Unit]</code>，<code>[Install]</code>和<code>[Unit类型]</code>，这里<code>Service</code>类型对应的就是<code>[Service]</code></p><ul><li><code>[Unit]</code>：定义了<code>unit</code>的基本信息，以及配置与其他<code>unit</code>的关系，表现为键值对的形式，其主要字段如下：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Description：简短描述</span><br><span class="line">Documentation：文档地址</span><br><span class="line">Requires：当前 unit 依赖的其他 unit，如果它们没有运行，当前 unit 会启动失败</span><br><span class="line">Wants：与当前 unit 配合的其他 unit，如果它们没有运行，当前 unit 不会启动失败</span><br><span class="line">BindsTo：与Requires类似，它指定的 unit 如果退出，会导致当前 unit 停止运行</span><br><span class="line">Before：如果该字段指定的 unit 也要启动，那么必须在当前 unit 之后启动</span><br><span class="line">After：如果该字段指定的 unit 也要启动，那么必须在当前 unit 之前启动</span><br><span class="line">Conflicts：这里指定的 unit 不能与当前 unit 同时运行</span><br><span class="line">Condition...：当前 unit 运行必须满足的条件，否则不会运行</span><br><span class="line">Assert...：当前 unit 运行必须满足的条件，否则会报启动失败</span><br></pre></td></tr></table></figure>对于<code>sshd.service</code>，<code>Description=OpenSSH server daemon</code>给出了简单描述，<code>Documentation=man:sshd(8) man:sshd_config(5)</code>给出了文档信息，<code>After=network.target sshd-keygen.service</code>表明如果<code>network.target</code>或<code>sshd-keygen.service</code>要启动，那么<code>sshd.service</code>需要在这两个之后启动。<code>Wants=sshd-keygen.service</code>表明<code>sshd.service</code>和<code>sshd-keygen.service</code>有弱依赖关系，即使<code>sshd-keygen.service</code>未启动，启动失败或者停止服务也不会影响<code>sshd.service</code>的运行。</li><li><code>[Service]</code>：定义了<code>unit</code>的服务配置：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Type：定义启动时的进程行为。它有以下几种值。</span><br><span class="line">Type=simple：默认值，执行ExecStart指定的命令，启动主进程</span><br><span class="line">Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出</span><br><span class="line">Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行</span><br><span class="line">Type=dbus：当前服务通过D-Bus启动</span><br><span class="line">Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行</span><br><span class="line">Type=idle：若有其他任务执行完毕，当前服务才会运行</span><br><span class="line">ExecStart：启动当前服务的命令</span><br><span class="line">ExecStartPre：启动当前服务之前执行的命令</span><br><span class="line">ExecStartPost：启动当前服务之后执行的命令</span><br><span class="line">ExecReload：重启当前服务时执行的命令</span><br><span class="line">ExecStop：停止当前服务时执行的命令</span><br><span class="line">ExecStopPost：停止当其服务之后执行的命令</span><br><span class="line">RestartSec：自动重启当前服务间隔的秒数</span><br><span class="line">Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog、no。no（默认值）：退出后不会重启，on-success：只有正常退出时（退出状态码为0），才会重启，on-failure：非正常退出时（退出状态码非0），包括被信号终止和超时，才会重启，on-abnormal：只有被信号终止和超时，才会重启，on-abort：只有在收到没有捕捉到的信号终止时，才会重启，on-watchdog：超时退出，才会重启，always：不管是什么退出原因，总是重启</span><br><span class="line">TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数</span><br><span class="line">Environment：指定环境变量</span><br><span class="line">EnvironmentFile：指定加载一个包含服务所需的环境变量列表的文件，文件中的每一行都是一个环境变量的定义</span><br><span class="line">KillMode：定义 Systemd 如何停止 sshd 服务。可以设置为：control-group（默认值）：当前控制组里面的所有子进程，都会被杀掉，process：只杀主进程，mixed：主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号，none：没有进程会被杀掉，只是执行服务的 stop 命令。</span><br></pre></td></tr></table></figure>对于<code>sshd.service</code>，<code>Type=notify</code>表明当前服务启动完毕，会通知<code>Systemd</code>，再继续往下执行，<code>EnvironmentFile=/etc/sysconfig/sshd</code>从配置文件<code>/etc/sysconfig/sshd</code>中获取环境变量，最重要的就是这个执行命令<code>ExecStart=/usr/sbin/sshd -D $OPTIONS</code>，重启当前服务时执行的命令为<code>ExecReload=/bin/kill -HUP $MAINPID</code>，<code>KillMode=process</code>表示只停止主进程，不停止任何<code>sshd</code>子进程，即子进程打开的 <code>SSH session</code>仍然保持连接。这个设置不太常见，但对<code>sshd</code>很重要，否则你停止服务的时候，会连自己打开的 <code>SSH session</code>一起杀掉。<code>Restart=on-failure</code>表明出现任何意外的失败都重启，<code>RestartSec=42s</code>表明在重启<code>sshd</code>服务之前要等待<code>42s</code>。</li><li><code>[Install]</code><br>用来定义如何启动，以及是否开机启动<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">WantedBy：它的值是一个或多个 Target，当前 unit 设置为开机启动时，软链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中，表示该服务所在的Target</span><br><span class="line">RequiredBy：它的值是一个或多个 Target，当前 unit 开机启动时，软链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中</span><br><span class="line">Alias：当前 unit 可用于启动的别名</span><br><span class="line">Also：当前 unit 激活（enable）时，会被同时激活的其他 unit</span><br></pre></td></tr></table></figure>对于<code>sshd.service</code>，<code>WantedBy=multi-user.target</code>表明它是属于<code>multi-user.target</code>的，这个很重要，它可以设置开机自动启动，当我们用<code>systemctl enable sshd</code>时会在<code>/etc/systemd/system/multi-user.target</code>目录创建软链接到<code>/usr/lib/systemd/system/sshd.service</code>，<code>Systemd</code>默认启动的<code>Target</code>是<code>default.target</code>，而<code>default.target</code>是<code>multi-user.target</code>或<code>graphical.target</code>的软链接，可以通过<code>systemctl get-default</code>查询到。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www etc]# systemctl get-default</span><br><span class="line">multi-user.target</span><br></pre></td></tr></table></figure>当使用命令时，不指定<code>unit</code>类型时，默认是<code>Service</code>类型，例如<code>systemctl status sshd</code>，查看服务状态<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www init.d]# systemctl status sshd</span><br><span class="line">● sshd.service - OpenSSH server daemon </span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Sat 2024-04-13 16:35:12 CST; 17h ago</span><br><span class="line">     Docs: man:sshd(8)</span><br><span class="line">           man:sshd_config(5)</span><br><span class="line"> Main PID: 933 (sshd)</span><br><span class="line">   CGroup: /system.slice/sshd.service</span><br><span class="line">           └─933 /usr/sbin/sshd -D</span><br><span class="line"></span><br><span class="line">Apr 13 16:35:12 www.a.org systemd[1]: Starting OpenSSH server daemon...</span><br><span class="line">Apr 13 16:35:12 www.a.org sshd[933]: Server listening on 0.0.0.0 port 22.</span><br><span class="line">Apr 13 16:35:12 www.a.org sshd[933]: Server listening on :: port 22.</span><br><span class="line">Apr 13 16:35:12 www.a.org systemd[1]: Started OpenSSH server daemon.</span><br><span class="line">Apr 13 16:35:27 www.a.org sshd[1647]: Accepted password for root from 172.16.34.145 port 2454 ssh2</span><br><span class="line">上面的输出含义：</span><br><span class="line">sshd.service行：服务的基本介绍</span><br><span class="line">Loaded行：配置文件的位置，是否设为开机启动，enabled表示开机自动启动，preset: enabled表示软件安装后默认开机自动启动。</span><br><span class="line">Active行：表示服务的运行状态为正在运行</span><br><span class="line">Docs：文档信息</span><br><span class="line">Main PID：主进程号</span><br><span class="line">CGroup块：应用的子进程</span><br><span class="line">日志块：最下面的带有时间的</span><br></pre></td></tr></table></figure></li></ul><h3 id="Target-简单介绍"><a href="#Target-简单介绍" class="headerlink" title="Target 简单介绍"></a>Target 简单介绍</h3><p><code>Target</code> 就是一个 <code>unit</code> 组，包含许多相关的 <code>unit</code> 。启动某个 <code>Target</code> 的时候，<code>Systemd</code> 就会启动里面所有的 <code>unit</code>。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www etc]# systemctl cat multi-user.target</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/usr/lib/systemd/system/multi-user.target</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> This file is part of systemd.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#  systemd is free software; you can redistribute it and/or modify it</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> under the terms of the GNU Lesser General Public License as published by</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> the Free Software Foundation; either version 2.1 of the License, or</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> (at your option) any later version.</span></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Multi-User System</span><br><span class="line">Documentation=man:systemd.special(7)</span><br><span class="line">Requires=basic.target</span><br><span class="line">Conflicts=rescue.service rescue.target</span><br><span class="line">After=basic.target rescue.service rescue.target</span><br><span class="line">AllowIsolate=yes</span><br></pre></td></tr></table></figure><p><code>Target</code>也有自己的配置：<br><code># /usr/lib/systemd/system/multi-user.target</code>对应的目录位置<br><code>[Unit]</code> 定义了<code>unit</code>的基本信息。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Description：基本描述</span><br><span class="line">Documentation：对应的文档</span><br><span class="line">Requires：当前 unit 依赖的其他 unit，如果它们没有运行，当前 unit 会启动失败</span><br><span class="line">Conflicts：这里指定的 unit 不能与当前 unit 同时运行</span><br><span class="line">After：如果该字段指定的 unit 也要启动，那么必须在当前 unit 之前启动</span><br><span class="line">AllowIsolate：是否允许使用systemctl isolate命令切换到multi-user.target</span><br></pre></td></tr></table></figure><p>对于<code>multi-user.target</code>，基本描述和文档分别为<code>Description=Multi-User System</code>和<code>Documentation=man:systemd.special(7)</code>，<code>Requires=basic.target</code>表明需要同<code>basic.target</code>一起运行，<code>Conflicts=rescue.service rescue.target</code>表明和<code>rescue.service rescue.target</code>冲突不能一起运行，<code>After=basic.target rescue.service rescue.target</code>表明如果<code>basic.target和rescue.service rescue.target</code>要启动，<code>multi-user.target</code>需要在他们启动之后启动，<code>AllowIsolate=yes</code>表明允许使用<code>systemctl isolate</code>命令切换到<code>multi-user.target</code><br>在前面介绍了<code>Init</code>架构的运行级别，在<code>Systemd</code>架构中也存在类似的概念，主要是通过<code>Target</code>来定义系统的运行模式，对应的关系如下：</p><table><thead><tr><th align="center"><code>Init</code>架构运行等级</th><th align="center"><code>Systemd</code>架构的<code>Target</code></th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>0</code></td><td align="center"><code>runlevel0.target -&gt; poweroff.target</code></td><td align="center">关机</td></tr><tr><td align="center"><code>1</code></td><td align="center"><code>runlevel1.target -&gt; rescue.target</code></td><td align="center">单用户模式</td></tr><tr><td align="center"><code>2</code></td><td align="center"><code>runlevel2.target -&gt; multi-user.target</code></td><td align="center">断网多用户模式由联网多用户模式取代</td></tr><tr><td align="center"><code>3</code></td><td align="center"><code>runlevel3.target -&gt; multi-user.target</code></td><td align="center">联网多用户模式（默认）</td></tr><tr><td align="center"><code>4</code></td><td align="center"><code>runlevel4.target -&gt; multi-user.target</code></td><td align="center">联网多用户模式</td></tr><tr><td align="center"><code>5</code></td><td align="center"><code>runlevel5.target -&gt; graphical.target</code></td><td align="center">联网多用户模式且带有图形化界面</td></tr><tr><td align="center"><code>6</code></td><td align="center"><code>runlevel6.target -&gt; reboot.target</code></td><td align="center">重启系统</td></tr><tr><td align="center"><code>emergency</code></td><td align="center"><code>emergency.target</code></td><td align="center">紧急恢复状态</td></tr><tr><td align="center"><code>Systemd</code>默认启动的<code>Target</code>是<code>default.target</code>，而<code>default.target</code>是<code>multi-user.target</code>或<code>graphical.target</code>的软链接，可以通过<code>systemctl get-default</code>查询到。</td><td align="center"></td><td align="center"></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www etc]# systemctl get-default</span><br><span class="line">multi-user.target</span><br></pre></td></tr></table></figure><h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><p><code>Systemd</code> 统一管理所有<code>Unit</code>的启动日志。我们可以只用<code>journalctl</code>一个命令，查看所有日志（内核日志和应用日志），其从<code>/var/log/messages</code>中获取日志信息，存放在<code>/run/log/journal/</code>下。配置文件是<code>/etc/systemd/journald.conf</code></p><h2 id="Systemd-的启动"><a href="#Systemd-的启动" class="headerlink" title="Systemd 的启动"></a>Systemd 的启动</h2><ol><li><p>当我们打开给Linux系统的电脑开机的时候，BIOS 会从非易失性存储器中加载，并执行上电自检，之后BIOS会检测系统资源，然后会查找硬盘的主引导记录（MBR），MBR会初始化引导程序如GRBU或者LILO。</p></li><li><p>MBR从GRBU或LILO引导程序读取相关信息并初始化内核。内核执行<code>Systemd</code>，之后的启动就交给<code>Systemd</code>了。<code>Systemd</code>使用<code>Target</code>来处理引导和服务管理过程。<code>Target</code>文件被用于分组不同的引导单元以及启动同步进程。</p></li><li><p><code>Systemd</code>执行的第一个<code>Target</code>是<code>default.target</code>，并递归的处理它的依赖关系，<code>default.target</code>实际上是指向<code>multi-user.target</code>或者<code>graphical.target</code>的软链接。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www ~]# systemctl cat default.target</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/usr/lib/systemd/system/multi-user.target</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> This file is part of systemd.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#  systemd is free software; you can redistribute it and/or modify it</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> under the terms of the GNU Lesser General Public License as published by</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> the Free Software Foundation; either version 2.1 of the License, or</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> (at your option) any later version.</span></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Multi-User System</span><br><span class="line">Documentation=man:systemd.special(7)</span><br><span class="line">Requires=basic.target</span><br><span class="line">Conflicts=rescue.service rescue.target</span><br><span class="line">After=basic.target rescue.service rescue.target</span><br><span class="line">AllowIsolate=yes</span><br></pre></td></tr></table></figure></li><li><p>根据依赖关系，需要先启动<code>sysinit.target，basic.target</code>来初始化系统。</p></li><li><p><code>multi-user.target</code>会启动<code>/etc/systemd/system/multi-user.target.wants</code>下的服务，为多用户支持设定系统环境。非root用户会在这个阶段的引导过程中启用。防火墙相关的服务也会在这个阶段启动。利用这一点可以使得一些服务开机自动启动</p></li><li><p><code>Systemd</code>是可以兼容<code>Init</code>架构中的<code>rc.local</code>配置的，通过<code>rc-local.service</code>来实现兼容的，<code>Systemd</code>在启动的很早就会判断<code>/etc/rc.local</code>是否存在并且是可执行的，如果满足条件，那么<code>Systemd</code>会调用<code>/usr/lib/systemd/system-generators/</code>下的程序，把<code>rc-local.service</code>服务加入到<code>default.target</code>中来。这样在后面的执行时就会触发<code>rc.local</code>的运行，利用这一点我们可以实现程序的开机自动启动。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#################################### 启动流程图 #######################################</span></span></span><br><span class="line">                             cryptsetup-pre.target veritysetup-pre.target</span><br><span class="line">                                                  |</span><br><span class="line">(various low-level                                v</span><br><span class="line"> API VFS mounts:             (various cryptsetup/veritysetup devices...)</span><br><span class="line"> mqueue, configfs,                                |    |</span><br><span class="line"> debugfs, ...)                                    v    |</span><br><span class="line"> |                                  cryptsetup.target  |</span><br><span class="line"> |  (various swap                                 |    |    remote-fs-pre.target</span><br><span class="line"> |   devices...)                                  |    |     |        |</span><br><span class="line"> |    |                                           |    |     |        v</span><br><span class="line"> |    v                       local-fs-pre.target |    |     |  (network file systems)</span><br><span class="line"> |  swap.target                       |           |    v     v                 |</span><br><span class="line"> |    |                               v           |  remote-cryptsetup.target  |</span><br><span class="line"> |    |  (various low-level  (various mounts and  |  remote-veritysetup.target |</span><br><span class="line"> |    |   services: udevd,    fsck services...)   |             |              |</span><br><span class="line"> |    |   tmpfiles, random            |           |             |    remote-fs.target</span><br><span class="line"> |    |   seed, sysctl, ...)          v           |             |              |</span><br><span class="line"> |    |      |                 local-fs.target    |             | _____________/</span><br><span class="line"> |    |      |                        |           |             |/</span><br><span class="line"> \____|______|_______________   ______|___________/             |</span><br><span class="line">                             \ /                                |</span><br><span class="line">                              v                                 |</span><br><span class="line">                       sysinit.target                           |</span><br><span class="line">                              |                                 |</span><br><span class="line">       ______________________/|\_____________________           |</span><br><span class="line">      /              |        |      |               \          |</span><br><span class="line">      |              |        |      |               |          |</span><br><span class="line">      v              v        |      v               |          |</span><br><span class="line"> (various       (various      |  (various            |          |</span><br><span class="line">  timers...)      paths...)   |   sockets...)        |          |</span><br><span class="line">      |              |        |      |               |          |</span><br><span class="line">      v              v        |      v               |          |</span><br><span class="line">timers.target  paths.target   |  sockets.target      |          |</span><br><span class="line">      |              |        |      |               v          |</span><br><span class="line">      v              \_______ | _____/         rescue.service   |</span><br><span class="line">                             \|/                     |          |</span><br><span class="line">                              v                      v          |</span><br><span class="line">                          basic.target         rescue.target    |</span><br><span class="line">                              |                                 |</span><br><span class="line">                      ________v____________________             |</span><br><span class="line">                     /              |              \            |</span><br><span class="line">                     |              |              |            |</span><br><span class="line">                     v              v              v            |</span><br><span class="line">                 display-    (various system   (various system  |</span><br><span class="line">             manager.service     services        services)      |</span><br><span class="line">                     |         required for        |            |</span><br><span class="line">                     |        graphical UIs)       v            v</span><br><span class="line">                     |              |            multi-user.target</span><br><span class="line">emergency.service    |              |              |</span><br><span class="line">        |            \_____________ | _____________/</span><br><span class="line">        v                          \|/</span><br><span class="line">emergency.target                    v</span><br><span class="line">                              graphical.target</span><br></pre></td></tr></table></figure><p>关于Linux的开机启动可以参考：<a href="/2024/04/13/Linux%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/" title="Linux的启动过程">Linux的启动过程</a></p></li></ol><h2 id="Systemd-相关的命令"><a href="#Systemd-相关的命令" class="headerlink" title="Systemd 相关的命令"></a>Systemd 相关的命令</h2><h3 id="系统相关"><a href="#系统相关" class="headerlink" title="系统相关"></a>系统相关</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## systemd ###</span></span></span><br><span class="line"></span><br><span class="line">systemctl --version #查看版本</span><br><span class="line"></span><br><span class="line">systemctl reboot #重启系统</span><br><span class="line"></span><br><span class="line">systemctl poweroff #关机</span><br><span class="line"></span><br><span class="line">systemctl halt #关机</span><br><span class="line"></span><br><span class="line">systemctl suspend #系统暂停</span><br><span class="line"></span><br><span class="line">systemd-analyze #查看启动耗时</span><br><span class="line"></span><br><span class="line">systemd-analyze plot &gt; boot.svg #将启动耗时图形化展示</span><br><span class="line"></span><br><span class="line">systemd-analyze blame #查看每个服务耗时</span><br><span class="line"></span><br><span class="line">systemd-analyze critical-chain #查看瀑布状启动过程</span><br><span class="line"></span><br><span class="line">systemd-analyze critical-chain sshd.service #查看指定服务的启动流</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## hostnamectl ###</span></span></span><br><span class="line"></span><br><span class="line">hostnamectl #查看主机</span><br><span class="line"></span><br><span class="line">hostnamectl set-hostname WWW #设置主机名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## localectl ###</span></span></span><br><span class="line"></span><br><span class="line">localectl #查看本地化设置</span><br><span class="line"></span><br><span class="line">localectl set-locale LANG=en_GB.utf8 # 设置本地化语言</span><br><span class="line"></span><br><span class="line">localectl set-keymap en_GB #设置本地化的键位图</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## timedatectl ###</span></span></span><br><span class="line"></span><br><span class="line">timedatectl #查看时间</span><br><span class="line"></span><br><span class="line">timedatectl list-timezones #显示当前可用时区</span><br><span class="line"></span><br><span class="line">timedatectl set-timezone America/New_York #设置当前时区</span><br><span class="line"></span><br><span class="line">timedatectl set-time YYYY-MM-DD #设置当前时间，年月日</span><br><span class="line"></span><br><span class="line">timedatectl set-time HH:MM:SS #设置当前时间，时分秒</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## loginctl ###</span></span></span><br><span class="line"></span><br><span class="line">loginctl list-sessions #列出当前session</span><br><span class="line"></span><br><span class="line">loginctl list-users #列出当前登录用户</span><br><span class="line"></span><br><span class="line">loginctl show-user root #列出指定用户信息</span><br></pre></td></tr></table></figure><h3 id="unit相关"><a href="#unit相关" class="headerlink" title="unit相关"></a>unit相关</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">man 5 systemd.slice #查看某种类型unit的文档</span><br><span class="line"></span><br><span class="line">systemctl list-units #列出正在运行的 unit</span><br><span class="line"></span><br><span class="line">systemctl list-units --all #列出所有的 unit，包括没有找到配置文件的或者启动失败的</span><br><span class="line"></span><br><span class="line">systemctl list-units --all --state=inactive #列出所有没有运行的 unit</span><br><span class="line"></span><br><span class="line">systemctl list-units --failed #列出所有加载失败的 unit</span><br><span class="line"></span><br><span class="line">systemctl list-units --type=service #列出所有正在运行的、类型为 service 的 unit</span><br><span class="line"></span><br><span class="line">systemctl status #显示系统状态</span><br><span class="line"></span><br><span class="line">systemctl status ssh.d.service #查看单个unit状态</span><br><span class="line"></span><br><span class="line">systemctl -H root@master status sshd.service #查看远程主机单个unit状态</span><br><span class="line"></span><br><span class="line">systemctl is-active sshd.service #查看某个unit是否运行</span><br><span class="line"></span><br><span class="line">systemctl is-failed sshd.service #查看某个unit是否启动失败</span><br><span class="line"></span><br><span class="line">systemctl is-enabled sshd.service #查看某个unit是否开机自动启动</span><br><span class="line"></span><br><span class="line">systemctl start sshd.service #启动某个unit</span><br><span class="line"></span><br><span class="line">systemctl stop sshd.service #停止某个unit</span><br><span class="line"></span><br><span class="line">systemctl restart sshd.service #重启某个unit</span><br><span class="line"></span><br><span class="line">systemctl enable sshd.service #设置某个unit开机自启</span><br><span class="line"></span><br><span class="line">systemctl enable sshd.service --now #设置某个unit开机自启，并重启</span><br><span class="line"></span><br><span class="line">systemctl status sshd.service #查看某个unit的运行状态</span><br><span class="line"></span><br><span class="line">systemctl disenable sshd.service #设置某个unit开机不自启</span><br><span class="line"></span><br><span class="line">systemctl kill sshd.service #杀掉该unit的所有子进程</span><br><span class="line"></span><br><span class="line">systemctl reload sshd.service #重新加载unit的配置文件</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload #重载所有修改过的配置文件</span><br><span class="line"></span><br><span class="line">systemctl show sshd.service #显示某个unit的所有底层参数</span><br><span class="line"></span><br><span class="line">systemctl show -p CPUShares sshd.service #显示某个unit的指定属性的值</span><br><span class="line"></span><br><span class="line">systemctl set-property sshd.service CPUShares=500 #设置某个unit的指定属性</span><br><span class="line"></span><br><span class="line">systemctl list-dependencies sshd.service #列出unit的依赖关系，不显示Target</span><br><span class="line"></span><br><span class="line">systemctl list-dependencies --all sshd.service #列出unit的所有依赖关系</span><br><span class="line"></span><br><span class="line">systemctl list-unit-files #列出所有的unit配置文件，配置文件有状态有：enabled：开机自启，disenabled：开机不自启，static：该配置文件没有[Install]部分（无法执行），只能作为其他配置文件的依赖，masked：该配置文件被禁止建立启动链接</span><br><span class="line"></span><br><span class="line">systemctl list-unit-files --type=service #列出指定unit的配置文件</span><br><span class="line"></span><br><span class="line">systemctl list-units -t service --all #列出所有的指定unit的配置文件 -t就是type的意思</span><br><span class="line"></span><br><span class="line">systemctl cat sshd.service #查看某个配置文件</span><br><span class="line"></span><br><span class="line">systemctl edit sshd.service #编辑某个配置文件</span><br><span class="line"></span><br><span class="line">systemctl get-default #查看启动时的默认Target</span><br><span class="line"></span><br><span class="line">systemctl set-default multi-user.target #设置默认启动的Target</span><br><span class="line"></span><br><span class="line">systemctl isolate multi-user.target #切换 Target 时，关闭前一个 Target 里面所有不属于后一个 Target 的进程，默认不关闭前一个 Target 启动的进程</span><br></pre></td></tr></table></figure><h3 id="日志相关"><a href="#日志相关" class="headerlink" title="日志相关"></a>日志相关</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">journalctl #查看日志，默认只保存本次启动的日志</span><br><span class="line"></span><br><span class="line">journalctl -k #查看内核日志，不显示应用日志</span><br><span class="line"></span><br><span class="line">journalctl -b # 查看系统本次启动的日志</span><br><span class="line">journalctl -b -0</span><br><span class="line"></span><br><span class="line">journalctl -b -1 # 查看系统上次启动的日志，需要修改配置文件，保存上次启动的日志</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看指定时间的日志</span></span><br><span class="line">journalctl --since=&quot;2020-10-1 15:16:17&quot;</span><br><span class="line">journalctl --since &quot;30 min ago&quot;</span><br><span class="line">journalctl --since yesterday</span><br><span class="line">journalctl --since &quot;2020-03-12&quot; --until &quot;2024-03-13 05:00&quot;</span><br><span class="line">journalctl --since 10:00 --until &quot;2 hour ago&quot;</span><br><span class="line"></span><br><span class="line">journalctl -n # 显示尾部的最新10行日志</span><br><span class="line"></span><br><span class="line">journalctl -n 20 # 显示尾部指定行数的日志</span><br><span class="line"></span><br><span class="line">journalctl -f # 实时滚动显示最新日志</span><br><span class="line"></span><br><span class="line">journalctl /usr/lib/systemd/systemd # 查看指定服务的日志</span><br><span class="line"></span><br><span class="line">journalctl _PID=1 #查看指定进程的日志</span><br><span class="line"></span><br><span class="line">journalctl /usr/bin/bash # 查看某个路径的脚本的日志</span><br><span class="line"></span><br><span class="line">journalctl _UID=33 --since today # 查看指定用户的日志</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看某个 unit 的日志</span></span><br><span class="line">journalctl -u sshd.service</span><br><span class="line">journalctl -u sshd.service --since today</span><br><span class="line"></span><br><span class="line">journalctl -u sshd.service -f # 实时滚动显示某个 Unit 的最新日志</span><br><span class="line"></span><br><span class="line">journalctl -u nginx.service -u php-fpm.service --since today # 合并显示多个 Unit 的日志</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看指定优先级（及其以上级别）的日志，共有8级</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">0: emerg</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1: alert</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2: crit</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3: err</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4: warning</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5: notice</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6: info</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">7: debug</span></span><br><span class="line">journalctl -p err -b</span><br><span class="line"></span><br><span class="line">journalctl --no-pager # 日志默认分页输出，--no-pager 改为正常的标准输出</span><br><span class="line"></span><br><span class="line">journalctl -b -u sshd.service -o json # 以 JSON 格式（单行）输出</span><br><span class="line"></span><br><span class="line">journalctl -b -u sshd.service -o json-pretty # 以 JSON 格式（多行）输出，可读性更好</span><br><span class="line"></span><br><span class="line">journalctl --disk-usage # 显示日志占据的硬盘空间</span><br><span class="line"></span><br><span class="line">journalctl --vacuum-size=1G # 指定日志文件占据的最大空间</span><br><span class="line"></span><br><span class="line">journalctl --vacuum-time=1years # 指定日志文件保存多久</span><br></pre></td></tr></table></figure><h3 id="systemd"><a href="#systemd" class="headerlink" title="systemd-"></a>systemd-</h3><p>通过在终端输入<code>systemd-</code>，然后Tab补全就可以查看相应的命令，这些命令是<code>systemd</code>架构提供的可用命令，平时很少用到。</p><h2 id="创建自己的Service"><a href="#创建自己的Service" class="headerlink" title="创建自己的Service"></a>创建自己的Service</h2><ol><li>创建配置文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/systemd/system/hello.service</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">### 文件内容</span></span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Hello</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/python /root/hello.py</span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li>创建<code>python</code>脚本文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /root/hello.py</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">### 脚本内容</span></span></span><br><span class="line">import logging</span><br><span class="line">import time</span><br><span class="line">logging.basicConfig(format=&#x27;Date-Time : %(asctime)s : Line No. : %(lineno)d - %(message)s&#x27;, level = logging.DEBUG)</span><br><span class="line">while True:</span><br><span class="line">logging.debug(&quot;A Debug logging Message&quot;)</span><br><span class="line">time.sleep(10)</span><br></pre></td></tr></table></figure></li><li>启动服务，并设置开机自启<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload # 编写后需要重新加载新的配置文件</span><br><span class="line">systemctl start hello.service #启动服务</span><br><span class="line">systemctl enable hello.service #设置开机自动启动</span><br><span class="line">systemctl status hello.service #查看状态</span><br><span class="line"></span><br><span class="line">[root@www ~]# systemctl status hello.service -l</span><br><span class="line">● hello.service - Hello</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/hello.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sun 2024-04-14 11:27:37 CST; 2min 17s ago</span><br><span class="line"> Main PID: 8128 (python)</span><br><span class="line">   CGroup: /system.slice/hello.service</span><br><span class="line">           └─8128 /usr/bin/python /root/hello.py</span><br><span class="line"></span><br><span class="line">Apr 14 11:28:17 www.a.org python[8128]: Date-Time : 2024-04-14 11:28:17,540 : Line No. : 5 - A Debug logging Message</span><br><span class="line">Apr 14 11:28:27 www.a.org python[8128]: Date-Time : 2024-04-14 11:28:27,549 : Line No. : 5 - A Debug logging Message</span><br><span class="line">Apr 14 11:28:37 www.a.org python[8128]: Date-Time : 2024-04-14 11:28:37,580 : Line No. : 5 - A Debug logging Message</span><br><span class="line">Apr 14 11:28:47 www.a.org python[8128]: Date-Time : 2024-04-14 11:28:47,612 : Line No. : 5 - A Debug logging Message</span><br><span class="line">Apr 14 11:28:57 www.a.org python[8128]: Date-Time : 2024-04-14 11:28:57,619 : Line No. : 5 - A Debug logging Message</span><br><span class="line">Apr 14 11:29:07 www.a.org python[8128]: Date-Time : 2024-04-14 11:29:07,638 : Line No. : 5 - A Debug logging Message</span><br><span class="line">Apr 14 11:29:17 www.a.org python[8128]: Date-Time : 2024-04-14 11:29:17,642 : Line No. : 5 - A Debug logging Message</span><br><span class="line">Apr 14 11:29:27 www.a.org python[8128]: Date-Time : 2024-04-14 11:29:27,701 : Line No. : 5 - A Debug logging Message</span><br><span class="line">Apr 14 11:29:37 www.a.org python[8128]: Date-Time : 2024-04-14 11:29:37,728 : Line No. : 5 - A Debug logging Message</span><br><span class="line">Apr 14 11:29:47 www.a.org python[8128]: Date-Time : 2024-04-14 11:29:47,737 : Line No. : 5 - A Debug logging Message</span><br><span class="line"></span><br><span class="line">systemctl restart hello #重启服务</span><br><span class="line">ps aux | grep hello #查看进程</span><br><span class="line">[root@www ~]# ps aux | grep hello</span><br><span class="line">root      8347  0.0  0.2 138728  5404 ?        Ss   11:31   0:00 /usr/bin/python /root/hello.py</span><br><span class="line">root      8373  0.0  0.0 112812   976 pts/0    S+   11:31   0:00 grep --color=auto hello</span><br><span class="line"></span><br><span class="line">systemctl stop hello #停止服务</span><br></pre></td></tr></table></figure></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" title="Systemd 入门教程：命令篇">Systemd 入门教程：命令篇</a></li><li><a href="https://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html" title="Systemd 入门教程：实战篇">Systemd 入门教程：实战篇</a></li><li><a href="https://zhuanlan.zhihu.com/p/643259265?utm_campaign=shareopn&utm_medium=social&utm_psn=1762514603320569856&utm_source=wechat_session" title="《一篇搞懂》系列之三——systemd">《一篇搞懂》系列之三——systemd</a></li><li><a href="https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html" title="systemd.unit — Unit configuration">systemd.unit — Unit configuration</a></li><li><a href="https://docs.fedoraproject.org/en-US/quick-docs/systemd-understanding-and-administering/" title="Understanding and administering systemd">Understanding and administering systemd</a></li><li><a href="https://www.freedesktop.org/software/systemd/man/latest/bootup.html" title="bootup — System bootup process">bootup — System bootup process</a></li><li><a href="https://www.freedesktop.org/wiki/Software/systemd/" title="systemd手册">systemd手册</a></li><li><a href="https://blog.csdn.net/kaikai136412162/article/details/105702912" title="Systemd的Unit文件； systemctl自定义服务启动">Systemd的Unit文件； systemctl自定义服务启动</a></li><li><a href="https://linux.cn/article-5457-1.html" title="走进Linux之systemd启动过程">走进Linux之systemd启动过程</a></li><li><a href="https://www.bilibili.com/video/BV1Tz4y1s7QW/?spm_id_from=333.337.search-card.all.click&vd_source=4470be84aba61145fe9d1690fe726951" title="Linux Systemd完全入门 一个视频搞懂systemd的使用">Linux Systemd完全入门 一个视频搞懂systemd的使用</a></li><li><a href="https://www.zhihu.com/question/621298905/answer/3464947964?utm_campaign=shareopn&utm_medium=social&utm_psn=1762764177159254017&utm_source=wechat_session" title="LINUX启动流程是怎么样的？">LINUX启动流程是怎么样的？</a></li><li><a href="https://blog.csdn.net/rikeyone/article/details/108097837" title="systemd启动流程分析">systemd启动流程分析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos中的环境变量</title>
      <link href="/2024/04/13/Centos%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>/2024/04/13/Centos%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Centos中的环境变量"><a href="#Centos中的环境变量" class="headerlink" title="Centos中的环境变量"></a>Centos中的环境变量</h1><h2 id="环境变量的含义"><a href="#环境变量的含义" class="headerlink" title="环境变量的含义"></a>环境变量的含义</h2><p>环境变量是在操作系统中一个具有特定名字的对象，它包含了一个或者多个应用程序所将使用到的信息，用来指定操作系统运行环境的一些参数。本质上就是一个变量，可以通过这个变量找到对应的程序，文件等。</p><h2 id="环境变量的用途"><a href="#环境变量的用途" class="headerlink" title="环境变量的用途"></a>环境变量的用途</h2><ol><li>查找相应的程序或文件(PATH)</li><li>查找动态库</li><li>保存特定的系统变量</li><li>工作路径(PWD)</li><li>用户信息(LOGNAME, HOME)</li><li>等等</li></ol><h2 id="环境变量的查看"><a href="#环境变量的查看" class="headerlink" title="环境变量的查看"></a>环境变量的查看</h2><ol><li><code>printenv</code>，<code>env</code>，<code>set</code>和<code>export</code>查看环境变量<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www ~]# env</span><br><span class="line">...</span><br><span class="line">MAIL=/var/spool/mail/root</span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line">PWD=/root</span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line">HISTCONTROL=ignoredups</span><br><span class="line">SHLVL=1</span><br><span class="line">HOME=/root</span><br><span class="line">LOGNAME=root</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><code>echo $环境变量名</code> 查看指定的环境变量<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www ~]# echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure></li><li><code>printenv 环境变量名</code> 查看指定的环境变量<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www ~]# printenv PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure></li></ol><h2 id="常用的环境变量"><a href="#常用的环境变量" class="headerlink" title="常用的环境变量"></a>常用的环境变量</h2><ol><li>PATH：指定可执行程序或者文件的路径</li><li>HOME：指定用户的主工作目录</li><li>LD_LIBRARY_PATH：指定C&#x2F;C++动态链接库文件搜索的路径，Centos中默认没有</li><li>C_INCLUDE_PATH, CPLUS_INCLUDE_PATH：指定C&#x2F;C++的头文件搜索的路径，Centos中默认没有</li><li>PWD：当前目录。</li><li>SHELL：用户所用Shell的种类。</li><li>HISTSIZE：保存历史命令记录的条数。</li><li>HOSTNAME：主机的名称</li><li>LOGNAME：当前用户的用户名。</li></ol><h2 id="环境变量的分类"><a href="#环境变量的分类" class="headerlink" title="环境变量的分类"></a>环境变量的分类</h2><ul><li>按生命周期分类：<ul><li><strong>永久的环境变量</strong>：系统开机时设置的环境变量，或者用户登录时设置的环境变量</li><li><strong>临时的环境变量</strong>：在当前终端下声明的环境变量，退出终端后失效</li></ul></li><li>按作用域分类：<ul><li><strong>系统环境变量</strong>：由系统或者管理员创建的全局变量，对所有用户生效</li><li><strong>用户环境变量</strong>：用户创建的，只对创建的用户生效</li></ul></li></ul><h2 id="临时环境变量的设置"><a href="#临时环境变量的设置" class="headerlink" title="临时环境变量的设置"></a>临时环境变量的设置</h2><ol><li><code>export 变量名=值</code>设置非路径形式的环境变量<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www ~]# export ARCHER=DD</span><br><span class="line">[root@www ~]# printenv ARCHER</span><br><span class="line">DD</span><br></pre></td></tr></table></figure></li><li>设置路径形式的环境变量<ul><li>创建新的路径形式的环境变量<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export DD=路径1:路径2:路径3 #分号隔开，这很重要，`=`号两边不能有空格</span><br></pre></td></tr></table></figure></li><li>修改路径形式的环境变量<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:路径1:路径2 或 export PATH=路径1:路径2:$PATH #注意分号，千万别覆盖了，`=`号两边不能有空格</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="永久的环境变量"><a href="#永久的环境变量" class="headerlink" title="永久的环境变量"></a>永久的环境变量</h2><ol><li>系统设置的环境变量一般都是永久的，千万别去改。</li><li>由用户创建的环境变量一般都是保存在文件当中，当系统启动时或者用户登录时生效。</li><li>只需要按照前面设置临时环境变量的方法，将命令写入配置文件当中就行。</li></ol><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><table><thead><tr><th align="center">具有修改权限的用户</th><th align="center">配置文件</th><th align="center">作用域</th></tr></thead><tbody><tr><td align="center">root</td><td align="center"><code>/etc/profile</code>, <code>/etc/bashrc</code>, <code>/etc/environment</code>, <code>/etc/profile.d/文件名</code></td><td align="center">全局</td></tr><tr><td align="center">root&#x2F;普通用户</td><td align="center"><code>~/.bashrc</code>,  <code>~/.bash_profile</code></td><td align="center">当前用户</td></tr></tbody></table><ul><li>注意对于<code>/etc/profile.d/文件名</code>，将命令写入<code>/etc/profile.d/</code>下新的文件中，文件名随便取，主要是因为当系统启动或者用户登录时，会执行<code>/etc/profile</code>文件，该文件会执行<code>/etc/profile.d/</code>下的所有脚本，这样做比修改<code>/etc/profile</code>好用。配置完成后，通过<code>source 配置文件</code>或<code>. 配置文件</code>使其生效，如<code>source ~/.bashrc</code>或<code>. ~/.bashrc</code>，<code>source</code>或<code>.</code>将会影响本shell。</li><li><code>source</code>命令是一个内置的<code>shell</code>命令，用于从当前<code>shell</code>会话中的文件读取和执行命令。<code>source</code>命令通常用于保留、更改当前<code>shell</code>中的环境变量。简而言之，<code>source</code>一个脚本，将会在当前<code>shell</code>中运行<code>execute</code>命令。<code>.</code>作用和<code>source</code>一致。</li><li>本人常用的是：<code>~/.bashrc</code></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/679828790?utm_campaign=shareopn&utm_medium=social&utm_psn=1762492409928540161&utm_source=wechat_session" title="Linux环境变量，知识点汇总">Linux环境变量，知识点汇总</a></li><li><a href="https://cloud.tencent.com/developer/article/1640616," title="Linux - 配置环境变量的几种方式">Linux - 配置环境变量的几种方式</a></li><li><a href="https://www.cnblogs.com/youyoui/p/10680329.html" title="Linux环境变量配置全攻略 ">Linux环境变量配置全攻略 </a></li><li><a href="https://chihokyo.com/post/6/" title="简单易懂解说「到底什么是环境变量？」">简单易懂解说「到底什么是环境变量？」</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux的启动过程</title>
      <link href="/2024/04/13/Linux%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
      <url>/2024/04/13/Linux%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Linux的启动过程"><a href="#Linux的启动过程" class="headerlink" title="Linux的启动过程"></a>Linux的启动过程</h1><p><img src="1.webp"></p><h2 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h2><p>当给机器通上电源，BIOS(Basic Input&#x2F;Output System, 基本输入输出系统)或UEFI (Unified Extensible Firmware Interface, 统一可扩展固件接口)从NVM (non-volatile memory, 非易失性存储器)中加载，并执行POST (Power On Self Test, 上电自检)。</p><h2 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h2><p>BIOS&#x2F;UEFI检查连接到系统的设备，包括CPU (Central Processing Unit, 中央处理器<br>)，RAM (Random Access Memor, 随机访问存储器)和存储设备。</p><h2 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3"></a>步骤3</h2><p>从硬盘，网络或者CD-ROM (Compact Disc Read-Only Memory, 只读光盘)中选择一个启动设备来启动操作系统。</p><h2 id="步骤4"><a href="#步骤4" class="headerlink" title="步骤4"></a>步骤4</h2><p>BIOS&#x2F;UEFI运行引导程序如GRUB，该程序提供了一个菜单来选择操作系统或者内核功能。</p><h2 id="步骤5"><a href="#步骤5" class="headerlink" title="步骤5"></a>步骤5</h2><p>当内核准备好后，从内核空间切换到用户空间。内核会启动第一个用户空间进程——systemd，来管理进程和服务，检测剩下所有的硬件，挂载文件系统以及运行桌面环境。</p><h2 id="步骤6"><a href="#步骤6" class="headerlink" title="步骤6"></a>步骤6</h2><p>当系统启动后，systemd会启动default.target 单元，其他单元也会被执行。</p><h2 id="步骤7"><a href="#步骤7" class="headerlink" title="步骤7"></a>步骤7</h2><p>系统运行一系列的启动脚本，并配置环境。</p><h2 id="步骤8"><a href="#步骤8" class="headerlink" title="步骤8"></a>步骤8</h2><p>系统准备就绪，用户登录窗口出现，用户可以登录系统。</p><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><ul><li><strong>BIOS</strong> (Basic Input&#x2F;Output System, 基本输入输出系统)：从字义上称为“基本输出输入系统”，是在通电启动阶段执行硬件初始化，以及为操作系统提供运行时服务的固件，专门负责系统硬件各种参数设定，本质上是“程序”，也就是一组“代码”。</li><li><strong>UEFI</strong> (Unified Extensible Firmware Interface, 统一可扩展固件接口)：是一种个人电脑系统规格，用来定义操作系统与系统固件之间的软件界面，作为BIOS的替代方案。可扩展固件接口负责加电自检（POST）、联系操作系统以及提供连接操作系统与硬件的接口。</li><li><strong>NVM</strong> (non-volatile memory, 非易失性存储器)：是指当电流关掉后，所存储的资料不会消失的资料存储设备。</li><li><strong>POST</strong> (Power On Self Test, 上电自检)：又称为引导自我检测，是计算机BIOS的一个功能，在引导时会执行，针对计算机硬件如CPU、主板、存储器等进行检测，结果会显示在屏幕上。</li><li><strong>CPU</strong> (Central Processing Unit, 中央处理器<br>)：是计算机的主要设备之一，功能主要是解释计算机指令以及处理计算机软件中的数据。</li><li><strong>RAM</strong> (Random Access Memor, 随机访问存储器)：是与中央处理器直接交换数据的内部存储器。它可以随时读写，而且速度很快，通常作为操作系统或其他正在运行中的程序的临时资料存储介质。</li><li><strong>CD-ROM</strong> (Compact Disc Read-Only Memory, 只读光盘)：是一种在电脑上使用的光盘。这种光盘只能写入数据一次，信息将永久保存在光盘上，使用时通过光盘驱动器读出信息。</li><li><strong>GRUB</strong>：是一个来自GNU项目的启动引导程序。GRUB是多启动规范的实现，它允许用户可以在计算机内同时拥有多个操作系统，并在计算机启动时选择希望运行的操作系统。GRUB可用于选择操作系统分区上的不同内核，也可用于向这些内核传递启动参数。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.bytebytego.com/p/ep88-linux-boot-process-explained" title="EP88: Linux Boot Process Explained">EP88: Linux Boot Process Explained</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令（五）</title>
      <link href="/2024/04/12/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2024/04/12/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="查看端口号"><a href="#查看端口号" class="headerlink" title="查看端口号"></a>查看端口号</h2><h3 id="根据进程查看端口"><a href="#根据进程查看端口" class="headerlink" title="根据进程查看端口"></a>根据进程查看端口</h3><ol><li>先用<code>ps aux | grep xxx(某个进程)</code>，可以查看某个进程的pid。 </li><li>再用<code>netstat -anp | grep pid</code>号，可以查看到该进程占用的端口号<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux | grep vsftp #获取进程号</span><br><span class="line">[root@localhost ~]# ps aux | grep vsftp</span><br><span class="line">root      1668  0.0  0.0  53292   700 ?        Ss   10:55   0:00 /usr/sbin/vsftpd /etc/vsftpd/vsftpd.conf</span><br><span class="line">yum install net-tools -y #安装网络工具软件</span><br><span class="line">netstat -anp | grep 1668 #查看端口</span><br><span class="line">[root@localhost ~]# netstat -anp | grep 1668</span><br><span class="line">tcp6       0      0 :::21                   :::*                    LISTEN      1668/vsftpd         </span><br><span class="line">unix  2      [ ]         DGRAM                    19629    1668/vsftpd</span><br></pre></td></tr></table></figure></li></ol><h3 id="根据端口查进程"><a href="#根据端口查进程" class="headerlink" title="根据端口查进程"></a>根据端口查进程</h3><p>使用 <code>netstat -nap | grep port</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -nap | grep 21</span><br><span class="line">[root@localhost ~]# netstat -nap | grep 21</span><br><span class="line">tcp6       0      0 :::21                   :::*                    LISTEN      1668/vsftpd </span><br></pre></td></tr></table></figure><h2 id="查看历史命令"><a href="#查看历史命令" class="headerlink" title="查看历史命令"></a>查看历史命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">history #查看历史命令</span><br></pre></td></tr></table></figure><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><ol><li>firewalld简介：保护互联网对服务器的影响</li><li>selinux简介：保护服务器内部程序对内部文件的访问，centos7默认开启</li><li>firewalld临时关闭：<code>systemctl stop firewalld</code></li><li>firewalld永久关闭：<code>systemctl enable firewalld</code></li><li>firewalld状态查看：<code>systemctl status firewalld</code></li><li>selinux临时关闭：<code>setenforce 0</code></li><li>selinux永久关闭：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/selinux</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改为</span></span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure></li><li>selinux状态查看：<code>getenforce</code>，(enforcing 开启，permissive 禁止，disable 关闭)</li></ol><h2 id="文件服务"><a href="#文件服务" class="headerlink" title="文件服务"></a>文件服务</h2><h3 id="FTP-服务"><a href="#FTP-服务" class="headerlink" title="FTP 服务"></a>FTP 服务</h3><ul><li>简介：<ul><li>名词解释：FTP(File Transfer Protocol, 文件传输协议)，是TCP&#x2F;IP协议组中的协议之一<br><img src="1.png"></li><li>logo</li><li>作用<ul><li>提供文件共享服务</li><li>互联网上多数的媒体资源和软件资源，多数是由FTP服务器传递</li></ul></li><li>软件包：<strong>vsftpd</strong><br><img src="2.png"></li></ul></li><li>基础<ul><li>控制端口command 21&#x2F;tcp</li><li>数据端口data 20&#x2F;tcp</li></ul></li><li>FTP 服务端默认配置<ul><li>安装<strong>vsftpd</strong>：<code>yum -y install vsftpd</code></li><li>准备分发内容<ul><li><code>touch /var/ftp/abc.txt</code></li><li>FTP服务器的主目录为： <code>/var/ftp/</code>，是FTP程序分享内容的本机目录</li></ul></li><li>启动服务<ul><li><code>systemctl start vsftpd</code></li><li><code>systemctl enable vsftpd</code></li></ul></li><li>关闭防火墙</li></ul></li><li>FTP 客户端：通过windows访问FTP<ul><li>打开我的电脑，在上面的路径栏上输入<code>ftp://ftp服务器的ip地址</code></li><li><code>ftp://172.16.34.150</code></li><li>如果有用户名和密码就输入，没有就可以直接看到文件了<br><img src="3.png"></li></ul></li><li>centos7 客户端：<ul><li>下载：<strong>lftp</strong></li><li><code>yum -y install lftp</code></li><li><code>lftp ftp服务器的ip地址</code></li><li><code>lftp 172.16.34.150</code></li><li><code>get abc.txt</code> #下载文件</li><li><code>mirror pub</code> #下载文件夹</li><li><code>exit</code> #退出</li><li>下载至当前目录</li></ul></li><li>wget下载<ul><li><code>wget ftp://ftp服务器的ip地址/文件</code> #下载文件</li><li><code>wget ftp://172.16.34.150/abc.txt</code> </li><li><code>wget -m ftp://172.16.34.150/pub</code> #下载文件夹，<code>-m</code>表示mirror</li></ul></li><li>启动上传功能<ul><li>配置文件<ul><li>用于设定FTP服务器的功能开启或关闭</li><li><code>vim /etc/vsftpd/vsftpd.conf </code></li></ul></li><li>检查禁用匿名账户登录开启<ul><li>目的：启用后禁用匿名账户(默认)</li><li><code>anonymous_enable=YES</code> #<code>No</code>需要用户名和密码，并进入用户的家目录</li></ul></li><li>配置上传指令<ul><li><code>anon_upload_enable=YES</code> #启动上传文件共能</li><li><code>anon_mkdir_write_enable=YES</code> #启动创建文件夹的功能</li></ul></li><li>创建上传目录，不能用默认目录<ul><li><code>mkdir /var/ftp/upload</code></li><li><code>chmod 777 /var/ftp/upload</code></li></ul></li></ul></li><li>测试<ul><li>登录服务器：<code>lftp 172.16.34.150</code></li><li>进入上传目录：<code>cd upload</code></li><li>上传文件：<code>put 2.txt</code></li><li>创建目录：<code>mkdir 252</code></li><li>上传目录：<code>mirror -R aaa</code></li></ul></li></ul><h3 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h3><ul><li>简介<ul><li>NFS：Network File System网络文件管理系统，Linux&#x2F;Unix系统之间共享文件的一种协议</li><li>NFS的客户端主要为Linux</li><li>支持多节点同时挂载以及并发写入</li></ul></li><li>作用<ul><li>提供文件共享服务</li><li>为集群中的Web Server配置后端存储</li></ul></li><li>操作可以参考：<a href="/2024/03/22/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89/" title="Centos8集群Torque作业管理系统安装（二）">Centos8集群Torque作业管理系统安装（二）</a></li></ul><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><ul><li>简介：可以借助SSH(安全外壳协议)远程操作和管理系统，不仅方便且安全可靠</li><li>安装：<code>yum -y install openssh-server</code></li><li>启动：<ul><li><code>systemctl start sshd</code></li><li><code>systemctl enable sshd</code></li></ul></li><li><code>ssh root@172.16.34.151</code> #远程控制主机</li></ul><h2 id="网站服务"><a href="#网站服务" class="headerlink" title="网站服务"></a>网站服务</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>名词<ul><li>HTML：HyperText Markup Language(超级文本标记语言)</li><li>网页：使用HTML，PHP，JAVA语言格式书写的文本</li><li>主页：网页中呈现用户的第一个页面</li><li>网站：多个网页组合而成</li><li>URL<ul><li>Uniform Resource Locator</li><li>同一资源定位符</li><li>防卫网站的地址</li></ul></li></ul></li><li>网站架构<ul><li>LAMP：Linux + Apache + MySQL + PHP</li><li>LAMP：系统 + 服务器程序 + 数据库管理软件 + 中间软件</li></ul></li></ul><h3 id="静态站点"><a href="#静态站点" class="headerlink" title="静态站点"></a>静态站点</h3><ul><li><strong>Apache基础</strong><ul><li>Apache官网：<a href="http://www.apache.org/">www.apache.org</a></li><li>软件包名称：httpd</li><li>服务端口：80&#x2F;tcp&#x2F;http 443&#x2F;tcp&#x2F;https</li><li>配置文件：&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</li><li>子配置文件：&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;*.conf</li><li>主目录：&#x2F;var&#x2F;www&#x2F;html</li></ul></li><li><strong>安装Apache</strong><ul><li><code>yum -y install httpd</code> #安装</li><li><code>systemctl start httpd</code> #启动</li><li><code>systemctl enable httpd</code> #开机自动启动</li><li><code>systemctl status httpd</code> #查看状态</li><li><code>httpd -v</code> #查看版本</li><li><strong>Server version: Apache&#x2F;2.4.6 (CentOS)</strong></li></ul></li><li><strong>虚拟主机</strong><ul><li>目的：在一台物理服务器上运行多个网站</li><li>类型：基于主机名<ul><li><a href="http://www.a.com/">www.a.com</a></li><li><a href="http://www.b.com/">www.b.com</a></li></ul></li><li>配置虚拟主机<ul><li>在一台服务器上，实现两个网站的架构</li><li>网站域名  网站资源存放目录</li><li><a href="http://www.a.org/">www.a.org</a>  &#x2F;var&#x2F;www&#x2F;html&#x2F;a.org</li><li><a href="http://www.b.org/">www.b.org</a> &#x2F;b.org</li><li>注意关闭firewalld和selinux</li></ul></li><li>服务端<ul><li><a href="http://www.a.org站点的设置/">www.a.org站点的设置</a><ol><li>准备网站源码目录<ul><li><code>mkdir /var/www/html/a.org</code></li><li><code>echo &#39;www.a.org&#39; &gt; /var/www/html/a.org/index.html</code></li></ul></li><li>创建a.org的网站配置文件<ul><li><code>vim /etc/httpd/conf.d/a.org.conf</code></li><li><code>&lt;VirtualHost *:80&gt;</code>#某个虚拟主机，端口号80</li><li><code>ServerName www.a.org</code> #服务器名，随便起</li><li><code>DocumentRoot /var/www/html/a.org</code> #网站的根目录</li><li><code>&lt;/VirtualHost&gt;</code></li></ul></li><li>检测配置文件语法，重启服务<ul><li><code>httpd -t</code> #检查语法</li><li><code>systemctl restart httpd</code></li></ul></li></ol></li><li><a href="http://www.b.org站点的设置/">www.b.org站点的设置</a><ol><li>准备网站源码目录<ul><li><code>mkdir /b.org</code></li><li><code>echo &#39;www.b.org&#39; &gt; /b.org/index.html</code></li></ul></li><li>创建b.org的网站配置文件<ul><li><code>vim /etc/httpd/conf.d/b.org.conf</code></li><li><code>&lt;VirtualHost *:80&gt;</code>#某个虚拟主机，端口号80</li><li><code>ServerName www.b.org</code> #服务器名，随便起</li><li><code>DocumentRoot /b.org</code> #网站的根目录</li><li><code>&lt;/VirtualHost&gt;</code></li><li><code>&lt;Directory &quot;/b.org&quot;&gt;</code> 网站的根目录</li><li><code>Require all granted</code> #放在其他地方，必须要授权允许访问</li><li><code>&lt;/Directory&gt;</code></li></ul></li><li>检测配置文件语法，重启服务<ul><li><code>httpd -t</code> #检查语法</li><li><code>systemctl restart httpd</code></li></ul></li></ol></li></ul></li><li>客户端<ul><li>Linux客户端域名解析<ul><li><code>vim /etc/hosts</code></li><li><code>172.16.34.150 www.a.org</code> #填写web服务器的IP</li><li><code>172.16.34.150 www.b.org</code> #填写web服务器的IP</li></ul></li><li>Linux客户端域测试网站可用性<ul><li>测试<ul><li><code>yum -y install elinks</code></li><li><code>elinks http://www.a.org</code></li><li><code>elinks http://www.b.org</code></li><li>或者在浏览器中输入：<code>www.a.org</code>或<code>www.b.org</code></li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="动态站点"><a href="#动态站点" class="headerlink" title="动态站点"></a>动态站点</h3><h4 id="部署论坛系统discuz"><a href="#部署论坛系统discuz" class="headerlink" title="部署论坛系统discuz"></a>部署论坛系统discuz</h4><ul><li>安装相关软件并启动<ul><li><code>yum -y install mariadb-server mariadb php php-mysql gd php-gd unzip</code></li><li><code>systemctl start httpd mariadb</code></li><li><code>systemctl enable httpd mariadb</code></li></ul></li><li>安装discuz<ul><li>下载：<code>Discuz_X3.5_SC_UTF8_20231221</code></li><li><code>mkdir -p /webroot/discuz</code></li><li><code>unzip Discuz_X3.5_SC_UTF8_20231221.zip</code></li><li><code>cp -rf upload/* /webroot/discuz/</code></li><li><code>chown -R apache.apache /webroot/discuz/</code> #设置权限，安装httpd的时候默认创建apache用户</li></ul></li><li>配置虚拟主机<ul><li><code>vim /etc/httpd/conf.d/discuz.conf</code></li><li><code>&lt;VirtualHost *:80&gt;</code>#某个虚拟主机，端口号80</li><li><code>ServerName www.discuz.org</code> #服务器名，随便起</li><li><code>DocumentRoot //webroot/discuz</code> #网站的根目录</li><li><code>&lt;/VirtualHost&gt;</code></li><li><code>&lt;Directory &quot;/webroot/discuz&quot;&gt;</code> 网站的根目录</li><li><code>Require all granted</code> #放在其他地方，必须要授权允许访问</li><li><code>&lt;/Directory&gt;</code></li><li>检测配置文件语法，重启服务<ul><li><code>httpd -t</code> #检查语法</li><li><code>systemctl restart httpd</code></li></ul></li></ul></li><li>配置数据库<ul><li><code>mysql</code> #进入数据库</li><li><code>create database discuz;</code> #创建数据库</li><li><code>exit;</code> #退出</li></ul></li><li>测试discuz论坛<ul><li>Linux客户端域名解析<ul><li><code>vim /etc/hosts</code></li><li><code>172.16.34.150 www.discuz.org</code> #填写web服务器的IP</li></ul></li><li>Linux客户端域测试网站可用性<ul><li>测试<ul><li><code>yum -y install elinks</code></li><li><code>elinks http://www.discuz.org</code></li><li>或者在浏览器中输入：<code>http://www.discuz.org</code></li></ul></li></ul></li></ul></li></ul><p><img src="4.png"></p><h2 id="域名服务"><a href="#域名服务" class="headerlink" title="域名服务"></a>域名服务</h2><ul><li>前言：互联网的访问必须要靠IP地址。但是IP地址不好记。所以使用域名服务（DNS，好记），来替代访问的地址<br>当我们用域名访问服务器时，首先会经过DNS服务器拿到域名的IP地址，然后通过IP地址访问服务器。<br><img src="5.png"></li><li>基本概念：<ul><li><p><strong>hosts文件</strong></p><ul><li>起源于unix，用来记域名，实现名字解析，主要为本地主机名，集群节点提供快速解析，平面式集中式数据库，不便于查询和更新。</li><li><code>vim /etc/hosts</code></li><li><code>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</code> #本机的ipv4地址，回环地址</li><li><code>::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</code> #本机的ipv6地址，回环地址</li><li>winndows：<code>C:\Windows\System32\drivers\etc\hosts</code></li><li>Linux：<code>/etc/hosts</code></li></ul></li><li><p><strong>DNS</strong></p><ul><li>Domain Name System(域名系统)，分布式，层次性，作用：实现名字解析，将域名解析为IP</li><li>DNS服务器分布在全世界</li></ul></li><li><p><strong>FQDN</strong></p><ul><li>Fully Qualified Domain Name 完全合格域名&#x2F;全称域名</li><li>主机名.(四级域名).(三级域名).二级域名.顶级域名.(.是根域)</li></ul></li><li><p><strong>命名空间</strong></p><ul><li>命名空间：用于给互联网上的主机命名的机制</li></ul></li></ul></li><li>DNS解析流程<ol><li>例如客户端解析：<a href="http://www.126.com/">www.126.com</a></li><li>客户端询问自己的缓存（包含<strong>hosts</strong>中的记录），如果没有查询到，就将查询发送到**&#x2F;etc&#x2F;resolv.conf**中的DNS服务器</li><li>如果本地DNS服务器对于请求的信息具有权威性，会将权威答案发给客户端</li><li>如果不具有权威性，如果DNS服务器在其缓存中有请求信息，则将非权威答案发给客户端</li><li>如果缓存中没有该查询信息，DNS服务器将搜索权威DNS服务器以查询信息：从根区域开始，按照DNS层次结构向下搜索，直到对于信息具有权威的服务器，为客户端获取答案，DNS服务器将信息传递给客户端，并在自己的缓存中留下一个副本，以备以后查找，同时转发到其他DNS服务器。</li></ol></li><li>递归&#x2F;迭代查询</li><li>正向解析&#x2F;反向解析<ul><li>可以把相对应的域名解析为对应的IP，这就是正向解析</li><li>可以把相应的IP解析为对应的域名，这是反向解析（反垃圾邮件）<br><img src="6.png"></li></ul></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.bilibili.com/video/BV1pz4y1D73n?p=29&vd_source=4470be84aba61145fe9d1690fe726951" title="千锋云计算Linux教程650集，linux系统运维从入门到精通教程（Linux安装极速入门，零基础必备）">千锋云计算Linux教程650集，linux系统运维从入门到精通教程（Linux安装极速入门，零基础必备）</a></li><li><a href="https://blog.csdn.net/qq_34268861/article/details/96436624" title="linux lsof/netstat查看进程和端口号相关命令">linux lsof&#x2F;netstat查看进程和端口号相关命令</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令（四）</title>
      <link href="/2024/04/10/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2024/04/10/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2><h3 id="网络接口名称规则"><a href="#网络接口名称规则" class="headerlink" title="网络接口名称规则"></a>网络接口名称规则</h3><ul><li>网卡命名规则可以参考：<a href="https://blog.csdn.net/MssGuo/article/details/117432536" title="Linux中网卡的命名规则">Linux中网卡的命名规则</a>，<a href="https://developer.aliyun.com/article/609587" title="CentOS7网卡命名规则">CentOS7网卡命名规则</a></li><li>网卡文件：&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-enp0s3</li><li>网卡名称：enp0s3，有多少张网卡，就有多少个网卡文件</li></ul><h3 id="NetworkManager服务"><a href="#NetworkManager服务" class="headerlink" title="NetworkManager服务"></a>NetworkManager服务</h3><ul><li>网络管理器(NetworkManager)是一个动态网络的控制器与配置系统，它用于当网络设备可用时保持设备和连接开启并激活</li><li>默认centos7&#x2F;RHEL7已安装网络管理器，并处于开启状态</li><li>网卡可以工作和这个程序有关</li><li>systemctl status NetworkManager #网络的总程序<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl status NetworkManager</span><br><span class="line">● NetworkManager.service - Network Manager</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/NetworkManager.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Wed 2024-04-10 13:53:46 CST; 1 weeks 1 days ago</span><br><span class="line">     Docs: man:NetworkManager(8)</span><br><span class="line"> Main PID: 715 (NetworkManager)</span><br><span class="line">   CGroup: /system.slice/NetworkManager.service</span><br><span class="line">           └─715 /usr/sbin/NetworkManager --no-daemon</span><br><span class="line"></span><br><span class="line">Apr 10 13:53:47 localhost.localdomain NetworkManager[715]: &lt;info&gt;  [1712728427.0311] d...)</span><br><span class="line">Apr 10 13:53:47 localhost.localdomain NetworkManager[715]: &lt;info&gt;  [1712728427.0317] d...)</span><br><span class="line">Apr 10 13:53:47 localhost.localdomain NetworkManager[715]: &lt;info&gt;  [1712728427.0323] d...)</span><br><span class="line">Apr 10 13:53:47 localhost.localdomain NetworkManager[715]: &lt;info&gt;  [1712728427.0326] m...L</span><br><span class="line">Apr 10 13:53:47 localhost.localdomain NetworkManager[715]: &lt;info&gt;  [1712728427.0487] m...E</span><br><span class="line">Apr 10 13:53:47 localhost.localdomain NetworkManager[715]: &lt;info&gt;  [1712728427.0488] p...S</span><br><span class="line">Apr 10 13:53:47 localhost.localdomain NetworkManager[715]: &lt;info&gt;  [1712728427.0529] d....</span><br><span class="line">Apr 10 13:53:47 localhost.localdomain NetworkManager[715]: &lt;info&gt;  [1712728427.0534] m...L</span><br><span class="line">Apr 10 13:53:47 localhost.localdomain NetworkManager[715]: &lt;info&gt;  [1712728427.0537] m...e</span><br><span class="line">Apr 10 13:53:48 localhost.localdomain NetworkManager[715]: &lt;info&gt;  [1712728428.3807] p...S</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br></pre></td></tr></table></figure></li><li>systemctl status network #网络的子程序<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl status network</span><br><span class="line">● network.service - LSB: Bring up/down networking</span><br><span class="line">   Loaded: loaded (/etc/rc.d/init.d/network; bad; vendor preset: disabled)</span><br><span class="line">   Active: active (exited) since Wed 2024-04-10 13:53:47 CST; 1 weeks 1 days ago</span><br><span class="line">     Docs: man:systemd-sysv-generator(8)</span><br><span class="line"></span><br><span class="line">Apr 10 13:53:47 localhost.localdomain systemd[1]: Starting LSB: Bring up/down networki....</span><br><span class="line">Apr 10 13:53:47 localhost.localdomain network[860]: Bringing up loopback interface:  [...]</span><br><span class="line">Apr 10 13:53:47 localhost.localdomain network[860]: Bringing up interface enp0s3:  [  ...]</span><br><span class="line">Apr 10 13:53:47 localhost.localdomain systemd[1]: Started LSB: Bring up/down networking.</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置网络的工具"><a href="#配置网络的工具" class="headerlink" title="配置网络的工具"></a>配置网络的工具</h3><ul><li>图形界面网络配置</li><li>命令行配置<ul><li>配置文件：vim<ul><li>vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-enp0s3</li></ul></li><li>命令行：nmcli<ul><li>如果没有可以安装：yum -y install NetworkManager</li></ul></li></ul></li><li>图形配置<ul><li>简易图形：nmtui</li><li>图形界面：nm-connection-editor</li></ul></li></ul><h3 id="配置网络参数"><a href="#配置网络参数" class="headerlink" title="配置网络参数"></a>配置网络参数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot; #获取ip地址的方式(自动，手动)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">boot 启动</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">protocol 协议</span></span><br><span class="line">1. dhcp 自动（动态主机配置协议）</span><br><span class="line">2. none 手动</span><br><span class="line">3. static 静态</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;enp0s3&quot; #网卡名</span><br><span class="line">UUID=&quot;baccb250-8bcb-4d43-af23-877eecfb2b74&quot;#网卡的id号</span><br><span class="line">DEVICE=&quot;enp0s3&quot; #网卡名</span><br><span class="line">ONBOOT=&quot;yes&quot; #是否开机自启动</span><br><span class="line">IPADDR=&quot;172.16.34.150&quot; #ip地址，其是一台主机在网络中的标识，同一个网段可以直接通信</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot; #子网掩码，用来确定网段和主机号</span><br><span class="line">GATEWAY=&quot;172.16.34.1&quot;#网关，也叫默认路由，路由器或者三级交换机的地址，出网用的</span><br><span class="line">DNS1=&quot;114.114.114.114&quot;#DNS服务器的地址</span><br><span class="line">DNS2=&quot;8.8.8.8&quot;#DNS服务器的地址</span><br></pre></td></tr></table></figure><h3 id="查看ip地址"><a href="#查看ip地址" class="headerlink" title="查看ip地址"></a>查看ip地址</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br><span class="line">[root@localhost ~]# ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: enp0s3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 08:00:27:47:34:99 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.16.34.150/24 brd 172.16.34.255 scope global noprefixroute enp0s3</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 2400:dd01:102e:34:9950:438b:92ce:a5a2/64 scope global noprefixroute dynamic </span><br><span class="line">       valid_lft 2591908sec preferred_lft 604708sec</span><br><span class="line">    inet6 fe80::649e:1963:25da:ce15/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><h3 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h3><p>主机名用来区别主机</p><ul><li>查看主机名<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostname</span><br><span class="line">[root@localhost ~]# hostname</span><br><span class="line">localhost.localdomain</span><br><span class="line">[root@localhost ~]# </span><br></pre></td></tr></table></figure></li><li>配置主机名<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname master</span><br></pre></td></tr></table></figure></li><li>查看和配置主机名<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/hostname</span><br><span class="line">master</span><br></pre></td></tr></table></figure></li></ul><h3 id="网络测试工具"><a href="#网络测试工具" class="headerlink" title="网络测试工具"></a>网络测试工具</h3><ul><li>测试工具<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a #查看ip</span><br><span class="line">ip route #查看路由，查看网关</span><br><span class="line">ip neigh #查看邻居</span><br><span class="line">ping 网址 #查看这个网址通不通 ping(Packet Internet Groper)，因特网包探索</span><br><span class="line">ping 127.0.0.1 #ping自己</span><br></pre></td></tr></table></figure></li><li>端口和服务<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ss -tnl #展示TCP的套接字，show TCP socket，ss #查看网络状态，t表示TCP，n表示数字，l表示列出来</span><br><span class="line">[root@localhost ~]# ss -tnl</span><br><span class="line">State      Recv-Q Send-Q Local Address:Port               Peer Address:Port              </span><br><span class="line">LISTEN     0      128               *:22                            *:*                  </span><br><span class="line">LISTEN     0      100       127.0.0.1:25                            *:*                  </span><br><span class="line">LISTEN     0      128            [::]:22                         [::]:*                  </span><br><span class="line">LISTEN     0      100           [::1]:25                         [::]:* </span><br></pre></td></tr></table></figure>port 就是端口号，端口号用于区分进程，端口号是唯一的从：0-65535</li></ul><h3 id="初始化服务器"><a href="#初始化服务器" class="headerlink" title="初始化服务器"></a>初始化服务器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">关闭selinux 防火墙</span><br><span class="line">setenforce 0 #临时关闭</span><br><span class="line">vim /etc/sysconfig/selinux #永久关闭</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure><h3 id="通信模型"><a href="#通信模型" class="headerlink" title="通信模型"></a>通信模型</h3><h4 id="OSI模型"><a href="#OSI模型" class="headerlink" title="OSI模型"></a>OSI模型</h4><ul><li>简介<ul><li><strong>OSI</strong>：Open System Interconnection 开放系统互联模型</li><li>开放式系统互联<ul><li>国际标准化组织(ISO)制定</li><li>定义了不同计算机互联的标准</li><li>设计和描述计算机网络通信的框架</li><li>全世界网络通信工作分为7层</li><li>制定OSI的优势<ul><li>开放</li><li>厂商兼容</li><li>易于理解和学习</li><li>模块化工程</li><li>故障排除</li></ul></li></ul></li></ul></li><li>OSI7层次结构&#x2F;功能<ul><li><strong>应用层</strong>：应用程序，如qq，微信，爱奇艺，由应用程序产生原始数据</li><li><strong>表示层</strong>：对原始数据采用什么格式，压缩，加密，对数据进行安全快速传递</li><li><strong>会话层</strong>：会话，全双工&#x2F;半双工通信，双工指得是双方通信，全双工通信例如电话，两边都可以同时通信。半双工指得是同时只能一方传递信息，如对讲机。同时关注会话信息，如身份信息</li><li><strong>传输层</strong>：&#x2F;分段&#x2F;重组&#x2F;端口号，提升传输效率。分段指得是把数据拆成一段一段的，重组指得是将分段的数据按顺序重新组合，确定端口号。</li><li><strong>网络层</strong>：IP地址&#x2F;寻址&#x2F;路由，为数据加上IP地址，寻址路由，指引数据的传递方向</li><li><strong>数据链路层</strong>：MAC地址&#x2F;局域网，加上MAC地址，负责局域网的数据传递</li><li><strong>物理层</strong>：传输介质&#x2F;比特流，利用电流&#x2F;光&#x2F;无线信号等进行传输</li><li><strong>记忆的方式</strong>：应聘者的表格会传到您的树屋里，应表会传网数物</li></ul></li><li>TCO&#x2F;IP5层结构&#x2F;功能<ul><li><strong>应用层</strong>：应用层，表示层和会话层组合在一起<ul><li>应用程序，如qq，微信，爱奇艺，由应用程序产生原始数据</li><li>对原始数据采用什么格式，压缩，加密，对数据进行安全快速传递</li><li>会话，全双工&#x2F;半双工通信，双工指得是双方通信，全双工通信例如电话，两边都可以同时通信。半双工指得是同时只能一方传递信息，如对讲机。同时关注会话信息，如身份信息</li></ul></li><li><strong>传输层</strong>：&#x2F;分段&#x2F;重组&#x2F;端口号，提升传输效率。分段指得是把数据拆成一段一段的，重组指得是将分段的数据按顺序重新组合，确定端口号。</li><li><strong>网络层</strong>：IP地址&#x2F;寻址&#x2F;路由，为数据加上IP地址，寻址路由，指引数据的传递方向</li><li><strong>数据链路层</strong>：MAC地址&#x2F;局域网，加上MAC地址，负责局域网的数据传递</li><li><strong>物理层</strong>：传输介质&#x2F;比特流，利用电流&#x2F;光&#x2F;无线信号等进行传输</li></ul></li><li>TCO&#x2F;IP4层结构&#x2F;功能<ul><li><strong>应用层</strong>：应用层，表示层和会话层组合在一起<ul><li>应用程序，如qq，微信，爱奇艺，由应用程序产生原始数据</li><li>对原始数据采用什么格式，压缩，加密，对数据进行安全快速传递</li><li>会话，全双工&#x2F;半双工通信，双工指得是双方通信，全双工通信例如电话，两边都可以同时通信。半双工指得是同时只能一方传递信息，如对讲机。同时关注会话信息，如身份信息</li></ul></li><li><strong>传输层</strong>：&#x2F;分段&#x2F;重组&#x2F;端口号，提升传输效率。分段指得是把数据拆成一段一段的，重组指得是将分段的数据按顺序重新组合，确定端口号。</li><li><strong>网络层</strong>：IP地址&#x2F;寻址&#x2F;路由，为数据加上IP地址，寻址路由，指引数据的传递方向</li><li><strong>网络接口层</strong>：数据链路层和物理层结合在一起<ul><li>MAC地址&#x2F;局域网，加上MAC地址，负责局域网的数据传递</li><li>传输介质&#x2F;比特流，利用电流&#x2F;光&#x2F;无线信号等进行传输</li></ul></li></ul></li><li>OSI模型和TCP&#x2F;IP模型的区别<ul><li><strong>OSI</strong><ul><li>推出时间早</li><li>只有理论，没有实践</li></ul></li><li><strong>TCP&#x2F;IP</strong><ul><li>TCP&#x2F;IP：传输控制协议&#x2F;互联网协议(Tranmission Control Protocol&#x2F;Internet Protocol)</li><li>美国军方由时间，总结出来的理论</li><li>当今通信的标准</li></ul></li></ul></li><li>TCP&#x2F;IP数据单元&#x2F;data unit(DU)<ul><li><strong>应用层数据</strong>：应用数据单元，APDU：Application Protocol Data Unit，应用协议数据单元</li><li><strong>传输层数据</strong>：segment DU 分段数据</li><li><strong>网络层数据</strong>：package DU 包数据</li><li><strong>数据链路层数据</strong>：frame DU 帧数据</li><li><strong>物理层数据</strong>：bit DU 比特数据</li></ul></li><li>封装和解封装<ul><li>数据通过网络进行传输，在发送端从高处一层一层向下发送，如果一个主机要传输数据到别的主机，先把数据装到一个特殊协议报头中，这个过程叫封装。</li><li>简介：<ul><li>信息从一台计算机产生，经过TCP&#x2F;IP模型嘉庚。后传输到另一台计算机</li><li>这个通信过程就像，快递从厂家包装到顾客收到货物拆包一样</li><li>我们把这个通信过程，称作数据的封装（发送）和数据解封装（接收）。</li></ul></li><li><strong>应用层</strong>：应用层，表示层和会话层组合在一起<ul><li>应用程序，如qq，微信，爱奇艺，由应用程序产生原始数据</li><li>对原始数据采用什么格式，压缩，加密，对数据进行安全快速传递</li><li>会话，全双工&#x2F;半双工通信，双工指得是双方通信，全双工通信例如电话，两边都可以同时通信。半双工指得是同时只能一方传递信息，如对讲机。同时关注会话信息，如身份信息</li></ul></li><li><strong>传输层</strong>：&#x2F;分段&#x2F;重组&#x2F;端口号，提升传输效率。分段指得是把数据拆成一段一段的，重组指得是将分段的数据按顺序重新组合，确定端口号。</li><li><strong>网络层</strong>：IP地址&#x2F;寻址&#x2F;路由，为数据加上IP地址，寻址路由，指引数据的传递方向</li><li><strong>数据链路层</strong>：MAC地址&#x2F;局域网，加上MAC地址，负责局域网的数据传递</li><li><strong>物理层</strong>：传输介质&#x2F;比特流，利用电流&#x2F;光&#x2F;无线信号等进行传输</li><li>数据封装的过程大致如下<ol><li>（应用层）用户信息转换为数据，以便在网络上传输</li><li>（传输层）数据转换为数据段，并在发送方和接收方主机之间建立一条可靠的连接</li><li>（网络层）数据段转化为数据包或者数据报，并在报头上放上逻辑地址，这样每一个数据包都可以通过互联网进行传输</li><li>（数据链路层）数据包或数据报转化为数据帧，以便在本地网络中传输。在本地网段上，使用硬件地址唯一标识每台主机</li><li>（物理层）：数据帧转化为比特列，并采用数字编码和时钟方案进行传输</li></ol></li></ul></li></ul><h4 id="TCP-IP协议族"><a href="#TCP-IP协议族" class="headerlink" title="TCP&#x2F;IP协议族"></a>TCP&#x2F;IP协议族</h4><ul><li><strong>TCP&#x2F;IP简介</strong><ul><li>TCP&#x2F;IP：传输控制协议&#x2F;互联网协议(Tranmission Control Protocol&#x2F;Internet Protocol)</li></ul></li><li>5层模型协议分类<ul><li><strong>应用层</strong><ul><li><strong>HTTP</strong>：超文本传输协议&#x2F;网站，如淘宝</li><li><strong>Telnet</strong>：远程连接协议&#x2F;远程控制，如QQ远程桌面</li><li><strong>FTP</strong>：文件传输协议，如电影天堂</li><li><strong>SMTP</strong>：简单邮件传输协议&#x2F;Email，如QQ邮箱</li><li><strong>DNS</strong>：域名服务&#x2F;WWW，如baiyun.com</li></ul></li><li><strong>传输层</strong><ul><li>TCP&#x2F;传输控制协议&#x2F;可靠</li><li>UDP&#x2F;用户数据报协议&#x2F;不可靠</li></ul></li><li><strong>网络层</strong><ul><li>IP&#x2F;互联网协议&#x2F;寻址</li><li>ICMP&#x2F;网络消息管理协议</li></ul></li><li><strong>数据链路层</strong><ul><li>MAC</li></ul></li><li><strong>物理层</strong><ul><li>网线</li><li>光纤</li></ul></li></ul></li></ul><h4 id="单位转换"><a href="#单位转换" class="headerlink" title="单位转换"></a>单位转换</h4><ul><li>比特&#x3D;bit&#x3D;b&#x3D;1&#x2F;0</li><li>字节&#x3D;byte&#x3D;B&#x3D;8bit</li><li>1KB&#x3D;1024B</li><li>1MB&#x3D;1024KB</li><li>1GB&#x3D;1024MB</li><li>1TB&#x3D;1024GB</li></ul><h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4><ul><li>信号<ul><li><strong>模拟信号</strong>：不断变换的物理量，适用于电话网络</li><li><strong>数字信号</strong>：量子恒定的物理量，高电压低电压之类的，适用于计算机网络<ul><li>优点：抗噪声和抗衰减比较强</li></ul></li></ul></li><li>介质<ul><li><p>双绞线(EIA&#x2F;TIA568标准)<br><img src="2.jpeg"><br><img src="3.png"></p><ul><li>外形：八根线芯，两两互绞</li><li>功能分类<ul><li>屏蔽型：网线的塑料由金属网包裹</li><li>非屏蔽型：网线只用塑料包裹</li></ul></li><li>速率分类<ul><li>cat 5 &#x2F;5类线：10M-100M</li><li>cat 5e &#x2F;超五类线：10M-100M</li><li>cat 6</li></ul></li><li>接口<ul><li>RJ45&#x2F;水晶头，如上图</li><li>线序：EIA&#x2F;TIA568B，橙白，橙，绿白，蓝，蓝白，绿，棕白，棕</li></ul></li></ul></li><li><p>光纤<br><img src="4.png"></p><ul><li>多模&#x2F;单模</li><li>纤芯粗&#x2F;纤芯细</li><li>低速&#x2F;高速</li><li>近&#x2F;远</li><li>便宜&#x2F;贵</li><li>FC&#x2F;ST&#x2F;LC接口</li></ul></li></ul></li></ul><p><img src="5.png"></p><h4 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h4><ul><li>功能：负责局域网的数据传递</li><li>地址<ul><li>MAC地址：Media Access Control Address，媒体访问控制地址，MAC地址也叫物理地址、硬件地址，由网络设备制造商生产时烧录在网卡。</li><li>48位二进制数或者12位16进制数</li><li>示例<ul><li>08:00:27:47:34:99</li><li>前六位是厂商标识</li><li>后六位是硬件标识</li></ul></li></ul></li><li>帧封装<br><img src="6.png"><ul><li>帧的组成：目标MAC&#x2F;&#x2F;源地址&#x2F;&#x2F;类型&#x2F;&#x2F;数据&#x2F;&#x2F;CRC，CRC是循环冗余校验和，用于数据校验</li></ul></li><li><strong>交换机工作原理</strong><ul><li>学习&#x2F;广播&#x2F;转发&#x2F;更新<br><img src="7.png"><ul><li><strong>学习</strong>：如上图在交换机中存在一个MAC地址表，绑定每台电脑的MAC地址和交换机的端口，当我们用一个新的交换机刚把电脑连上，这时交换机中的MAC地址表是空的。考虑这时PCA向PCD发送消息，交换机会把PCA的MAC地址和对应的端口号填进MAC地址表中，然后向除了PCA的端口进行<strong>广播</strong>，PCB和PCC会把广播信息丢弃，PCD会收到信息，然后PCD向PCA发送消息，MAC地址表记录PCD和对应的端口号，交换机通过MAC地址表向PCA传递消息，至此MAC地址表中就有了PCA和PCD的MAC地址和端口号。</li><li><strong>转发</strong>：当PCA再次向PCD发送消息时，交换机通过查MAC地址表直接转发消息给PCD，其他设备就不会收到信息了，如下图。</li><li><strong>更新</strong>：MAC地址表中的每一条信息都存在失效时间，如果一段时间内表中的某条信息没有更新，该条信息就会清除，然后重新记录新的信息。</li></ul></li></ul></li></ul><p><img src="8.png"></p><ul><li>VLAN<ul><li>简介：Virtual Local Area Network (虚拟局域网)</li><li>功能：通过软件，将连接在同一台交换机上的客户机划分在不同的局域网下，同一VLAN下的设备可以互相通信，不同VLAN下的设备不能通信，如下图所示，PCA和PCB在VLAN10，PCC和PCD在VLAN20，交换机默认所有的端口都位于VLAN1，同时VLAN0也被系统征用，因此VLAN需要从VLAN2开始设置。<br><img src="9.png"></li></ul></li><li>TRUNK<ul><li>简介：干道</li><li>场景：我有两台交换机，A交换机有VLAN10和VLAN20，B交换机也有VLAN10和VLAN20，我现在需要将A,B交换机连接起来，使得VLAN10可以互相通信，VLAN20可以互相通信，注意交换机的端口默认都在VLAN1，这个时候可以使用两条线来解决问题，但是如果VLAN越来越多，那就不可行了，那怎么样才可以用一条线解决这个问题呢？这就需要TRUNK技术。</li><li>功能：在一条线缆上传递多个VLAN信息，在线路的两端的交换机配置TRUNK。</li><li>原理：TRUNK技术为信息打上VLAN标签，当A交换机的VLAN10要向B交换机的VLAN10发消息时，TRUNK技术会在给信息打上VLAN10标签，这时传到B交换机，那么B交换机就只会发给VLAN10的主机，主机收到的信息都是不带VLAN标签的，接口会去除VLAN标签。VLAN标签只存在于TRUNK线路，TRUNK线路不属于任何VLAN。</li><li>总结：<ul><li>交换机接口模式分为access和trunk。</li><li>access是指定接口连接的是主机，访问某个VLAN。</li><li>trunk是指定接口连接的是交换机，需要通过多个VLAN的数据，承载多个VLAN。</li></ul></li></ul></li></ul><p><img src="10.png"></p><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><ul><li><p>目的：分割广播域，便于寻址。</p></li><li><p><strong>IP地址</strong></p><ul><li>简介<ul><li>32位二进制数</li><li>IP用于主机在互联网中的标记</li><li>4组十进制表示<ul><li>IP地址每八位为一组，用.进行分割，用十进制标识 </li><li>192.168.0.1</li></ul></li></ul></li><li>分类：用第一组进行分类<ul><li>A类(1~126)</li><li>B类(128~191)</li><li>C类(192~223)</li><li>D类(224~239) 组播</li><li>E类(240~255) 科研</li><li>127：回环地址，每个计算机上都有这个地址，查看自己的ip通信有没有用，用于测试本机。</li></ul></li><li>私有IP分类<ul><li>简介：由于IP地址有限，所以会在路由器的出网口&#x2F;进网口设置一个公共IP也就是上面所用到的IP，中国是使用的上述C类IP，然后在家庭或者企业内部使用私有IP，有可能两个人会出现私有IP相同的情况，当我们要和外界通信时，会把私有IP换成公有IP地址和外界通信，也就是说很多人会公用一个公有IP，公有IP不能相同，举个形象的比喻，把IP比作一双鞋，在家庭或公司内部我们每个人都穿自己的鞋，然后要从家里出去或者出去公司，去外部就需要换上公共的鞋，想想都觉得，不可描述，不可描述。</li><li>私有IP也有分类：<ul><li>A类：10.0.0.0~10.255.255.255</li><li>B类：172.16.0.0~172.31.255.255</li><li>C类：192.168.0.0~192.168.255.255</li><li>除了上述私有IP地址，其他IP地址就是公有IP地址，公有IP地址可以售卖。</li></ul></li></ul></li></ul></li><li><p><strong>子网掩码</strong></p><ul><li>作用：运算出IP地址的网络部分和主机号，和IP地址等长，与IP地址同时出现，相同网段的主机可以互相通信，一定要配子网掩码。</li><li>分类：<ul><li>A类：255.0.0.0</li><li>B类：255.255.0.0</li><li>C类：255.255.255.0</li></ul></li><li>方法：<ul><li>IP地址与子网掩码按位做<strong>逻辑与</strong>得到网段</li><li>更多的关于IP和子网掩码的信息参考：<a href="https://hoochanlon.github.io/helpdesk-guide/enhance/net/neta.html#%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81%E5%88%92%E5%88%86%E7%9A%84ip%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80" title="一篇全文让你彻底理清IP地址、子网掩码、网关">一篇全文让你彻底理清IP地址、子网掩码、网关</a></li></ul></li><li>IP地址的可用范围<ul><li>同一网段第一个IP地址不可用，其作用是区分网段</li><li>同一网段最后一个IP地址不可用，其作用是用来广播</li><li>以172.168.1.0&#x2F;24网段为例：总数有256个，从172.168.1.0~172.168.1.255，可用IP为254，其中172.168.1.0为网段，172.168.1.255为广播地址。一般会把同一网段的第二个地址，在这里是172.168.1.1设为网关的地址，也就是路由器的IP地址，倒数第二个IP也别用，在这里是172.168.0.254。</li></ul></li><li>相同网段的主机可以互相通信</li><li>不相同网段的主机不能互相通信</li><li>C类地址最多只能用254个IP，如果需要更多的IP，可以改子网掩码，也可以使用B类地址，约65535个地址。</li></ul></li><li><p><strong>网络层封装</strong></p><ul><li>IP数据包的格式：数据前有20个字节<br><img src="11.png"></li><li>计算发现，访问的地址是同一网段，直接给相应的交换机</li><li>计算发现，访问的地址是其他网段，把这个数据包丢给网关（路由器）</li></ul></li><li><p><strong>网关</strong> ：计算发现，访问的地址是其他网段，把这个数据包丢给网关，网关会把数据包传出去</p></li><li><p><strong>路由器的工作原理</strong></p><ul><li>不同网络通信有路由器（分割网络，连接不同的网络）</li><li>功能：路由寻址，主机A有多条路径到主机B，所谓条条大路通罗马<br><img src="12.png"></li><li>工作原理：路由器存着路由表，路由器只看网段，不看IP地址，根据网段和自身的接口进行跳转。<br><img src="13.png"></li><li>路由表的形成<br><img src="14.png"><ul><li>直连网段：为路由器的接口配上IP，就会自动形成一个直连网段路由，一个接口管理一个网段，如上图</li><li>非直连网段：自己配置非直连网段，静态路由配置</li></ul></li></ul></li><li><p><strong>网络测试工具</strong><br>检查网络是否通畅</p><ul><li><code>ping</code>命令<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br><span class="line">ping -c 3 www.baidu.com #发送和收回3个包</span><br><span class="line">ping -f www.baidu.com #极限ping</span><br><span class="line">ping -i 0.01 www.baidu.com #间隔0.01秒ping，可以ping的很快</span><br><span class="line">ping -q www.baidu.com #静默ping</span><br><span class="line">ping -i 0.01 -c 1000 www.baidu.com #发1000个包，每隔0.01秒发送</span><br></pre></td></tr></table></figure></li><li><code>traceroute</code>命令<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可以查看主机到互联网中的一台主机走什么样的路径，排查故障</span></span><br><span class="line">traceroute [参数] [主机]</span><br><span class="line">traceroute www.baidu.com</span><br><span class="line">traceroute -m 10 www.baidu.com #只跳10次</span><br><span class="line">traceroute -n  www.baidu.com #显示IP，不查主机名</span><br><span class="line">traceroute -q 4  www.baidu.com #发送4个包</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.bilibili.com/video/BV1pz4y1D73n?p=29&vd_source=4470be84aba61145fe9d1690fe726951" title="千锋云计算Linux教程650集，linux系统运维从入门到精通教程（Linux安装极速入门，零基础必备）">千锋云计算Linux教程650集，linux系统运维从入门到精通教程（Linux安装极速入门，零基础必备）</a></li><li><a href="https://hoochanlon.github.io/helpdesk-guide/enhance/net/neta.html#%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81%E5%88%92%E5%88%86%E7%9A%84ip%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80" title="一篇全文让你彻底理清IP地址、子网掩码、网关">一篇全文让你彻底理清IP地址、子网掩码、网关</a></li><li><a href="https://blog.csdn.net/MssGuo/article/details/117432536" title="Linux中网卡的命名规则">Linux中网卡的命名规则</a></li><li><a href="https://developer.aliyun.com/article/609587" title="CentOS7网卡命名规则">CentOS7网卡命名规则</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令（三）</title>
      <link href="/2024/04/10/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2024/04/10/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="取别名"><a href="#取别名" class="headerlink" title="取别名"></a>取别名</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias ls = &#x27;ls -l&#x27; #给ls起别名，输入ls 相当于 ls -l</span><br></pre></td></tr></table></figure><h2 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat 1.txt | wc -l #-l统计行数</span><br><span class="line">cat 1.txt | wc -c #-l统计字节数</span><br><span class="line">cat 1.txt | wc -m #-l统计字符数</span><br></pre></td></tr></table></figure><h2 id="下载软件包"><a href="#下载软件包" class="headerlink" title="下载软件包"></a>下载软件包</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo #-O 指定下载目录</span><br><span class="line">wget url #下载</span><br><span class="line">wget -O 地址 url #下载</span><br></pre></td></tr></table></figure><h2 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h2><ul><li>简介<ul><li>which：命令查找</li><li>whereis：命令查找，同上</li><li>find：文件查找，针对文件名</li><li>locate：文件查找，依赖数据库</li></ul></li><li>实例</li></ul><ol><li>which&#x2F;whereis<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">which ls #依赖PATH环境变量查找命令</span><br><span class="line">[root@localhost ~]# which ls</span><br><span class="line">alias ls=&#x27;ls --color=auto&#x27;</span><br><span class="line">/usr/bin/ls</span><br><span class="line">whereis ls</span><br><span class="line">[root@localhost ~]# whereis ls</span><br><span class="line">ls: /usr/bin/ls /usr/share/man/man1/ls.1.gz</span><br></pre></td></tr></table></figure></li><li>locate<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">locate 88888.txt #找不到，需要重启系统因为文件是我刚创建</span><br><span class="line">updatedb #更新数据库</span><br><span class="line">locate 88888.txt</span><br></pre></td></tr></table></figure></li><li>find<br>语法：find [path] [options] [expression] [action]<br>语法：命令  路径   选项       表达式       动作<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find /etc -name  a.txt</span><br><span class="line">命令  路径  选项  表达式</span><br><span class="line">find /etc -name hosts</span><br><span class="line">find /etc -iname HOSTS #-i 忽略大小写</span><br><span class="line">find /etc -iname hos* #*表示后面的都行，以hos开头就行</span><br><span class="line">find /etc -size +5M # -size 以大小来查找，查找大于5M的文件</span><br><span class="line">find /etc -size 5M # -size 以大小来查找，查找等于5M的文件</span><br><span class="line">find /etc -size -5M # -size 以大小来查找，查找小于5M的文件</span><br><span class="line">[root@localhost ~]# find /etc -size +5M</span><br><span class="line">/etc/udev/hwdb.bin</span><br><span class="line">[root@localhost ~]# ls -h -l /etc/udev/hwdb.bin #-h 人性化显示</span><br><span class="line">-r--r--r--. 1 root root 8.5M Apr  9 13:38 /etc/udev/hwdb.bin</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">按目录深度查找</span></span><br><span class="line">-maxdepth #按目录深度查找</span><br><span class="line">-a #表示and</span><br><span class="line">find / -maxdepth 3 -a -name ifcfg* #在/下的3级目录查找名字以ifcfg开头的</span><br><span class="line">[root@localhost ~]# find / -maxdepth 4 -a -name ifcfg*</span><br><span class="line">/etc/sysconfig/network-scripts/ifcfg-lo</span><br><span class="line">/etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按属主，属组查找</span></span><br><span class="line">find /home -user jack #-user 按属主找</span><br><span class="line">find /home -group jack #-user 按属组找</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按文件类型查找</span></span><br><span class="line">find /dev -type b #-type按文件类型查找，</span><br><span class="line">find /dev -type f # f为普通文件</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按文件权限查找</span></span><br><span class="line">find / -perm 714 -ls# 查看以714为权限的文件 -perm就是按权限 -ls就是动作，功能就是 ls -l</span><br><span class="line">[root@localhost ~]# find . -perm 714 -ls</span><br><span class="line">33574996    0 -rwx--xr--   1 root     root            0 Apr 10 10:22 ./1.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后处理的动作</span></span><br><span class="line">-print #打印，默认就是-print</span><br><span class="line">-delete #删除</span><br><span class="line">find . -perm 714 -delete #找到后删除</span><br><span class="line">find /etc/ -name ifcfg* -ok cp -rvf &#123;&#125; /tmp \;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-ok 表示后面接参数</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&#123;&#125;表示前面找到的内容</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-rvf强制递归复制，并显示</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">\; <span class="comment">#表示语句结束</span></span></span><br></pre></td></tr></table></figure></li></ol><h2 id="文件打包压缩"><a href="#文件打包压缩" class="headerlink" title="文件打包压缩"></a>文件打包压缩</h2><ol><li>简介<br>tar命令是unix&#x2F;linux系统中备份文件的可靠方法，几乎可以工作于任何环境中，它的使用权限是所有用户，建议针对目录</li><li>打包<br>语法： tar 选项 包名 需要打包的文件或文件夹<br>语法：tar -cf etc.tar &#x2F;etc<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -cf etc.tar /etc # -c(create)压缩, -f(file) -f指定文件名 一定要放到末尾</span><br><span class="line">tar -czf etc-gzip.tar.gz /etc # -z 利用gzip工具进行压缩</span><br><span class="line">tar -czvf etc-gzip.tar.gz /etc # -z 利用gzip工具进行压缩，-v可视化</span><br><span class="line">-rw-r--r--. 1 root root  10M Apr 10 11:04 etc-gzip.tar.gz</span><br><span class="line">-rw-r--r--. 1 root root  29M Apr 10 11:01 etc.tar</span><br><span class="line">上述两个的文件大小不一样</span><br><span class="line">-z 用gzip压缩</span><br><span class="line">-j 用bzip2进行压缩.tar.bz</span><br><span class="line">-J 用xzip进行压缩.tar.xz</span><br><span class="line">由上往下体积越来越小，但是压缩时间越来越长</span><br></pre></td></tr></table></figure></li><li>解压<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar  -xvf etc-gzip.tar.gz #解压所有的都可以用这个 </span><br><span class="line">tar  -xzvf etc-gzip.tar.gz #解压缩 -z利用gzip工具进行解压缩 -x表示解压 -v表示可视 -f指定文件名</span><br><span class="line">tar  -xvf etc-gzip.tar.gz -C /tmp #解压到tmp，-C指定路径</span><br></pre></td></tr></table></figure></li></ol><h2 id="软件管理"><a href="#软件管理" class="headerlink" title="软件管理"></a>软件管理</h2><h3 id="RPM包"><a href="#RPM包" class="headerlink" title="RPM包"></a>RPM包</h3><ul><li>概述</li></ul><ol><li>RPM Package Manager （原Red HatPackage Manager，现在是一个递归缩写）</li><li>由Red Hat 公司提出，被众多Linux发行版本所采用</li><li>为二进制（binary code）无需编译，可以直接使用</li><li>无法个人设置，开关功能</li><li>软件包实例（注意后缀）：mysql-community-common-5.7-12-1.el7.x86_64.rpm，软件+组件+版本+后缀</li><li>认识RPM包</li></ol><ul><li>zip-3.0-11.el7.x86_64.rpm</li><li>软件名：zip</li><li>版本号：3.0-11</li><li>发布版本（Release8&#x2F;6&#x2F;7）：el7，Enterprise Linux7的缩写</li><li>系统平台(32&#x2F;64)：x86_64</li><li>文件后缀：rpm</li></ul><h3 id="源码包"><a href="#源码包" class="headerlink" title="源码包"></a>源码包</h3><ul><li>概述</li></ul><ol><li>source code 需要通过GCC，C++编译环境编译才可以运行</li><li>可以个人设置，开关功能，配置操作复杂</li><li>软件包实例：nginx-1.8.1.tar.gz</li><li>认识源码包</li></ol><ul><li>nginx：软件名</li><li>1.8.1：版本</li><li>tar.gz：压缩</li></ul><h3 id="RPM包管理"><a href="#RPM包管理" class="headerlink" title="RPM包管理"></a>RPM包管理</h3><h4 id="yum工具"><a href="#yum工具" class="headerlink" title="yum工具"></a>yum工具</h4><ul><li>简介</li></ul><ol><li>yum 全称Yellow dog Updater Modifited</li><li>是一个在Fedora和RedHat以及centos中的shell前段软件管理器</li><li>基于RPM包管理，能够从指定的服务器自动下载RPM包并安装</li><li>可以自动处理依赖关系，并且一次安装所有依赖的软件包，无需繁琐的一个一个安装。</li><li>yum本地源：系统安装的光盘（去哪里下载）</li></ol><ul><li>目的：告诉系统去哪里下载软件，通过系统光盘获得软件包，并安装软件</li><li>观察yum核心配置目录:&#x2F;etc&#x2F;yum.repos.d&#x2F;<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ls /etc/yum.repos.d/</span><br><span class="line">CentOS-Base.repo       CentOS-fasttrack.repo  CentOS-Vault.repo</span><br><span class="line">CentOS-CR.repo         CentOS-Media.repo      CentOS-x86_64-kernel.repo</span><br><span class="line">CentOS-Debuginfo.repo  CentOS-Sources.repo</span><br></pre></td></tr></table></figure></li><li>备份官方源，并删除<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/yum.repos.d/* </span><br></pre></td></tr></table></figure></li><li>编写本地yum库配置文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/dvd.repo #名字自己随便取一定要用.repo的后缀名</span><br><span class="line">[dvd] #某一个库的名称，可随便取，中括号[]必须</span><br><span class="line">name=dvd #库的名称的说明，可随便取，name是必须的</span><br><span class="line">baseurl=file:///mnt/cdrom #下载库的具体地址，重要，前//是网页的格式，/mnt指得在在自己的/mnt目录</span><br><span class="line">gpgcheck=0 #是否进行gpg检查，为0表示不需要验证，为1表示需要验证</span><br><span class="line">enable = 0# 表示这个库不能用，等于1表示可以用，默认为1</span><br></pre></td></tr></table></figure></li><li>挂载安装光盘<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">记得把光盘通电插到电脑上</span><br><span class="line">mkdir /mnt/cdrom</span><br><span class="line">mount /dev/cdrom /mnt/cdrom #把光驱挂载到/mnt/cdrom</span><br></pre></td></tr></table></figure></li><li>使用yum安装和卸载程序<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install httpd #安装httpd -y 所有都回答yes</span><br><span class="line">systemctl start httpd</span><br><span class="line">systemctl stop firewalld #关闭防火墙</span><br><span class="line">systemctl disable firewalld #禁用防火墙，开机不启动</span><br></pre></td></tr></table></figure></li><li>使用yum管理rpm包<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装</span></span><br><span class="line">yum -y install httpd vsftpd #全新安装</span><br><span class="line">yum -y reinstall httpd vsftpd #重新安装</span><br><span class="line">yum -y update httpd vsftpd #更新升级</span><br><span class="line">yum -y update #升级系统</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查询</span></span><br><span class="line">yum list #查询下载的所有包</span><br><span class="line">yum list httpd # 列出下载的包httpd，后面有@表明已经安装，没有@表示没有安装</span><br><span class="line">yum -y remove httpd #卸载软件包</span><br></pre></td></tr></table></figure></li><li>编写远程yum库配置文件</li></ul><ol><li>清理原有的yum配置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/yum.repos.d #先保存再清除</span><br></pre></td></tr></table></figure></li><li>下载阿里官网配置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo #下载基础包</span><br><span class="line"></span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo #下载扩展包</span><br></pre></td></tr></table></figure></li><li>更新配置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">yum clean all 的主要作用是清除所有已下载软件包和元数据（metadata）以及临时文件的缓存</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">yum makecache的作用是将服务器上的软件包信息缓存到本地，以提高搜索和安装软件的速度</span></span><br></pre></td></tr></table></figure></li><li>查看，下载安装<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum repolist</span><br><span class="line">[root@localhost ~]# yum repolist</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.aliyun.com</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">repo id              repo name                                           status</span><br><span class="line">base/7/x86_64        CentOS-7 - Base - mirrors.aliyun.com                10,072</span><br><span class="line">epel/x86_64          Extra Packages for Enterprise Linux 7 - x86_64      13,798</span><br><span class="line">extras/7/x86_64      CentOS-7 - Extras - mirrors.aliyun.com                 526</span><br><span class="line">updates/7/x86_64     CentOS-7 - Updates - mirrors.aliyun.com              5,802</span><br><span class="line">repolist: 30,198</span><br></pre></td></tr></table></figure></li></ol><h4 id="rpm工具"><a href="#rpm工具" class="headerlink" title="rpm工具"></a>rpm工具</h4><ul><li>前言</li></ul><ol><li>管理红帽系统&#x2F;centos系统，rpm包的基本工具</li><li>yum功能相同</li><li>安装<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh 包名 #需要先下载包，-i 安装，-v 可视化，打印更多信息，-h 打印百分比，和-v配合使用</span><br></pre></td></tr></table></figure></li><li>查询<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -q wget #查询软件包</span><br></pre></td></tr></table></figure></li><li>卸载<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -evh 软件包 #先查询，再删除 -e(erase)卸载</span><br></pre></td></tr></table></figure></li></ol><h3 id="源码包管理"><a href="#源码包管理" class="headerlink" title="源码包管理"></a>源码包管理</h3><ol><li>下载源码包</li><li>解压<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvzf tengine-3.1.0.tar.gz</span><br></pre></td></tr></table></figure></li><li>配置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --user=www --group=www --prefix=/usr/local/nginx #配置文件prefix安装路径</span><br></pre></td></tr></table></figure></li><li>编译<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make #编译</span><br></pre></td></tr></table></figure></li><li>安装<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make install #安装</span><br></pre></td></tr></table></figure></li></ol><h2 id="任务计划"><a href="#任务计划" class="headerlink" title="任务计划"></a>任务计划</h2><p>定时完成一些任务，在命令上加上时间戳</p><h3 id="一次性调度执行-schedule-one-time-tasks-with-at"><a href="#一次性调度执行-schedule-one-time-tasks-with-at" class="headerlink" title="一次性调度执行(schedule one-time tasks with) at"></a>一次性调度执行(schedule one-time tasks with) at</h3><ol><li>语法格式：at <TIMESPEC></TIMESPEC></li><li><TIMESPEC>示例<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">now + 5min #五分钟后</span><br><span class="line">teatime tomorrow (teatime is 16:00)</span><br><span class="line">noon + 4days #第四天中午</span><br><span class="line">5pm august 3 2029 #</span><br><span class="line">4:00 2024-11-27</span><br></pre></td></tr></table></figure></TIMESPEC></li><li>例子<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install at #安装at</span><br><span class="line">systemctl start atd #启动服务</span><br><span class="line">at now +2min</span><br><span class="line">[root@localhost ~]# at now +2min</span><br><span class="line"><span class="meta prompt_">at&gt; </span><span class="language-bash">useradd uuuuu</span></span><br><span class="line"><span class="meta prompt_">at&gt; </span><span class="language-bash">&lt;EOT&gt; <span class="comment">#cirl + D 退出</span></span></span><br><span class="line">job 2 at Wed Apr 10 16:29:00 2024</span><br><span class="line">atq #查询结果</span><br><span class="line">[root@localhost ~]# atq</span><br><span class="line">2Wed Apr 10 16:29:00 2024 a root</span><br></pre></td></tr></table></figure></li></ol><h3 id="循环调度执行-schedule-recurring-jobs-with-cron"><a href="#循环调度执行-schedule-recurring-jobs-with-cron" class="headerlink" title="循环调度执行(schedule recurring jobs with) cron"></a>循环调度执行(schedule recurring jobs with) cron</h3><ol><li>简介<br>cron的概念和crontab是不可分割的<br>crontab是一个命令，常见于unix和linux操作系统中<br>用于设置周期性被执行的指令<br>该命令从标准输入设备读取指令，并将其存放于crontab文件中，以供之后读取和执行</li><li>查看进程状态<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install cronie -y #安装</span><br><span class="line">systemctl start crond #启动</span><br><span class="line">systemctl status crond #查看状态</span><br><span class="line">ps aux | grep crond #查看进程</span><br><span class="line">[root@localhost etc]# ps aux | grep crond</span><br><span class="line">root      5061  0.1  0.0 126392  1664 ?        Ss   17:08   0:00 /usr/sbin/crond -n</span><br><span class="line">crond程序是运行计划任务的根本</span><br></pre></td></tr></table></figure></li><li>实例</li></ol><ul><li>计划任务位置：&#x2F;var&#x2F;spool&#x2F;cron&#x2F;</li><li>管理方式</li></ul><ol><li>创建计划<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e Edit jobs for the current user</span><br><span class="line">crontab -e #进入一个记事本编写任务计划 :wq退出</span><br><span class="line">*  *  *  *  * 命令</span><br><span class="line">分 时 日 月 周</span><br><span class="line">分：minute(0-59)</span><br><span class="line">时：hour(0-23)</span><br><span class="line">天：day of month(1-31)</span><br><span class="line">月：month(1-12) 或者 jan，feb，mar，apr</span><br><span class="line">周：day of week(0-6)(sunday=0 or 7) 或者 sun,mon, tue</span><br><span class="line">分 时 日 月 周 命令或者脚本</span><br><span class="line">六个部分用空格隔开</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例子</span></span><br><span class="line">5 1 15 3 * /usr/bin/ls /root #在每年3月15号1点15分执行ls命令</span><br><span class="line">5 1 15 * * ls /usr/bin/ls /root #在每月15号1点15分执行ls命令</span><br><span class="line">0 2 1,4,6 * * ls /usr/bin/ls /root #在每月1,4,6号2点执行ls命令</span><br><span class="line">0 2 5-9 * * ls /usr/bin/ls /root #在每月5-9号2点执行ls命令</span><br><span class="line">* * * * * ls /usr/bin/ls /root #在每分钟执行ls命令</span><br><span class="line">0 * * * * ls /usr/bin/ls /root #在每小时整执行ls命令</span><br><span class="line">0 2 * * 5 ls /usr/bin/ls /root #在每周五2点整执行ls命令 一般不写星期几</span><br><span class="line">0 2 2 6 5 ls /usr/bin/ls /root #6月2号的2点和6月的周五2点都执行，执行5次，取交集</span><br><span class="line">5 1 * * * ls /usr/bin/ls /root #在每天1点15分执行ls命令</span><br><span class="line">*/5 * * * * ls /usr/bin/ls /root #每隔五分钟执行ls命令</span><br><span class="line">[root@localhost ~]# crontab -e</span><br><span class="line">crontab: installing new crontab</span><br></pre></td></tr></table></figure></li><li>查询计划<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -l List the jobs for the current user</span><br><span class="line">管理员可以使用crontab -u username，去管理其他用户的计划任务</span><br><span class="line">crontab -l</span><br><span class="line">[root@localhost ~]# crontab -l</span><br><span class="line">*/5 * * * * ls /usr/bin/ls /root</span><br></pre></td></tr></table></figure></li><li>删除计划<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -r Remove all jobs for the current users</span><br><span class="line">crontab -r #删除</span><br><span class="line">[root@localhost ~]# crontab -l</span><br><span class="line">no crontab for root</span><br></pre></td></tr></table></figure></li></ol><h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><h3 id="日志进程rsyslog"><a href="#日志进程rsyslog" class="headerlink" title="日志进程rsyslog"></a>日志进程rsyslog</h3><ul><li>简介：rsyslog 系统日志管理，关心问题：哪类程序，产生的什么日志，放在什么地方，日志为统计信息，排除错误，日志由应用程序产生</li><li>处理日志的进程</li></ul><ol><li>第一类：<ul><li>rsyslogd：系统专职日志程序</li><li>处理大部分日志记录</li><li>系统操作有关的信息，如登录，程序启动关闭信息，错误信息</li></ul></li><li>第二类：<ul><li>httd&#x2F;nginx&#x2F;mysql：各类应用程序，可以以自己的方式记录日志</li></ul></li><li>观察rsyslogd<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux | grep rsyslogd #d为deamon 守护进程，守护进程一般不会退出</span><br><span class="line">root      1013  0.0  0.2 216400  4020 ?        Ssl  13:53   0:00 /usr/sbin/rsyslogd -n</span><br></pre></td></tr></table></figure></li></ol><ul><li>常见的日志文件(系统，进程和应用程序)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -10 /var/log/messages #系统主日志文件</span><br><span class="line">Apr 10 19:01:01 localhost systemd: Started Session 15 of user root.</span><br><span class="line">     时间            主机名              消息/发生的事情 </span><br><span class="line">tail -f /var/log/messages #实时输出文件尾部</span><br><span class="line">tailf /var/log/messages #实时输出文件尾部 同上</span><br><span class="line">tailf /var/log/secure #认证安全</span><br><span class="line">tailf /var/log/yum.log #yum</span><br><span class="line">tailf /var/log/maillog #跟邮件postfix有关</span><br><span class="line">tailf /var/log/cron #crond,at有关产生的日志</span><br><span class="line">tailf /var/log/dmesg #和系统启动有关</span><br><span class="line">tailf /var/log/wtmp #当前登录的用户 w可以查看</span><br><span class="line">[root@localhost ~]# w</span><br><span class="line"> 22:18:40 up  8:25,  1 user,  load average: 0.00, 0.01, 0.05</span><br><span class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">root     pts/1    172.16.34.145    17:59    0.00s  0.08s  0.01s w</span><br></pre></td></tr></table></figure></li><li>rsyslogd配置</li></ul><ol><li>相关程序<ul><li>yum install rsyslog logrotate</li><li>默认已经安装</li></ul></li><li>启动程序<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start rsyslog.service</span><br></pre></td></tr></table></figure></li><li>相关文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ql rsyslog #列出和这个软件相关的文件</span><br><span class="line">rpm -qc rsyslog #列出这个软件的配置文件</span><br><span class="line">[root@localhost ~]# rpm -qc rsyslog</span><br><span class="line">/etc/logrotate.d/syslog #和日志轮转相关的文件</span><br><span class="line">/etc/rsyslog.conf #syslogd的主配置文件，关键</span><br><span class="line">/etc/sysconfig/rsyslog #syslogd的相关文件，定义级别（了解）</span><br><span class="line">主配置文件：一般都会在/ect/程序名.conf</span><br></pre></td></tr></table></figure></li><li>主配置文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/rsyslog.conf</span><br><span class="line">cron.*              /var/log/cron #前面是程序名，.后面是日志的级别，*表示所有的日志都记录，最后是日志存放的路径</span><br></pre></td></tr></table></figure></li></ol><ul><li>RULES<ul><li>RULES：即规则，是一套生成日志，以及储存日志的策略</li><li>规则由设备+级别+存放位置组成，设备是同一类程序的统一名称</li><li>RULES由FACILITY+LEVEL+FILE组成</li><li>authpriv.*  &#x2F;var&#x2F;log&#x2F;secure (SSH信息，认证设备)</li><li>mail.*     -&#x2F;var&#x2F;log&#x2F;maillog (发邮件，邮件设备)，这里有个-符号，表示使用异步方式记录，因为日志文件大</li><li>cron.*      &#x2F;var&#x2F;log&#x2F;cron (创建计划任务)</li><li>*.info;mail.none;authpriv.none;cron.none  &#x2F;var&#x2F;log&#x2F;messages 系统日志排除了邮件，认证和计划日志，;表示并列，.none表示不放日志</li></ul></li><li>FACILITY和LEVEL<ul><li>facility<ul><li>是系统对某种类型的应用程序的定义，如AUTHPRIV是安全事件，CRON是计划任务事件。用来收集同类程序的日志。</li></ul></li><li>设备类型<ul><li>LOG_SYSLOG：syslogd自身产生的日志</li><li>LOG_AUTHPRIV：安全认证设备</li><li>LOG_CRON：调度设备</li><li>LOG_MAIL：邮件设备</li><li>LOG_USER(default)：用户相关</li><li>LOG_DAEMON：后台进程</li><li>LOG_FTP：文件服务器</li><li>LOG_KERN：kernel messages 内核</li><li>LOG_LPR：打印机设备</li><li>LOG_LOGCAL0 through LOG_LOCAL7：用户自定义设备</li></ul></li><li>程序类型实例<ul><li>关于程序和设备的联系问题，程序自身会决定将日志交给哪类设备。如SSH程序会贤者安全认证类设备。这一点由开发者定义。</li><li>grep Facility &#x2F;etc&#x2F;ssh&#x2F;sshd_config</li><li>#SyslogFacility AUTH</li><li>SyslogFacility AUTHPRIV #认证程序</li></ul></li><li>level级别<ul><li>LOG_EMERG：进击，致命，服务无法继续进行，如配置文件丢失</li><li>LOG_ALERT：报警，需要立即处理，如磁盘空间使用95%</li><li>LOG_CRIT：致命行为</li><li>LOG_ERR：错误行为</li><li>LOG_WARNING：警告信息</li><li>LOG_NOTICE：普通，重要的标准信息</li><li>LOG_INFO：标准信息</li><li>LOG_DEBUG：调试信息，拍错所需，一般不建议使用</li><li>从上往下级别越来越小，信息越来越多</li><li>其中* 表示所有级别的信息都记录</li><li>LOG_NONE：不放日志</li></ul></li></ul></li><li>规则示意图<br><img src="1.png"></li></ul><h3 id="日志轮转logrotate"><a href="#日志轮转logrotate" class="headerlink" title="日志轮转logrotate"></a>日志轮转logrotate</h3><ul><li>简介<ul><li>logrotate日志轮转：程序将大量日志，分割管理，删除旧的日志</li><li>日志记录了程序运行时的各种信息</li><li>通过分析日志可以分析用户的行为，记录运动轨迹，查找程序问题</li><li>可惜磁盘空间有限</li><li>日志轮转就是黑匣子，记录的信息在重要也只能记录最后一段时间发生的事情</li><li>为了节省空间和整理方便，日志文件经常需要按时间或大小等维度分成多份，删除时间久远的日志文件</li></ul></li><li>工作原理</li></ul><ol><li>按照配置进行轮转<ul><li>配置文件种类<ul><li>主配置文件：&#x2F;etc&#x2F;logrotate.conf(决定每个日志文件如何轮转)</li><li>子配置文件夹：&#x2F;etc&#x2F;logrotate.d&#x2F;* #自定义配置，方便管理，.d 表示子目录</li></ul></li><li>观察主文件和子文件(每装一个软件都会产生一个子配文件)<ul><li>[root@localhost ~]# ls &#x2F;etc&#x2F;logrotate.conf &#x2F;etc&#x2F;logrotate.d&#x2F;</li><li>&#x2F;etc&#x2F;logrotate.conf</li><li>&#x2F;etc&#x2F;logrotate.d&#x2F;:</li><li>bootlog  firewalld  httpd  syslog  wpa_supplicant  yum</li></ul></li></ul></li></ol><ul><li><p>主配置文件介绍</p><ul><li>vim &#x2F;etc&#x2F;logrotate.conf</li><li>全局设置 #优先级低</li><li>weekly 轮转周期，一周轮转</li><li>rotate 4 保留四份</li><li>create 轮转后创造新的日志文件</li><li>#compress 是否压缩</li><li>include &#x2F;etc&#x2F;logrotate 包含该目录下的子配置文件，我们可以在子配置文件中进行设置</li><li>&#x2F;var&#x2F;log&#x2F;wtmp { #对某日志文件设置轮转方法，在配置文件中书写日志名和大阔号。可以独立设定该日志的轮转规则，这个优先级高</li><li>monthly #一个月轮转一次</li><li>create 0664 root utmp #轮转后穿件新文件，并设置权限，root是属主，utmp是属组</li><li>minsize 1M #最小达到1M才轮转</li><li>rotate 1 #保留一份</li><li>}</li><li>&#x2F;var&#x2F;log&#x2F;btmp {</li><li>missingok #丢失不提示，不执行，这东西不重要</li><li>monthly</li><li>create 0600 root utmp</li><li>rotate 1</li><li>}</li></ul></li><li><p>yum日志轮转实例</p></li><li><p>轮转的目标文件&#x2F;var&#x2F;log&#x2F;yum.log</p></li><li><p>配置轮转规则</p><ul><li>vim&#x2F;etc&#x2F;logrotate.d&#x2F;yum #安装程序的时候就会在子配置文件里面带上轮转规则</li><li>&#x2F;var&#x2F;log&#x2F;yum.log { #log文件的路径</li><li>missingok #丢失不执行</li><li>#notifempty #空文件不轮转</li><li>#maxsize 30k #达到30k轮转 日期和大小是或的关系</li><li>#yearly #一年一轮转</li><li>daily #一天一转</li><li>rotate 3 #保存三份</li><li>create 0777 root root #设置权限，这里只是示例，用来区别，默认的0644就行了</li></ul></li><li><p>测试</p><ul><li>错误示范<ul><li>&#x2F;usr&#x2F;sbin&#x2F;logrotate &#x2F;etc&#x2F;logrotate.conf #手动轮转</li><li>ls &#x2F;var&#x2F;log&#x2F;yum*</li><li>[root@localhost ~]# ls &#x2F;var&#x2F;log&#x2F;yum*</li><li>&#x2F;var&#x2F;log&#x2F;yum.log</li><li>没有用，没有达到我们设置的规则</li></ul></li><li>正确示范<ul><li>date 04151234 #修改时间 月日时分，每个两位</li><li>&#x2F;usr&#x2F;sbin&#x2F;logrotate -s &#x2F;var&#x2F;lib&#x2F;logrotate&#x2F;logrotate.status &#x2F;etc&#x2F;logrotate.conf #-s是时间戳</li><li>ls &#x2F;var&#x2F;log&#x2F;yum* #出现多个文件</li><li>&#x2F;var&#x2F;lib&#x2F;logrotate&#x2F;logrotate.status #这个文件说明有切过的状态</li></ul></li></ul></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/da_ge_de_nv_ren/article/details/128391575" title="Linux">Linux</a></li><li><a href="https://www.bilibili.com/video/BV1pz4y1D73n?p=29&vd_source=4470be84aba61145fe9d1690fe726951" title="千锋云计算Linux教程650集，linux系统运维从入门到精通教程（Linux安装极速入门，零基础必备）">千锋云计算Linux教程650集，linux系统运维从入门到精通教程（Linux安装极速入门，零基础必备）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令（二）</title>
      <link href="/2024/04/09/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2024/04/09/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">date #查看当前时间</span><br><span class="line">date 04151234 #修改时间 月日时分，每个两位</span><br></pre></td></tr></table></figure><h2 id="切割命令"><a href="#切割命令" class="headerlink" title="切割命令"></a>切割命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cut -d: -f3 #用:作为切割符，给出切割后第3列信息</span><br></pre></td></tr></table></figure><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">date &gt; time.txt #把输出内容保存到文件中</span><br></pre></td></tr></table></figure><h3 id="FD简介"><a href="#FD简介" class="headerlink" title="FD简介"></a>FD简介</h3><ul><li>file descriptor(FD)，文件描述符，文件句柄</li><li>进程使用文件描述符来管理打开的文件，每个进程都有属于自己的FD</li><li>FD是数字，范围：0-255</li><li>1 表示标准输出，比如：终端界面</li><li>2 表示错误的输出，比如：终端界面</li><li>0 表示标准输入，比如：键盘鼠标啥的</li><li>其他数字：表示其他文件，可读可写</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim 1.txt #打开一个文件</span><br><span class="line">ps aux | grep vim #在新终端中查看vim的进程号</span><br><span class="line">[root@master ~]# ps aux | grep vim</span><br><span class="line">root      1565  0.0  0.2 149264  4960 pts/0    S+   09:46   0:00 vim 1.txt</span><br><span class="line">ls -d /proc/1565 #查看</span><br><span class="line">ls /proc/1565 #查看进程1565的信息</span><br></pre></td></tr></table></figure><p><img src="1.png"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -l /proc/1565/fd #里面的数字是链接</span><br></pre></td></tr></table></figure><p><img src="2.png"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 123 &gt; /dev/pts/0 #在新窗口里面输入这个</span><br><span class="line">旧窗口里面会出现：</span><br></pre></td></tr></table></figure><p><img src="3.png"></p><h3 id="输出重定向的类型"><a href="#输出重定向的类型" class="headerlink" title="输出重定向的类型"></a>输出重定向的类型</h3><ol><li>正确输出</li></ol><ul><li>1&gt; 相当于 &gt; #会覆盖内容</li><li>1&gt;&gt; 相当于 &gt;&gt; #追加内容</li></ul><ol start="2"><li>错误输出</li></ol><ul><li>2&gt;  #错误输出，会覆盖内容</li><li>2&gt;&gt; #错误输出，追加内容</li></ul><ol start="3"><li>同时输出正确和错误信息</li></ol><ul><li>&amp;&gt; # &amp;号和&gt;号不能分开，否则会当成后台运行<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls /home /aaaaa &amp;&gt; 2.txt</span><br><span class="line">ls /home /aaaaa &amp;&gt; /dev/null #什么信息都不输出，相当于丢进了垃圾桶回收站</span><br></pre></td></tr></table></figure></li></ul><h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h3><p>输入给程序，利用输入重定向，把文件内容代替人为的输入，编程时常用</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chengxu &lt; file #文件把内容给程序</span><br><span class="line">chengxu 0&lt; file #同上</span><br><span class="line"></span><br><span class="line">cat &gt;1.txt &lt;&lt; EOF</span><br><span class="line">11111</span><br><span class="line">22222</span><br><span class="line">33333</span><br><span class="line">EOF  # 将后面的内容给cat看，然后重定向保存在1.txt中，EOF(end of file)里面的回车都无效</span><br><span class="line">[root@master ~]# cat 1.txt </span><br><span class="line">11111</span><br><span class="line">22222</span><br><span class="line">33333</span><br></pre></td></tr></table></figure><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><h4 id="进程管道"><a href="#进程管道" class="headerlink" title="进程管道"></a>进程管道</h4><ul><li>简介：管道(piping)|可以将多条命令组合起来，一次性完成复杂的处理任务</li><li>语法：commad1|commad2|commad3</li><li>管道左侧的输出就是右侧的输入</li></ul><h4 id="tee管道"><a href="#tee管道" class="headerlink" title="tee管道"></a>tee管道</h4><ul><li>简介：三通管道，即交给另一个程序处理，又保存一份副本</li><li>语法：commad1 |tee 1.txt | commad2 |tee 2.txt | commad3</li></ul><h4 id="参数传递-xargs（特殊参数）"><a href="#参数传递-xargs（特殊参数）" class="headerlink" title="参数传递 xargs（特殊参数）"></a>参数传递 xargs（特殊参数）</h4><ul><li>cp rm一些特殊命令就是不服其他程序</li><li>实例<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch /home/file&#123;1..5&#125; #创建文件</span><br><span class="line">[root@master ~]# cat files </span><br><span class="line">/home/file1</span><br><span class="line">/home/file3</span><br><span class="line">/home/file5 #输入内容</span><br><span class="line">cat files | rm -rvf #删除文件</span><br><span class="line">删除失败</span><br><span class="line">cat files |xargs rm -rvf #使用xargs</span><br><span class="line">[root@master ~]# cat files |xargs rm -rvf</span><br><span class="line">removed ‘/home/file1’</span><br><span class="line">removed ‘/home/file3’</span><br><span class="line">removed ‘/home/file5’</span><br><span class="line">成功删除</span><br></pre></td></tr></table></figure></li></ul><h4 id="管道种类"><a href="#管道种类" class="headerlink" title="管道种类"></a>管道种类</h4><ul><li>匿名管道：<code>|</code></li><li>命名管道：可以用于跨终端的交流，系统运行时产生，以文件的形式存在，标志为<code>p</code><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www ~]# ll /run/systemd/initctl/fifo</span><br><span class="line">prw------- 1 root root 0 Apr 14 15:22 /run/systemd/initctl/fifo</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><h3 id="硬盘类型"><a href="#硬盘类型" class="headerlink" title="硬盘类型"></a>硬盘类型</h3><ul><li>机械硬盘：盘片，马达，磁头，磁臂组成的机械结构存储器。便宜<br><img src="4.jpeg"></li><li>固态硬盘：由芯片和集成电路组成。贵<br><img src="5.jpg"></li></ul><h3 id="硬盘尺寸"><a href="#硬盘尺寸" class="headerlink" title="硬盘尺寸"></a>硬盘尺寸</h3><ul><li>2.5英寸</li><li>3.5英寸</li><li>磁盘的对角线</li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul><li>插头</li><li>IDE&#x2F;SATA</li><li>串口&#x2F;并口</li><li>块&#x2F;慢</li><li>老&#x2F;新</li><li>IDE #插口大<br><img src="6.jpg"></li><li>SATA #插口小<br><img src="7.jpg"></li></ul><h3 id="转速"><a href="#转速" class="headerlink" title="转速"></a>转速</h3><ul><li>每分钟旋转速度</li><li>5400转</li><li>7200转</li><li>15000转<br>转速越快，速度越快，噪音越大</li></ul><h3 id="厂商："><a href="#厂商：" class="headerlink" title="厂商："></a>厂商：</h3><ul><li>西部数据</li><li>希捷</li><li>东芝</li><li>三星&#x2F;等</li></ul><h3 id="硬盘术语"><a href="#硬盘术语" class="headerlink" title="硬盘术语"></a>硬盘术语</h3><ul><li>磁道：每个盘面被划分成许多同心圆，这些同心圆轨迹叫做磁道，磁道从内到外从0开始编号</li><li>扇区：将一个盘面划分为若干内角相同的扇形，这样盘面上的每个磁道就被分为若干段圆弧，每段圆弧叫做一个扇区，512个字节是一个扇区的大小</li><li>扇面：相同角度的所有扇区组成扇面，有正反两个扇面，不同的扇面组成柱面</li><li>柱面：所有盘面上同一磁道构成一个圆柱，就是柱面</li><li>盘片：一块硬盘有若干盘片，每个盘片有可以存储数据的上下两个盘面。这些盘面堆叠在主轴上高速旋转。</li><li>簇：<br><img src="8.png"></li></ul><h3 id="Linux硬盘命名"><a href="#Linux硬盘命名" class="headerlink" title="Linux硬盘命名"></a>Linux硬盘命名</h3><ul><li>kernel对不同接口的硬盘的命名方式<br>以RHEL7&#x2F;centos7为例</li></ul><ol><li>IDE（并口），不常用<ul><li>&#x2F;dev&#x2F;hda h代表并口</li><li>&#x2F;dev&#x2F;hdb</li></ul></li><li>SATA（串口）<ul><li>&#x2F;dev&#x2F;sda &#x2F;dev设备文件目录，s代表sata就是串口，d代表磁盘，a是第一块</li><li>&#x2F;dev&#x2F;sdb b是第二块</li><li>&#x2F;dev&#x2F;sde e是第五块</li></ul></li></ol><h3 id="磁盘分区方式"><a href="#磁盘分区方式" class="headerlink" title="磁盘分区方式"></a>磁盘分区方式</h3><ul><li>MBR<ul><li>主引导记录(MBR, Master Boot Record)是位于磁盘最前列的一段引导</li><li>MBR支持最大的磁盘容量是&lt;2TB。设计时分配4个分区</li><li>如果希望超过4个分区，需要放弃主分区，改为扩展分区和逻辑分区</li></ul></li><li>GPT<ul><li>全局唯一标识分区表（GUIDPartition table, 缩写：GPT）是一个实体硬盘的分区表的结构布局标准</li><li>GPT支持大于2T的硬盘，支持128个分区</li></ul></li></ul><h3 id="添加磁盘"><a href="#添加磁盘" class="headerlink" title="添加磁盘"></a>添加磁盘</h3><p>Virtual box 加虚拟硬盘可以参考：<a href="https://www.jianshu.com/p/69c03fb80c17" title="VirtualBox虚拟机添加硬盘">VirtualBox虚拟机添加硬盘</a></p><h3 id="管理磁盘三部曲"><a href="#管理磁盘三部曲" class="headerlink" title="管理磁盘三部曲"></a>管理磁盘三部曲</h3><p>新硬盘不能直接用，需要经过下面三个步骤才可以使用：</p><ol><li>分区(MBR或者GPT)</li><li>格式化文件系统也叫创建文件系统</li><li>挂载mount</li></ol><h3 id="查看硬盘"><a href="#查看硬盘" class="headerlink" title="查看硬盘"></a>查看硬盘</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -l /dev/sd*</span><br><span class="line">[root@localhost ~]# ls -l /dev/sd*</span><br><span class="line">brw-rw----. 1 root disk 8,   0 Apr  9 23:04 /dev/sda</span><br><span class="line">brw-rw----. 1 root disk 8,   1 Apr  9 23:04 /dev/sda1</span><br><span class="line">brw-rw----. 1 root disk 8,   2 Apr  9 23:04 /dev/sda2</span><br><span class="line">brw-rw----. 1 root disk 8,  16 Apr  9 23:04 /dev/sdb</span><br><span class="line">brw-rw----. 1 root disk 8,  32 Apr  9 23:04 /dev/sdc</span><br><span class="line">brw-rw----. 1 root disk 8,  48 Apr  9 23:04 /dev/sdd</span><br><span class="line">brw-rw----. 1 root disk 8,  64 Apr  9 23:04 /dev/sde</span><br><span class="line">brw-rw----. 1 root disk 8,  80 Apr  9 23:04 /dev/sdf</span><br><span class="line">brw-rw----. 1 root disk 8,  96 Apr  9 23:04 /dev/sdg</span><br><span class="line">brw-rw----. 1 root disk 8, 112 Apr  9 23:04 /dev/sdh</span><br><span class="line">brw-rw----. 1 root disk 8, 128 Apr  9 23:04 /dev/sdi</span><br><span class="line">最前面的b表示block块设备，硬盘</span><br><span class="line">lsblk #可以查看块状设备</span><br><span class="line">[root@localhost ~]# lsblk</span><br><span class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               8:0    0   20G  0 disk </span><br><span class="line">├─sda1            8:1    0    1G  0 part /boot</span><br><span class="line">└─sda2            8:2    0   19G  0 part </span><br><span class="line">  ├─centos-root 253:0    0   17G  0 lvm  /</span><br><span class="line">  └─centos-swap 253:1    0    2G  0 lvm  [SWAP]</span><br><span class="line">sdb               8:16   0    5G  0 disk </span><br><span class="line">sdc               8:32   0    5G  0 disk </span><br><span class="line">sdd               8:48   0    5G  0 disk </span><br><span class="line">sde               8:64   0    5G  0 disk </span><br><span class="line">sdf               8:80   0    5G  0 disk </span><br><span class="line">sdg               8:96   0    5G  0 disk </span><br><span class="line">sdh               8:112  0    5G  0 disk </span><br><span class="line">sdi               8:128  0    5G  0 disk </span><br><span class="line">sr0              11:0    1  973M  0 rom</span><br></pre></td></tr></table></figure><ul><li>第一列NAME：磁盘名字</li><li>sda1和sda2是分区</li><li>centos-root和centos-swap是sda2的逻辑分区</li><li>第二列MAJ:MIN：设备类型和序号</li><li>第三列RM：是否为可移动设备</li><li>第四列SIZE：磁盘大小</li><li>第五列RO：是否只读</li><li>第七列TYPE：磁盘或分区</li><li>第八列MOUNTPOINT：挂载点</li></ul><h3 id="创建分区MBR"><a href="#创建分区MBR" class="headerlink" title="创建分区MBR"></a>创建分区MBR</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fdisk /dev/sdb #对应于MBR，进行分区</span><br><span class="line">gdisk /dev/sdb #对应于GPT，进行分区</span><br><span class="line">进入会话模式</span><br><span class="line">[root@localhost ~]# fdisk /dev/sdb</span><br><span class="line">Welcome to fdisk (util-linux 2.23.2).</span><br><span class="line"></span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table</span><br><span class="line">Building a new DOS disklabel with disk identifier 0xe216c3dc.</span><br><span class="line"></span><br><span class="line">Command (m for help): </span><br><span class="line">输入字母n，回车</span><br><span class="line">Partition type:</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p):</span><br><span class="line">输入p划分主分区，MBR可以划出4个分区</span><br><span class="line">Partition number (1-4, default 1): #选择分区号</span><br><span class="line">输入1回车</span><br><span class="line">First sector (2048-10485759, default 2048): #选择起始扇区，从哪个地方开始划分，每次选择默认都是在上一个分区的末尾开始。单位是一个扇区的大小即一个扇区或者512字节，0-2047放着磁盘的分区表，记录磁盘的分区信息。</span><br><span class="line">直接回车就好</span><br><span class="line">Using default value 2048</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (2048-10485759, default 10485759): #分区到哪里结束，选择磁盘分区结束的扇区，即分区大小，可以写上面的数字，也可以写+2G之类的直接设置分区的大小，会帮我们自动计算，如果直接输入回车那就是将剩下的所有内存都给这个分区。</span><br><span class="line">输入+2G回车</span><br><span class="line">Partition 1 of type Linux and of size 2 GiB is set</span><br><span class="line"></span><br><span class="line">Command (m for help):  #会话模式进入最后一步，已经完成2G大小分区记录，但为生效。</span><br><span class="line">输入w保存分区信息</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks. #第一个分区已经成功，退出会话模式。也可以不按w，继续按n进行分区，最后所有分区结束后，按w保存所有分区信息，最后再退出。没有分区的部分不能用。</span><br><span class="line">partprobe /dev/sdb #分区准备，刷新分区表</span><br><span class="line">fdisk -l /dev/sdb #查看分区信息</span><br><span class="line">[root@localhost ~]# fdisk -l /dev/sdb</span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 5368 MB, 5368709120 bytes, 10485760 sectors</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">磁盘名字       大小MB    大小字节为单位      包含多少个扇区</span>     </span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一个扇区的大小</span></span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label type: dos</span><br><span class="line">磁盘标签disk operation system(dos)</span><br><span class="line">Disk identifier: 0xe216c3dc</span><br><span class="line">磁盘标记符：类似于身份证</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sdb1            2048     4196351     2097152   83  Linux</span><br></pre></td></tr></table></figure><h3 id="创建（格式化）文件系统"><a href="#创建（格式化）文件系统" class="headerlink" title="创建（格式化）文件系统"></a>创建（格式化）文件系统</h3><p>创建文件系统使得文件可以很好的访问和调用</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/sdb1 #创建（格式化）/dev/sdb1 的文件系统，准备格式化</span><br><span class="line">mkfs -t ext4 /dev/sdb1 #效果同上</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">file</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">system</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">extend4 扩展文件系统到第四代，是文件系统的类型。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/dev/sdb1 第二块串口硬盘的第一个分区</span></span><br><span class="line">[root@localhost ~]# mkfs.ext4 /dev/sdb1</span><br><span class="line">mke2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">Filesystem label=</span><br><span class="line">OS type: Linux</span><br><span class="line">Block size=4096 (log=2) #一个块的大小</span><br><span class="line">Fragment size=4096 (log=2)</span><br><span class="line">Stride=0 blocks, Stripe width=0 blocks</span><br><span class="line">131072 inodes, 524288 blocks</span><br><span class="line">26214 blocks (5.00%) reserved for the super user</span><br><span class="line">First data block=0</span><br><span class="line">Maximum filesystem blocks=536870912</span><br><span class="line">16 block groups</span><br><span class="line">32768 blocks per group, 32768 fragments per group</span><br><span class="line">8192 inodes per group</span><br><span class="line">Superblock backups stored on blocks: </span><br><span class="line">32768, 98304, 163840, 229376, 294912</span><br><span class="line"></span><br><span class="line">Allocating group tables: done                            </span><br><span class="line">Writing inode tables: done                            </span><br><span class="line">Creating journal (16384 blocks): done</span><br><span class="line">Writing superblocks and filesystem accounting information: done</span><br></pre></td></tr></table></figure><h3 id="挂载mount"><a href="#挂载mount" class="headerlink" title="挂载mount"></a>挂载mount</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /mnt/disk1</span><br><span class="line">mount -t ext4 /dev/sdb1 /mnt/disk1 #挂载</span><br><span class="line">永久挂载的话，把上述命令写入 /etc/fstab 文件中</span><br><span class="line">df -hT #查看挂载信息，h人性化显示，T显示类型</span><br><span class="line">[root@localhost ~]# df -hT</span><br><span class="line">Filesystem              Type      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs                devtmpfs  898M     0  898M   0% /dev</span><br><span class="line">tmpfs                   tmpfs     910M     0  910M   0% /dev/shm</span><br><span class="line">tmpfs                   tmpfs     910M  9.6M  901M   2% /run</span><br><span class="line">tmpfs                   tmpfs     910M     0  910M   0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/centos-root xfs        17G  1.3G   16G   8% /</span><br><span class="line">/dev/sda1               xfs      1014M  151M  864M  15% /boot</span><br><span class="line">tmpfs                   tmpfs     182M     0  182M   0% /run/user/0</span><br><span class="line">/dev/sdb1               ext4      2.0G  6.0M  1.8G   1% /mnt/disk1</span><br></pre></td></tr></table></figure><ul><li>第一列Filesystem：文件系统</li><li>第二列Type：类型</li><li>第三列Size：大小</li><li>第四列Used：已用大小</li><li>第五列Avail：可用大小</li><li>第六列Use%：使用率</li><li>第七列Mounted on：挂载点<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount #也可以查看挂载情况</span><br><span class="line">/dev/sdb1 on /mnt/disk1 type ext4 (rw,relatime,seclabel,data=ordered)</span><br></pre></td></tr></table></figure></li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>使用MBR只能划分4个主分区，如果需要想要多个分区，必须要放弃一个主分区，1,2,3,4分区都可以，一般选第4个主分区化为扩展分区，扩展分区不能存放数据，扩展分区需要划分成若干个逻辑分区，在逻辑分区里面存放数据。逻辑分区个数不限。</p><ul><li>4个主分区</li><li>3个主分区+1个扩展分区（若干个逻辑分区）</li></ul><h3 id="划分扩展分区"><a href="#划分扩展分区" class="headerlink" title="划分扩展分区"></a>划分扩展分区</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">先删除第4个分区</span><br><span class="line">Partition type:</span><br><span class="line">   p   primary (3 primary, 0 extended, 1 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default e): e</span><br><span class="line">输入e选择扩展分区</span><br><span class="line">Selected partition 4</span><br><span class="line">First sector (5015552-10485759, default 5015552): </span><br><span class="line">回车</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (5015552-10485759, default 10485759):</span><br><span class="line">回车</span><br><span class="line">剩下的所有空间都要在扩展分区里面</span><br><span class="line">Command (m for help): p #p打印分区信息</span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 5368 MB, 5368709120 bytes, 10485760 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk label type: dos</span><br><span class="line">Disk identifier: 0xe216c3dc</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sdb1            2048     4196351     2097152   83  Linux</span><br><span class="line">/dev/sdb2         4196352     4605951      204800   83  Linux</span><br><span class="line">/dev/sdb3         4605952     5015551      204800   83  Linux</span><br><span class="line">/dev/sdb4         5015552    10485759     2735104    5  Extended</span><br><span class="line">Command (m for help): n</span><br><span class="line">All primary partitions are in use</span><br><span class="line">Adding logical partition 5</span><br><span class="line">First sector (5017600-10485759, default 5017600): </span><br><span class="line">现在输入n就默认划分逻辑分区了</span><br><span class="line">我现在划了3个主分区和一个扩展分区，扩展分区包括4个逻辑分区</span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sdb1            2048     4196351     2097152   83  Linux</span><br><span class="line">/dev/sdb2         4196352     4605951      204800   83  Linux</span><br><span class="line">/dev/sdb3         4605952     5015551      204800   83  Linux</span><br><span class="line">/dev/sdb4         5015552    10485759     2735104    5  Extended</span><br><span class="line">/dev/sdb5         5017600     5427199      204800   83  Linux</span><br><span class="line">/dev/sdb6         5429248     5838847      204800   83  Linux</span><br><span class="line">/dev/sdb7         5840896     6250495      204800   83  Linux</span><br><span class="line">/dev/sdb8         6252544    10485759     2116608   83  Linux</span><br></pre></td></tr></table></figure><h3 id="交换分区管理Swap"><a href="#交换分区管理Swap" class="headerlink" title="交换分区管理Swap"></a>交换分区管理Swap</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li>其就是一个普通的硬盘分区</li><li>作用：“提升”内存的容量，防止OOM(out of memory)，防止内存溢出</li><li>内存可以把数据放到swap分区，热点数据。虚拟内存。</li></ul><h4 id="swap大小"><a href="#swap大小" class="headerlink" title="swap大小"></a>swap大小</h4><ul><li>推荐：设置swap分区为内存的两倍</li><li>生产中<ul><li>大于4G而小于46G内存的系统，最小需要4G交换空间</li><li>大于16G而小于64G内存的系统，最小需要8G交换空间</li><li>大于64G而小于256G内存的系统，最小需要16G交换空间</li></ul></li></ul><p>####查看交换分区</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">free -m #用兆来表示</span><br><span class="line">[root@localhost ~]# free -m</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1819         224        1431           9         163        1444</span><br><span class="line">Swap:          2047           0        2047</span><br></pre></td></tr></table></figure><h4 id="增加swap分区"><a href="#增加swap分区" class="headerlink" title="增加swap分区"></a>增加swap分区</h4><ol><li>将&#x2F;dev&#x2F;sdc磁盘划分2G分区为例，方法同上<br>Command (m for help): n<br>Partition type:<br>p   primary (0 primary, 0 extended, 4 free)<br>e   extended<br>Select (default p): p<br>Partition number (1-4, default 1): 1<br>First sector (2048-10485759, default 2048):<br>Using default value 2048<br>Last sector, +sectors or +size{K,M,G} (2048-10485759, default 10485759): +2G<br>Partition 1 of type Linux and of size 2 GiB is set</li></ol><p>Command (m for help): t</p><ol start="2"><li>划分分区后，将类型设置为82，按t进入</li></ol><p>Command (m for help): t<br>Selected partition 1<br>Hex code (type L to list all codes): L #L 列出所有的类型<br>需要的是82  Linux swap<br>Hex code (type L to list all codes): 82<br>Changed type of partition ‘Linux’ to ‘Linux swap &#x2F; Solaris’<br>3. partprobe &#x2F;dev&#x2F;sdc #刷新<br>4. mkswap &#x2F;dev&#x2F;sdc1 #格式化<br>[root@localhost ~]# mkswap &#x2F;dev&#x2F;sdc1<br>Setting up swapspace version 1, size &#x3D; 2097148 KiB<br>no label, UUID&#x3D;609db5b5-5db4-41d7-a6d3-2c7cde1dd0b8 #UUID磁盘编号<br>5. swapon &#x2F;dev&#x2F;sdc1 #挂载<br>#swapoff &#x2F;dev&#x2F;sdc1 #卸载<br>6. free -m #检查</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# free -m</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           1819         225        1430           9         163        1443</span><br><span class="line">Swap:          4095           0        4095</span><br></pre></td></tr></table></figure><h3 id="逻辑卷管理LVM"><a href="#逻辑卷管理LVM" class="headerlink" title="逻辑卷管理LVM"></a>逻辑卷管理LVM</h3><ul><li>前言：物理磁盘的空间是限定的，不便于管理。单靠物理磁盘，是解决不了空间增长的问题的。</li><li>目的：管理磁盘的一种方式，性质与基本磁盘无异</li><li>特点：随意扩张大小，</li><li>术语：<ul><li>PV：物理卷(physical volume)</li><li>VG：卷组(volume group)</li><li>LV：逻辑卷(logical volume)</li></ul></li></ul><h4 id="创建LVM"><a href="#创建LVM" class="headerlink" title="创建LVM"></a>创建LVM</h4><ol><li>将物理磁盘，转化为物理卷pv<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pvcreate /dev/sdd #创建物理卷</span><br><span class="line">[root@localhost ~]# pvcreate /dev/sdd</span><br><span class="line">  Physical volume &quot;/dev/sdd&quot; successfully created.</span><br></pre></td></tr></table></figure></li><li>创建卷组<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vgcreate 卷组名 /dev/sdd #创建卷组</span><br><span class="line">vgcreate vg1 /dev/sdd</span><br><span class="line">[root@localhost ~]# vgcreate vg1 /dev/sdd</span><br><span class="line">  Volume group &quot;vg1&quot; successfully created</span><br></pre></td></tr></table></figure></li><li>创建逻辑卷<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lvcreate -L 4G -n lv1 vg1 #创建逻辑卷，-L 4G为逻辑卷大小为4G -n lv1 逻辑卷的名字为lv1 从vg1中创建</span><br><span class="line">[root@localhost ~]# lvcreate -L 4G -n lv1 vg1</span><br><span class="line">  Logical volume &quot;lv1&quot; created.</span><br></pre></td></tr></table></figure></li><li>格式化逻辑卷并挂载<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/vg1/lv1 #格式化</span><br><span class="line">注意：/dev/卷组名/逻辑卷名</span><br><span class="line">mkdir /mnt/lv1 #创建挂载点</span><br><span class="line">mount -t ext4 /dev/vg1/lv1 /mnt/lv1 #挂载</span><br><span class="line">df -hT #查看</span><br></pre></td></tr></table></figure></li></ol><h4 id="VG-管理"><a href="#VG-管理" class="headerlink" title="VG 管理"></a>VG 管理</h4><h5 id="扩展卷组"><a href="#扩展卷组" class="headerlink" title="扩展卷组"></a>扩展卷组</h5><ul><li>需要把&#x2F;dev&#x2F;vg1容量由5g扩为10g</li><li>创建pv。将pv增加到vg1中<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pvcreate /dev/sde</span><br><span class="line">pvs #查看物理卷</span><br><span class="line">[root@localhost ~]# pvs</span><br><span class="line">  PV         VG     Fmt  Attr PSize   PFree  </span><br><span class="line"> 物理卷      卷组   版本  属性  物理卷尺寸 物理卷空余尺寸</span><br><span class="line">  /dev/sda2  centos lvm2 a--  &lt;19.00g       0 </span><br><span class="line">  /dev/sdd   vg1    lvm2 a--   &lt;5.00g 1020.00m</span><br><span class="line">  /dev/sde          lvm2 ---    5.00g    5.00g</span><br><span class="line">vgextend vg1 /dev/sde #扩展卷组vg1</span><br><span class="line">[root@localhost ~]# vgextend vg1 /dev/sde</span><br><span class="line">  Volume group &quot;vg1&quot; successfully extended</span><br><span class="line">vgs #查看卷组</span><br><span class="line">[root@localhost ~]# vgs</span><br><span class="line">  VG     #PV #LV #SN Attr   VSize   VFree</span><br><span class="line"> 卷组   物理卷 逻辑卷  属性   总的尺寸  剩余空间</span><br><span class="line">  centos   1   2   0 wz--n- &lt;19.00g    0 </span><br><span class="line">  vg1      2   1   0 wz--n-   9.99g 5.99g</span><br></pre></td></tr></table></figure></li></ul><h4 id="LV-扩容"><a href="#LV-扩容" class="headerlink" title="LV 扩容"></a>LV 扩容</h4><ol><li>lv本身的扩容<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lvextend -L +4G /dev/vg1/lv1 #扩展lv1多加4g</span><br></pre></td></tr></table></figure></li><li>文件系统的扩容<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -hT #观察文件系统</span><br><span class="line">/dev/mapper/vg1-lv1     ext4      3.9G   16M  3.6G   1% /mnt/lv1 </span><br><span class="line">未扩容</span><br><span class="line">resize2fs /dev/vg1/lv1 # 刷新文件系统</span><br><span class="line">/dev/mapper/vg1-lv1     ext4      7.8G   18M  7.4G   1% /mnt/lv1</span><br><span class="line">扩容了</span><br></pre></td></tr></table></figure></li></ol><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p>格式化就是创建文件系统，用ext4把整个硬盘分成多个小块，每个小块4096字节，4kb</p><ul><li>文件是如何准确放在磁盘的某个位置的？</li><li>文件是如何在磁盘中快速定位的？</li><li>文件系统可以解答<br>文件系统详解</li><li>ext4文件系统<ul><li>类型：索引型文件系统</li><li>系统限制：ext3 文件系统最大16T，ext4最大16T，xfs最大100T</li><li>图示<br><img src="9.png"></li><li>名词<ul><li>inode：上图灰色部分，记录文件属性（文件元数据：文件属性，大小，权限，属主，数组，连接数，块数量，块编号等），一个文件占用一个inode，同时记录此文件数据所在的block number，inode大小为128 字节</li><li>block：上图蓝色部分，存储文件的基本单元，存储文件的实际数据，若文件过大，会占用多个block，一个block默认为4k</li><li>superblock：1，block与inode的总量 2，未使用和已使用的inode&#x2F;block的数量，用以快速找到使用或未使用的inode和block</li></ul></li></ul></li></ul><h4 id="文件系统的数目"><a href="#文件系统的数目" class="headerlink" title="文件系统的数目"></a>文件系统的数目</h4><p>做过几次格式化mkfs就有几个文件系统</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -l -i 1.txt #-i 列出inode号</span><br><span class="line">[root@localhost disk8]# ls -l -i 1.txt</span><br><span class="line">11 -rw-r--r--. 1 root root 0 Apr 10 05:49 1.txt</span><br><span class="line"></span><br><span class="line">11 为inode号</span><br><span class="line">df -i #查看分区的Inode信息</span><br><span class="line">Filesystem               Inodes IUsed   IFree IUse% Mounted on</span><br><span class="line">devtmpfs                 229883   499  229384    1% /dev</span><br><span class="line">tmpfs                    232879     1  232878    1% /dev/shm</span><br><span class="line">tmpfs                    232879   864  232015    1% /run</span><br><span class="line">tmpfs                    232879    16  232863    1% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/centos-root 8910848 27216 8883632    1% /</span><br><span class="line">/dev/sda1                524288   327  523961    1% /boot</span><br><span class="line">tmpfs                    232879     1  232878    1% /run/user/0</span><br><span class="line">/dev/sdb1                131072    11  131061    1% /mnt/disk1</span><br><span class="line">/dev/sdb2                 51200    11   51189    1% /mnt/disk2</span><br><span class="line">/dev/sdb3                 51200    11   51189    1% /mnt/disk3</span><br><span class="line">/dev/sdb5                 51200    11   51189    1% /mnt/disk5</span><br><span class="line">/dev/sdb6                 51200    11   51189    1% /mnt/disk6</span><br><span class="line">/dev/sdb7                 51200    11   51189    1% /mnt/disk7</span><br><span class="line">/dev/sdb8                132464    11  132453    1% /mnt/disk8</span><br><span class="line">/dev/mapper/vg1-lv1      524288    11  524277    1% /mnt/lv1</span><br><span class="line">disk8的总的inode数为132464，总共可以创建132464个文件，inode决定了创建文件的数量。即使所有的inode都被沾满了，如果每个文件都是空的，这时没有block被占用，可以往每个文件里面写内容，磁盘的空间限制根据inode和block两个方面，inode决定文件数量，block决定文件大小。</span><br></pre></td></tr></table></figure><h3 id="文件链接"><a href="#文件链接" class="headerlink" title="文件链接"></a>文件链接</h3><ul><li>软链接<ul><li>名词解释：symbolic link 软链接，通过范围软链接可以访问实际文件</li><li>实例<ul><li>语法： ln -s 源文件 链接文件 #-s 就是软链接</li><li>ln -s &#x2F;mnt&#x2F;disk8&#x2F;1.txt &#x2F;root&#x2F;11.txt</li><li>软链接像快捷方式，可以对文件和目录做软链接</li><li>软链接记录的只是源文件的绝对路径</li><li>软链接失去源文件不可用</li></ul></li></ul></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ls -l 11.txt </span><br><span class="line">lrwxrwxrwx. 1 root root 16 Apr 10 06:10 11.txt -&gt; /mnt/disk8/1.txt</span><br><span class="line">l代表链接文件，11.txt 和1.txt是同一文件，向任何一个文件写内容，两个地方的内容都会修改。</span><br><span class="line">如果删除链接，源文件还在，删除源文件，链接里面的内容也会没有，链接会闪烁，没有用了，这时新建源文件，软链接可以使用</span><br></pre></td></tr></table></figure><ul><li>硬链接<ul><li>硬链接只能在同一个分区做</li><li>语法：ln 源文件 目标文件</li><li>ln &#x2F;2.txt &#x2F;root&#x2F;22.txt<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ls -l /root/22.txt </span><br><span class="line">-rw-r--r--. 2 root root 5 Apr 10 06:23 /root/22.txt</span><br><span class="line">2 表示的是硬链接数</span><br><span class="line">在源文件或者链接文件里面加减内容，对所有的连接文件和源文件都有效。</span><br><span class="line">删除源文件，硬链接文件的连接数会减少，但是访问硬链接也可以访问内容，硬链接依然有效。硬链接不依赖源文件。</span><br></pre></td></tr></table></figure></li><li>总结：硬链接只能对文件做，不能对目录做，硬链接只能在同分区做</li></ul></li></ul><h3 id="RAID-磁盘阵列"><a href="#RAID-磁盘阵列" class="headerlink" title="RAID 磁盘阵列"></a>RAID 磁盘阵列</h3><ul><li>简介：<ul><li>RAID：廉价磁盘冗余阵列(Redundant Array of Independent Disks)</li><li>作用：容错，自动备份，提高读写速率</li></ul></li><li>类型：<ul><li>RAID0：RAID0条带集2块磁盘以上，读写速率快100%*N，没有容错，不重要的缓存做RAID0<br><img src="12.png"></li><li>RAID1：又叫镜像卷，必须两块磁盘，两块硬盘只能用一般50%，读写速率一般，备份容错。系统盘做RAID1<br><img src="10.png"></li><li>RAID5：至少3块硬盘，把数据分为N-1份，N为硬盘数，保存在前N-1个硬盘，第N个硬盘保存校验码。任何一个盘坏了，可以通过校验码获得损坏的数据。特点：可靠高速。还有其他盘，叫热备盘，这个盘不存数据，当一个盘坏了。这个盘另外补上。利用率(n-1)&#x2F;n，读写速率块，容错高。重要数据做RAID5<br><img src="11.png"></li></ul></li><li>不同场景RAID的使用<ul><li>硬RAID：需要RAID卡，有自己的CPU，处理速度快，有电池和无电池<br><img src="13.png"></li><li>软RAID：通过操作系统实现，如windows，linux</li></ul></li><li>软RAID实例</li></ul><ol><li>准备4块硬盘</li></ol><ul><li>做RAID5，三块数据盘+热备盘1个<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sdf               8:80   0    5G  0 disk </span><br><span class="line">sdg               8:96   0    5G  0 disk </span><br><span class="line">sdh               8:112  0    5G  0 disk </span><br><span class="line">sdi               8:128  0    5G  0 disk </span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>创建RAID<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install mdadm</span><br><span class="line">mdadm -C /dev/阵列名 -l5    -n3       -x1 /dev/sdf /dev/sdg /dev/sdh /dev/sdi</span><br><span class="line">                     等级 数据盘数目 热备盘个数</span><br><span class="line">mdadm -C /dev/md1 -l5 -n3 -x1 /dev/sdf /dev/sdg /dev/sdh /dev/sdi</span><br></pre></td></tr></table></figure></li><li>格式化，挂载<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/md1</span><br><span class="line">mkdir /mnt/raid5</span><br><span class="line">mount /dev/md1 /mnt/raid5</span><br></pre></td></tr></table></figure></li><li>查看RAID信息<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">def -hT</span><br><span class="line">mdadm -D /dev/md1</span><br></pre></td></tr></table></figure></li><li>模拟一块硬盘损毁，并移除<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mdadm /dev/md1 -f /dev/sdf -r /dev/sdf #把sdf强制从md1中移除</span><br></pre></td></tr></table></figure></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/da_ge_de_nv_ren/article/details/128391575" title="Linux">Linux</a></li><li><a href="https://www.bilibili.com/video/BV1pz4y1D73n?p=29&vd_source=4470be84aba61145fe9d1690fe726951" title="千锋云计算Linux教程650集，linux系统运维从入门到精通教程（Linux安装极速入门，零基础必备）">千锋云计算Linux教程650集，linux系统运维从入门到精通教程（Linux安装极速入门，零基础必备）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8集群Slurm作业管理系统安装（三）</title>
      <link href="/2024/03/28/Centos8%E9%9B%86%E7%BE%A4Slurm%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2024/03/28/Centos8%E9%9B%86%E7%BE%A4Slurm%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="slurm的安装和配置"><a href="#slurm的安装和配置" class="headerlink" title="slurm的安装和配置"></a>slurm的安装和配置</h1><h2 id="slurm的简介"><a href="#slurm的简介" class="headerlink" title="slurm的简介"></a>slurm的简介</h2><p>Slurm 任务调度工具（前身为极简Linux资源管理工具，英文：Simple Linux Utility for Resource Management，取首字母，简写为SLURM），或 Slurm，是一个用于 Linux 和 Unix 内核系统的自由开源的任务调度工具，被世界范围内的超级计算机和计算机群广泛采用。它提供了三个关键功能。第一，为用户分配一定时间的专享或非专享的资源(计算机节点)，以供用户执行工作。第二，它提供了一个框架，用于启动、执行、监测在节点上运行着的任务(通常是并行的任务，例如 MPI)，第三，为任务队列合理地分配资源。<br>大约60％的500强超级计算机上都运行着Slurm，包括2016年前世界上最快的计算机天河-2。<br>其为超算提供了三个关键功能：</p><ul><li>为用户分配一定时间的专享或非专享的资源，来执行任务</li><li>提供了用于启动、执行、监测在节点上运行的任务的框架</li><li>为任务队列合理地分配计算资源</li></ul><h2 id="slurm的架构"><a href="#slurm的架构" class="headerlink" title="slurm的架构"></a>slurm的架构</h2><p>在slurm计算集群系统，众多节点将会分为master节点（主节点&#x2F;管控节点），compute节点（计算节点）以及部分集群会有client节点（登录节点），它专门用来给用户执行各种作业调度与资源部署的指令，但多数情况是client节点和master节点部署在同一个节点上以简化部署。slurm包含四种服务（守护进程），在各个节点上有不同的部署分布：</p><ol><li>slurmctld服务：只运行于master节点，作为中心管理器用于监测资源和任务</li><li>slurmd服务，主要运行于compute节点，作用是接收调度，承担实际的计算负载</li><li>slurmdbd数据库服务，通常运行于master节点，可以将多个slurm管理的集群的记账信息记录在同一个数据库中</li><li>slurmrestd服务，通常运行于master节点，用来提供REST API与Slurm进行交互<br><img src="1.png"></li></ol><h2 id="创建slurm账户，并且保证所有节点一致"><a href="#创建slurm账户，并且保证所有节点一致" class="headerlink" title="创建slurm账户，并且保证所有节点一致"></a>创建slurm账户，并且保证所有节点一致</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export SLURM_USER=2025</span><br><span class="line">groupadd -g $SLURM_USER slurm</span><br><span class="line">useradd  -m -c &quot;SLURM manager&quot; -d /var/lib/slurm -u $SLURM_USER -g slurm  -s /bin/bash slurm</span><br></pre></td></tr></table></figure><h2 id="所有节点安装相关的依赖"><a href="#所有节点安装相关的依赖" class="headerlink" title="所有节点安装相关的依赖"></a>所有节点安装相关的依赖</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install python3 readline-devel pam-devel perl-ExtUtils-MakeMaker mailx</span><br></pre></td></tr></table></figure><h2 id="控制节点安装-slurm"><a href="#控制节点安装-slurm" class="headerlink" title="控制节点安装 slurm"></a>控制节点安装 slurm</h2><ol><li>先去<a href="https://www.schedmd.com/download-slurm/" title="slurm的官网">官网</a>下载相应的安装包，我下载的是 slurm-23.11.5.tar.bz2，并上传，然后生成rpm包。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpmbuild -ta --clean slurm-23.11.5.tar.bz2</span><br></pre></td></tr></table></figure><img src="2.png"></li><li>安装slurm<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /root/rpmbuild/RPMS/x86_64</span><br><span class="line">yum localinstall slurm-*</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制rpm包到共享区，用于计算节点的安装</span></span><br><span class="line">mkdir /opt/slurm_dir</span><br><span class="line">cp slurm-* /opt/slurm_dir</span><br></pre></td></tr></table></figure></li></ol><h2 id="计算节点安装-slurm"><a href="#计算节点安装-slurm" class="headerlink" title="计算节点安装 slurm"></a>计算节点安装 slurm</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#计算节点只需要安装</span><br><span class="line"># slurm</span><br><span class="line"># slurm-perlapi</span><br><span class="line"># slurm-pam_slurm</span><br><span class="line"># slurm-slurmd</span><br><span class="line">cd /opt/slurm_dir</span><br><span class="line">yum localinstall slurm-23.11.5-1.el8.x86_64.rpm slurm-pam_slurm-23.11.5-1.el8.x86_64.rpm slurm-perlapi-23.11.5-1.el8.x86_64.rpm slurm-slurmd-23.11.5-1.el8.x86_64.rpm -y</span><br></pre></td></tr></table></figure><h2 id="修改文件和相应的权限"><a href="#修改文件和相应的权限" class="headerlink" title="修改文件和相应的权限"></a>修改文件和相应的权限</h2><ol><li>控制节点<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建配置文件</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">slurmdbd.conf文件为slurmdbd服务的配置文件，所有者必须为slurm用户</span></span><br><span class="line">cp  /etc/slurm/slurmdbd.conf.example   /etc/slurm/slurmdbd.conf</span><br><span class="line">chown -R slurm:slurm /etc/slurm/slurmdbd.conf</span><br><span class="line">chmod -R 600 /etc/slurm/slurmdbd.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">slurm.conf文件为slurmd、slurmctld的配置文件，所有者必须为root用户</span></span><br><span class="line">cp  /etc/slurm/slurm.conf.example   /etc/slurm/slurm.conf</span><br><span class="line">chown -R root:root /etc/slurm/slurm.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">cgroup.conf文件配置默认即可</span></span><br><span class="line">cp  /etc/slurm/cgroup.conf.example   /etc/slurm/cgroup.conf</span><br><span class="line">chown -R root:root /etc/slurm/cgroup.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立slurmctld服务存储其状态等的目录，由slurm.conf中StateSaveLocation参数定义：</span></span><br><span class="line">mkdir /var/spool/slurmctld</span><br><span class="line">chown -R slurm:slurm /var/spool/slurmctld</span><br><span class="line">chmod -R 755 /var/spool/slurmctld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立日志文件存储目录，并修改目录权限</span></span><br><span class="line">mkdir /var/log/slurm</span><br><span class="line">touch /var/log/slurm/&#123;slurmd,slurmctld,slurmdbd&#125;.log</span><br><span class="line">chown -R slurm:slurm /var/log/slurm</span><br><span class="line">chmod -R 755 /var/log/slurm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立slurmd服务目录</span></span><br><span class="line">mkdir /var/spool/slurmd</span><br><span class="line">chown -R root:root /var/spool/slurmd</span><br><span class="line">chmod -R 755 /var/spool/slurmd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建pid文件并设置权限</span></span><br><span class="line">touch /var/run/slurmdbd.pid</span><br><span class="line">chown slurm:slurm /var/run/slurmdbd.pid</span><br><span class="line">chmod 755 /var/run/slurmdbd.pid</span><br></pre></td></tr></table></figure></li><li>计算节点<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -pv /etc/slurm</span><br><span class="line">mkdir -pv /var/spool/slurmd</span><br><span class="line">mkdir -pv /var/log/slurm</span><br><span class="line">touch /var/log/slurm/slurmd.log &amp;&amp; chown -R slurm:slurm /var/log/slurm &amp;&amp; chmod -R 755 /var/log/slurm</span><br></pre></td></tr></table></figure></li><li>控制节点修改 slurmdbd的 slurmdbd.conf 配置文件，可以参考：<a href="https://mp.weixin.qq.com/s/EEHurb8u46YuTssban_qew" title="022-日常研究之Slurm部署文档">022-日常研究之Slurm部署文档</a>，以下是我的配置文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/slurm/slurmdbd.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Example slurmdbd.conf file.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># See the slurmdbd.conf man page for more information.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Archive info</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ArchiveJobs=<span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ArchiveDir=<span class="string">&quot;/tmp&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ArchiveSteps=<span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ArchiveScript=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JobPurge=12</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">StepPurge=1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Authentication info</span></span></span><br><span class="line">AuthType=auth/munge</span><br><span class="line">AuthInfo=/var/run/munge/munge.socket.2 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># slurmDBD info</span></span></span><br><span class="line">DbdAddr=172.16.34.127</span><br><span class="line">DbdHost=master</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">DbdPort=7031</span></span><br><span class="line">SlurmUser=slurm</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MessageTimeout=300</span></span><br><span class="line">DebugLevel=verbose</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">DefaultQOS=normal,standby</span></span><br><span class="line">LogFile=/var/log/slurm/slurmdbd.log</span><br><span class="line">PidFile=/var/run/slurmdbd.pid</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PluginDir=/usr/lib/slurm</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PrivateData=accounts,<span class="built_in">users</span>,usage,<span class="built_in">jobs</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">TrackWCKey=<span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Database info</span></span></span><br><span class="line">StorageType=accounting_storage/mysql</span><br><span class="line">StorageHost=172.16.34.127</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">StoragePort=1234</span></span><br><span class="line">StoragePass=123456</span><br><span class="line">StorageUser=slurm</span><br><span class="line">StorageLoc=slurm_acct_db</span><br></pre></td></tr></table></figure></li><li>控制节点修改slurmd和slurmctld的配置文件slurm.conf，可以参考：<a href="https://mp.weixin.qq.com/s/EEHurb8u46YuTssban_qew" title="022-日常研究之Slurm部署文档">022-日常研究之Slurm部署文档</a>，或者使用<a href="https://slurm.schedmd.com/configurator.html" title="官方的生成工具">官方的生成工具</a>，以下是我的配置文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/slurm/slurm.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">slurm.conf file generated by configurator.html.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Put this file on all nodes of your cluster.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">See the slurm.conf man page <span class="keyword">for</span> more information.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">ClusterName=cluster</span></span><br><span class="line">SlurmctldHost=master</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SlurmctldHost=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#DisableRootJobs=NO</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">EnforcePartLimits=NO</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Epilog=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">EpilogSlurmctld=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">FirstJobId=1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MaxJobId=67043328</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">GresTypes=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">GroupUpdateForce=0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">GroupUpdateTime=600</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JobFileAppend=0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JobRequeue=1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JobSubmitPlugins=lua</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">KillOnBadExit=0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">LaunchType=launch/slurm</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Licenses=foo*4,bar</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MailProg=/bin/mail</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MaxJobCount=10000</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MaxStepCount=40000</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MaxTasksPerNode=512</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MpiDefault=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MpiParams=ports=<span class="comment">#-#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PluginDir=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PlugStackConfig=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PrivateData=<span class="built_in">jobs</span></span></span><br><span class="line">ProctrackType=proctrack/cgroup</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Prolog=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PrologFlags=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PrologSlurmctld=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PropagatePrioProcess=0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PropagateResourceLimits=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PropagateResourceLimitsExcept=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">RebootProgram=</span></span><br><span class="line">ReturnToService=1</span><br><span class="line">SlurmctldPidFile=/var/run/slurmctld.pid</span><br><span class="line">SlurmctldPort=6817</span><br><span class="line">SlurmdPidFile=/var/run/slurmd.pid</span><br><span class="line">SlurmdPort=6818</span><br><span class="line">SlurmdSpoolDir=/var/spool/slurmd</span><br><span class="line">SlurmUser=slurm</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SlurmdUser=root</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SrunEpilog=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SrunProlog=</span></span><br><span class="line">StateSaveLocation=/var/spool/slurmctld</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SwitchType=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">TaskEpilog=</span></span><br><span class="line">TaskPlugin=task/affinity,task/cgroup</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">TaskProlog=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">TopologyPlugin=topology/tree</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">TmpFS=/tmp</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">TrackWCKey=no</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">TreeWidth=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">UnkillableStepProgram=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">UsePAM=0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">TIMERS</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">BatchStartTimeout=10</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">CompleteWait=0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">EpilogMsgTime=2000</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">GetEnvTimeout=2</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">HealthCheckInterval=0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">HealthCheckProgram=</span></span><br><span class="line">InactiveLimit=0</span><br><span class="line">KillWait=30</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MessageTimeout=10</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ResvOverRun=0</span></span><br><span class="line">MinJobAge=300</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">OverTimeLimit=0</span></span><br><span class="line">SlurmctldTimeout=120</span><br><span class="line">SlurmdTimeout=300</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">UnkillableStepTimeout=60</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">VSizeFactor=0</span></span><br><span class="line">Waittime=0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SCHEDULING</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">DefMemPerCPU=0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MaxMemPerCPU=0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SchedulerTimeSlice=30</span></span><br><span class="line">SchedulerType=sched/backfill</span><br><span class="line">SelectType=select/cons_tres</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JOB PRIORITY</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityFlags=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityType=priority/multifactor</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityDecayHalfLife=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityCalcPeriod=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityFavorSmall=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityMaxAge=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityUsageResetPeriod=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityWeightAge=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityWeightFairshare=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityWeightJobSize=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityWeightPartition=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityWeightQOS=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">LOGGING AND ACCOUNTING</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">AccountingStorageEnforce=0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">AccountingStorageHost=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">AccountingStoragePass=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">AccountingStoragePort=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">AccountingStorageType=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">AccountingStorageUser=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">AccountingStoreFlags=</span></span><br><span class="line">JobCompHost=master</span><br><span class="line">JobCompLoc=slurm_jobcomp_db</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JobCompParams=</span></span><br><span class="line">JobCompPass=123456</span><br><span class="line">JobCompPort=3306</span><br><span class="line">JobCompType=jobcomp/mysql</span><br><span class="line">JobCompUser=slurm</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JobContainerType=</span></span><br><span class="line">JobAcctGatherFrequency=30</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JobAcctGatherType=</span></span><br><span class="line">SlurmctldDebug=info</span><br><span class="line">SlurmctldLogFile=/var/log/slurm/slurmctld.log</span><br><span class="line">SlurmdDebug=info</span><br><span class="line">SlurmdLogFile=/var/log/slurm/slurmd.log</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SlurmSchedLogFile=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SlurmSchedLogLevel=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">DebugFlags=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">POWER SAVE SUPPORT FOR IDLE NODES (optional)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SuspendProgram=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ResumeProgram=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SuspendTimeout=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ResumeTimeout=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ResumeRate=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SuspendExcNodes=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SuspendExcParts=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SuspendRate=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SuspendTime=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">COMPUTE NODES</span></span><br><span class="line">NodeName=node1 CPUs=4 Boards=1 SocketsPerBoard=1 CoresPerSocket=4 ThreadsPerCore=1 RealMemory=1778</span><br><span class="line">PartitionName=compute Nodes=node1 Default=YES MaxTime=INFINITE State=UP</span><br></pre></td></tr></table></figure></li><li>计算节点的信息可以获得<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">slurmd -C | head -n 1</span><br></pre></td></tr></table></figure><img src="3.png"></li><li>复制 配置文件到计算节点，保证所有节点的配置文件一致<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp /etc/slurm/slurm.conf node1:/etc/slurm/</span><br><span class="line">scp /etc/slurm/cgroup.conf node1:/etc/slurm/</span><br></pre></td></tr></table></figure></li><li>修改 slurmctld.service，要添加maridb服务 使slurmctld服务在数据库服务之后启动<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /lib/systemd/system/slurmctld.service</span><br></pre></td></tr></table></figure><img src="4.png"></li></ol><h2 id="slurm的启动"><a href="#slurm的启动" class="headerlink" title="slurm的启动"></a>slurm的启动</h2><h3 id="控制节点"><a href="#控制节点" class="headerlink" title="控制节点"></a>控制节点</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable slurmdbd slurmctld</span><br><span class="line">systemctl start slurmdbd slurmctld</span><br><span class="line">systemctl status slurmdbd slurmctld</span><br></pre></td></tr></table></figure><p><img src="5.png"><br><img src="6.png"></p><h3 id="计算节点"><a href="#计算节点" class="headerlink" title="计算节点"></a>计算节点</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable slurmd</span><br><span class="line">systemctl start slurmd</span><br><span class="line">systemctl status slurmd</span><br></pre></td></tr></table></figure><p><img src="7.png"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol><li>查看节点状态<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sinfo</span><br></pre></td></tr></table></figure><img src="8.png"></li><li>查看节点信息<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scontrol show partition</span><br></pre></td></tr></table></figure><img src="9.png"></li><li>提交任务<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">srun -N1 hostname</span><br></pre></td></tr></table></figure><img src="10.png"></li><li>提交VASP的并行任务，可以参考：<a href="/2024/03/20/Centos8-stream%E5%AE%89%E8%A3%85VASP-2024-Intel-oneAPI/" title="Centos8 stream安装VASP--2024 Intel oneAPI">Centos8 stream安装 VASP 2024 Intel oneAPI</a><br><img src="13.png"><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sbatch job.sh</span><br></pre></td></tr></table></figure><img src="14.png"><br><img src="15.png"></li><li>如果计算节点 状态为down，可以使用一下命令让其变为空闲（idle）状态<br><img src="11.png"><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scontrol update NodeName=node1 State=RESUME</span><br></pre></td></tr></table></figure><img src="12.png"></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://minglog.hzbmmc.com/2023/05/29/Slurm%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/" title="Slurm集群管理系统搭建">Slurm集群管理系统搭建</a></li><li><a href="https://mp.weixin.qq.com/s/EEHurb8u46YuTssban_qew" title="022-日常研究之Slurm部署文档">022-日常研究之Slurm部署文档</a></li><li><a href="https://www.ctyun.cn/developer/article/363542369067077" title="HPC调度基础：slurm集群的部署与配置">HPC调度基础：slurm集群的部署与配置</a></li><li><a href="https://slurm.schedmd.com/" title="slurm文档">slurm文档</a></li><li><a href="http://bbs.keinsci.com/thread-29223-1-1.html" title="[集群维护] 0基础slurm安装"> 0基础slurm安装</a></li><li><a href="https://advancedsolver.com/guide/admin/slurm-on-cluster/Installation" title="如何在服务器上安装并配置 slurm">如何在服务器上安装并配置 slurm</a></li><li><a href="https://zhuanlan.zhihu.com/p/637824704" title="slurm环境搭建">slurm环境搭建</a></li><li><a href="http://bbs.keinsci.com/thread-39120-1-1.html" title="南叔装机小记——第四篇（下集）：手搓slurm小集群">南叔装机小记——第四篇（下集）：手搓slurm小集群</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> munge </tag>
            
            <tag> slurm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8集群Slurm作业管理系统安装（二）</title>
      <link href="/2024/03/28/Centos8%E9%9B%86%E7%BE%A4Slurm%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2024/03/28/Centos8%E9%9B%86%E7%BE%A4Slurm%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="munge和mariadb软件的安装"><a href="#munge和mariadb软件的安装" class="headerlink" title="munge和mariadb软件的安装"></a>munge和mariadb软件的安装</h1><h2 id="munge的简介"><a href="#munge的简介" class="headerlink" title="munge的简介"></a>munge的简介</h2><p>munge是主要功能是认证服务，在大规模高性能计算集群中，用于生成和验证证书。slurm官方推荐使用munge作为slurm作业调度系统的认证服务，用于主控节点和计算节点之间的认证通信。配置时分为服务端和用户端，其中服务端应作为slurm调度服务的主控节点，用于管理认证服务。</p><h2 id="master节点的安装"><a href="#master节点的安装" class="headerlink" title="master节点的安装"></a>master节点的安装</h2><ol><li>确保master节点没有安装过 munge<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove munge munge-libs munge-devel -y</span><br><span class="line">userdel -r munge</span><br></pre></td></tr></table></figure></li><li>安装相关的软件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 epel-release</span></span><br><span class="line">yum install -y epel-release </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 rpmbuild</span></span><br><span class="line">yum install -y rpm-build</span><br></pre></td></tr></table></figure></li><li>因为munge安装后会自动创建munge用户，所以我们要提前创建munge用户，并且保证所有节点的munge用户的uid和gid相同<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export MUNGE_USER=2024</span><br><span class="line">groupadd -g $MUNGE_USER munge</span><br><span class="line">useradd  -m -c &quot;MUNGE User&quot; -d /var/lib/munge -u $MUNGE_USER -g munge  -s /sbin/nologin munge</span><br></pre></td></tr></table></figure></li><li>前往官网<a href="https://dun.github.io/munge/" title="munge官网">下载</a>最新的munge，我这里下载的是munge-0.5.16的版本，并上传，编译RPM包<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装相关依赖</span></span><br><span class="line">yum install -y bzip2-devel gcc openssl-devel zlib-devel</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编译RPM包</span></span><br><span class="line">rpmbuild -tb --without verify munge-0.5.16.tar.xz</span><br></pre></td></tr></table></figure></li><li>安装 munge<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /root/rpmbuild/RPMS/x86_64</span><br><span class="line">yum localinstall -y munge-0.5.16-1.el8.x86_64.rpm munge-libs-0.5.16-1.el8.x86_64.rpm munge-devel-0.5.16-1.el8.x86_64.rpm</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">复制到共享区，计算节点也需要安装</span></span><br><span class="line">mkdir /opt/munge_dir</span><br><span class="line">cp munge-0.5.16-1.el8.x86_64.rpm munge-libs-0.5.16-1.el8.x86_64.rpm munge-devel-0.5.16-1.el8.x86_64.rpm /opt/munge_dir</span><br></pre></td></tr></table></figure></li><li>创建munge.key文件，生成的文件在 &#x2F;etc&#x2F;munge下<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">产生munge.key文件</span></span><br><span class="line">sudo -u munge /usr/sbin/mungekey -v</span><br></pre></td></tr></table></figure><img src="1.png"><br><img src="2.png"></li><li>修改相关文件和文件夹的所属权限<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown munge: /etc/munge/munge.key </span><br><span class="line">chmod 400 /etc/munge/munge.key</span><br><span class="line">chown -R munge: /var/lib/munge</span><br><span class="line">chown -R munge: /var/run/munge</span><br><span class="line">chown -R munge: /var/log/munge</span><br></pre></td></tr></table></figure></li><li>启动服务并设置为开机自启<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start munge</span><br><span class="line">systemctl enable munge</span><br></pre></td></tr></table></figure></li></ol><h2 id="计算节点的安装"><a href="#计算节点的安装" class="headerlink" title="计算节点的安装"></a>计算节点的安装</h2><ol><li>确保计算节点没有安装过 munge<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove munge munge-libs munge-devel -y</span><br><span class="line">userdel -r munge</span><br></pre></td></tr></table></figure></li><li>安装相关的软件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 epel-release</span></span><br><span class="line">yum install -y epel-release </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 rpmbuild</span></span><br><span class="line">yum install -y rpm-build</span><br></pre></td></tr></table></figure></li><li>因为munge安装后会自动创建munge用户，所以我们要提前创建munge用户，并且保证所有节点的munge用户的uid和gid相同<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export MUNGE_USER=2024</span><br><span class="line">groupadd -g $MUNGE_USER munge</span><br><span class="line">useradd  -m -c &quot;MUNGE User&quot; -d /var/lib/munge -u $MUNGE_USER -g munge  -s /sbin/nologin munge</span><br></pre></td></tr></table></figure></li><li>安装 munge<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt/munge_dir/</span><br><span class="line">yum localinstall munge-0.5.16-1.el8.x86_64.rpm munge-libs-0.5.16-1.el8.x86_64.rpm munge-devel-0.5.16-1.el8.x86_64.rpm</span><br></pre></td></tr></table></figure></li><li>把master节点的munge.key 发送到计算节点<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp /etc/munge/munge.key root@node1:/etc/munge/</span><br></pre></td></tr></table></figure></li><li>设置相关权限<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 700 /etc/munge</span><br><span class="line">chown -R munge: /etc/munge</span><br><span class="line">chown -R munge: /var/lib/munge</span><br><span class="line">chown -R munge: /var/run/munge</span><br><span class="line">chown -R munge: /var/log/munge</span><br></pre></td></tr></table></figure></li><li>启动相关服务，并设置开机自动启动<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start munge</span><br><span class="line">systemctl enable munge</span><br></pre></td></tr></table></figure></li></ol><h2 id="进行验证"><a href="#进行验证" class="headerlink" title="进行验证"></a>进行验证</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">master节点输入</span></span><br><span class="line">munge -n|unmunge</span><br></pre></td></tr></table></figure><p><img src="3.png"><br>说明master节点的munge安装成功</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务节点输入</span></span><br><span class="line">munge -n|ssh node1 unmunge</span><br></pre></td></tr></table></figure><p><img src="4.png"><br>说明计算节点的munge安装成功</p><h2 id="mariadb的简介"><a href="#mariadb的简介" class="headerlink" title="mariadb的简介"></a>mariadb的简介</h2><p>MariaDB Server 是一个通用的开源关系数据库管理系统。 它是世界上最受欢迎的数据库服务器之一，拥有包括 Wikipedia、WordPress.com 和 Google 在内的知名用户。 MariaDB Server 在 GPLv2 开源许可下发布，并保证保持开源。它可用于高可用性事务数据、分析、作为嵌入式服务器，并且广泛的工具和应用程序支持 MariaDB Server。</p><h2 id="mariadb的安装"><a href="#mariadb的安装" class="headerlink" title="mariadb的安装"></a>mariadb的安装</h2><ol><li>确保控制节点和计算节点都没有安装过mariadb<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum list installed mariadb</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果有就卸载</span></span><br><span class="line">yum -y remove mariadb*</span><br></pre></td></tr></table></figure></li><li>前往<a href="https://mariadb.org/download/" title="mariad的官网">mariadb的官网</a>，获取相应版本的yum源，并复制。我这里用的是10.11版本，使用的是阿里源。<br><img src="5.png"></li><li>添加 yum 源<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/yum.repos.d/mariadb.repo</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加相应的yum源，添加</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MariaDB 10.11 RedHatEnterpriseLinux repository list - created 2024-03-31 06:10 UTC</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://mariadb.org/download/</span></span><br><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rpm.mariadb.org is a dynamic mirror <span class="keyword">if</span> your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ <span class="keyword">for</span> details.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">baseurl = https://rpm.mariadb.org/10.11/rhel/<span class="variable">$releasever</span>/<span class="variable">$basearch</span></span></span><br><span class="line">baseurl = https://mirrors.aliyun.com/mariadb/yum/10.11/rhel/$releasever/$basearch</span><br><span class="line">module_hotfixes = 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gpgkey = https://rpm.mariadb.org/RPM-GPG-KEY-MariaDB</span></span><br><span class="line">gpgkey = https://mirrors.aliyun.com/mariadb/yum/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck = 1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行</span></span><br><span class="line">yum clean all &amp;&amp; yum makecache </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发送到计算节点</span></span><br><span class="line">scp /etc/yum.repos.d/mariadb.repo node1:/etc/yum.repos.d/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在计算节点执行</span></span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">yum clean all 的主要作用是清除所有已下载软件包和元数据（metadata）以及临时文件的缓存</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">yum makecache的作用是将服务器上的软件包信息缓存到本地，以提高搜索和安装软件的速度</span></span><br></pre></td></tr></table></figure></li><li>master节点安装<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y mariadb mariadb-server mariadb-devel MariaDB-backup</span><br></pre></td></tr></table></figure></li><li>计算节点安装<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y  MariaDB-common  MariaDB-compat  libyaml</span><br></pre></td></tr></table></figure></li><li>master 节点配置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动数据库，并开机自动启动</span></span><br><span class="line">systemctl  enable  --now mariadb</span><br><span class="line">mariadb-secure-installation</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置数据库</span></span><br><span class="line">Enter current password for root (enter for none): 回车</span><br><span class="line">Switch to unix_socket authentication [Y/n] n</span><br><span class="line">Change the root password? [Y/n] y</span><br><span class="line">New password: </span><br><span class="line">Remove anonymous users? [Y/n] 回车</span><br><span class="line">Disallow root login remotely? [Y/n] n</span><br><span class="line">Remove test database and access to it? [Y/n] 回车</span><br><span class="line">Reload privilege tables now? [Y/n] 回车</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置数据库</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个新用户slurm,密码是123456,并指定使用localhost本地权限.</span></span><br><span class="line">create user &#x27;slurm&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成slurm用户,其密码是123456，可自行设定,并开启%远程登录</span></span><br><span class="line">create user &#x27;slurm&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成账户数据库slurm_acct_db</span></span><br><span class="line">create database slurm_acct_db;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">赋予slurm从本机localhost采用密码123456登录具备操作slurm_acct_db数据下所有表的全部权限</span></span><br><span class="line">grant all on slurm_acct_db.* TO &#x27;slurm&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27; with grant option;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建slurm用户并给予%远程登陆的权限,并对slurm_acct_db数据库全部授权</span></span><br><span class="line">grant all on slurm_acct_db.* TO &#x27;slurm&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27; with grant option;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成作业信息数据库slurm_jobcomp_db</span></span><br><span class="line">create database slurm_jobcomp_db;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">赋予slurm从本机localhost采用密码123456登录具备操作slurm_jobcomp_db数据下所有表的全部权限</span></span><br><span class="line">grant all on slurm_jobcomp_db.* TO &#x27;slurm&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27; with grant option;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建slurm用户并给予%远程登陆的权限,并对slurm_jobcomp_db数据库全部授权</span></span><br><span class="line">grant all on slurm_jobcomp_db.* TO &#x27;slurm&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27; with grant option;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#保存配置</span></span></span><br><span class="line">flush privileges; </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#退出</span></span></span><br><span class="line">exit;</span><br></pre></td></tr></table></figure></li><li>可以修改数据库的配置文件 &#x2F;etc&#x2F;my.cnf 。我这里就不修改了。</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://minglog.hzbmmc.com/2023/05/29/Slurm%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/" title="Slurm集群管理系统搭建">Slurm集群管理系统搭建</a></li><li><a href="https://mp.weixin.qq.com/s/EEHurb8u46YuTssban_qew" title="022-日常研究之Slurm部署文档">022-日常研究之Slurm部署文档</a></li><li><a href="https://blog.csdn.net/xhk12345678/article/details/124710893" title="munge认证服务配置-集群搭建步骤4">munge认证服务配置-集群搭建步骤4</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> munge </tag>
            
            <tag> mariadb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8集群Slurm作业管理系统安装（一）</title>
      <link href="/2024/03/28/Centos8%E9%9B%86%E7%BE%A4Slurm%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/03/28/Centos8%E9%9B%86%E7%BE%A4Slurm%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>之前我们安装了Torque作业管理系统，但是这个太老了，而且基本上就只有一些小型的高性能计算集群在使用，目前主流的是使用Slurm作业管理系统，特别是在大型的超算体系下，因此为了以后的工作，还是需要自己搭建一个Slurm作业管理系统。</p><h1 id="Chrony服务的搭建"><a href="#Chrony服务的搭建" class="headerlink" title="Chrony服务的搭建"></a>Chrony服务的搭建</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Chrony是NTP（Network Time Protocol，网络时间协议，服务器时间同步的一种协议）的另一种实现，与ntpd不同，它可以更快且更准确地同步系统时钟，最大程度的减少时间和频率误差。由于Slurm需要用到munge来做信息认证服务，而munge需要每个节点之间的时间误差在5分钟之内，因此我们需要做时间同步。</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><table><thead><tr><th align="center">主机名</th><th align="center">系统</th><th align="center">ip</th></tr></thead><tbody><tr><td align="center">master（服务端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.127</td></tr><tr><td align="center">node1（客户端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.128</td></tr></tbody></table><h2 id="服务端和客户端共同配置"><a href="#服务端和客户端共同配置" class="headerlink" title="服务端和客户端共同配置"></a>服务端和客户端共同配置</h2><ol><li><p>为了避免服务端和客户端无法通信，关闭防火墙和selinux</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改</span></span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure></li><li><p>修改hosts文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">172.16.34.127 master</span><br><span class="line">172.16.34.128 node1</span><br></pre></td></tr></table></figure></li></ol><h2 id="服务端的配置"><a href="#服务端的配置" class="headerlink" title="服务端的配置"></a>服务端的配置</h2><ol><li><p>默认下Centos8已经安装了chrony，如果没有安装可以自己安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install chrony </span><br></pre></td></tr></table></figure></li><li><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/chrony.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加</span></span><br><span class="line">allow 172.16.34.0/24</span><br></pre></td></tr></table></figure></li><li><p>配置成功后，重启服务，并配置开机自启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart chronyd.service &amp;&amp; systemctl enable chronyd.service --now</span><br></pre></td></tr></table></figure></li><li><p>查看是否成功</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ss -tlunp | grep chronyd</span><br></pre></td></tr></table></figure></li></ol><p><img src="1.png"></p><h2 id="客户端的配置"><a href="#客户端的配置" class="headerlink" title="客户端的配置"></a>客户端的配置</h2><ol><li><p>默认下Centos8已经安装了chrony，如果没有安装可以自己安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install chrony </span><br></pre></td></tr></table></figure></li><li><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/chrony.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注释掉默认的NTP服务器地址，添加服务端的地址</span></span><br><span class="line">server 172.16.34.127 iburst</span><br></pre></td></tr></table></figure></li></ol><p><img src="2.png"></p><ol start="3"><li><p>配置成功后，重启服务，并配置开机自启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart chronyd.service &amp;&amp; systemctl enable chronyd.service --now</span><br></pre></td></tr></table></figure></li><li><p>查看是否成功</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chronyc sources -v</span><br></pre></td></tr></table></figure></li></ol><p><img src="3.png"></p><ol start="5"><li>服务器地址前有^*，表示已经配置成功NTP服务器</li></ol><h1 id="NIS系统的搭建"><a href="#NIS系统的搭建" class="headerlink" title="NIS系统的搭建"></a>NIS系统的搭建</h1><ul><li>可以参考：<a href="/2024/03/22/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89/" title="Centos8集群Torque作业管理系统安装（一）">Centos8集群Torque作业管理系统安装（一）</a></li></ul><h1 id="NFS系统的搭建"><a href="#NFS系统的搭建" class="headerlink" title="NFS系统的搭建"></a>NFS系统的搭建</h1><ul><li>可以参考：<a href="/2024/03/22/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89/" title="Centos8集群Torque作业管理系统安装（二）">Centos8集群Torque作业管理系统安装（二）</a></li></ul><h1 id="集群免密登录"><a href="#集群免密登录" class="headerlink" title="集群免密登录"></a>集群免密登录</h1><ul><li>可以参考：<a href="/2024/03/23/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%89%EF%BC%89/" title="Centos8集群Torque作业管理系统安装（三）">Centos8集群Torque作业管理系统安装（三）</a></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://42cloud.cn/2020/08/09/148.html" title="Centos8配置 chrony NTP服务端及客户端">Centos8配置 chrony NTP服务端及客户端</a></li><li><a href="https://www.cnblogs.com/pipci/p/12871993.html" title="linux时间同步chrony介绍">linux时间同步chrony介绍</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> Chrony </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8集群Torque作业管理系统安装（四）</title>
      <link href="/2024/03/23/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2024/03/23/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>前面安装了这么多的软件，终于要安装我们的主角 Torque 了。组里的服务器就是用的Torque作为作业管理的。</p><h1 id="Torque-作业系统的搭建"><a href="#Torque-作业系统的搭建" class="headerlink" title="Torque 作业系统的搭建"></a>Torque 作业系统的搭建</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>对于高性能计算集群而言，作业调度系统是必不可少的工具软件，不论是单机计算还是集群计算，它的作用是更好的分配计算资源，管理用户的作业。作业调度软件有很多种，常见的有Torque、MAUI、SGE、slurm、HTcondar、openPBS等。我这里采用的Torque软件。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>关机的时候先关计算节点再关控制节点，开机的时候先开控制节点再开计算节点。</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><table><thead><tr><th align="center">主机名</th><th align="center">系统</th><th align="center">ip</th></tr></thead><tbody><tr><td align="center">master（控制节点）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.122</td></tr><tr><td align="center">node1（计算节点）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.123</td></tr></tbody></table><h2 id="控制节点和计算节点的共同配置"><a href="#控制节点和计算节点的共同配置" class="headerlink" title="控制节点和计算节点的共同配置"></a>控制节点和计算节点的共同配置</h2><ol><li>为了避免服务端和客户端无法通信，关闭防火墙和selinux<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure></li><li>修改hosts文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">172.16.34.122 master</span><br><span class="line">172.16.34.123 node1</span><br></pre></td></tr></table></figure></li></ol><h2 id="控制节点的配置"><a href="#控制节点的配置" class="headerlink" title="控制节点的配置"></a>控制节点的配置</h2><ol><li>安装相关的软件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install libxml2-devel openssl-devel gcc gcc-c++ boost-devel libtool -y</span><br></pre></td></tr></table></figure></li><li>下载 Torque 软件，相应的软件可以在本博客的<a href="https://haharcher1.github.io/download/" title="资源">资源</a>页面找到，上传到控制节点并解压。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf torque-6.1.3_gcc8.tar.gz</span><br></pre></td></tr></table></figure></li><li>进入 Torque 文件夹，并配置安装位置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd torque-6.1.3</span><br><span class="line">./configure --prefix=/usr/local/torque --with-scp --with-default-server=master #注意 master 为控制节点主机名，请根据自己的情况修改</span><br></pre></td></tr></table></figure><img src="1.png"></li><li>进行安装<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br><span class="line">make packages</span><br></pre></td></tr></table></figure></li><li>添加库到系统<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">libtool --finish /usr/local/torque/lib</span><br></pre></td></tr></table></figure><img src="2.png"></li><li>拷贝作业调度服务到 &#x2F;etc&#x2F;init.d ，当我们安装集群版本时，控制节点一般不参与计算，无需拷贝 pbs_mom ，其为作业调度的客户端服务进程，只需要 pbs_server 和pbs_trqauthd 。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp contrib/init.d/pbs_server /etc/init.d/</span><br><span class="line">cp contrib/init.d/trqauthd /etc/init.d/</span><br></pre></td></tr></table></figure></li><li>配置 Torque 环境，编译完成后会在 &#x2F;etc&#x2F;profile.d&#x2F;目录下自动生成torque.sh文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls </span><br></pre></td></tr></table></figure><img src="3.png"><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile.d/torque.sh</span><br></pre></td></tr></table></figure></li><li>设置所有用户每次登陆都配置 Torque 环境<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line">#添加 </span><br><span class="line">source /etc/profile.d/torque.sh</span><br></pre></td></tr></table></figure></li><li>设置服务开机自动启动<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable pbs_server.service</span><br><span class="line">systemctl enable trqauthd.service</span><br></pre></td></tr></table></figure></li><li>初始化并启动 Torque 服务<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./torque.setup root</span><br><span class="line">qterm</span><br><span class="line">for i in pbs_server trqauthd; do service $i start;done</span><br></pre></td></tr></table></figure><img src="4.png"></li><li>在 &#x2F;var&#x2F;spool&#x2F;torque&#x2F;server_priv&#x2F;nodes 添加计算节点的信息<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /var/spool/torque/server_priv/nodes</span><br></pre></td></tr></table></figure><img src="5.png"></li></ol><ul><li>nodes文件的添加规则为：主机名，可用CPU核心数（物理核心数），作业队列名</li><li>node1 为主机名</li><li>np&#x3D;填写该主机的可用CPU核心数，请注意，填写物理核心数，而不是超线程数</li><li>bigmem 是队列名。可以填写多个队列名</li></ul><ol start="12"><li>将计算节点的所需要的安装包上传到计算节点<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp torque-package-clients-linux-x86_64.sh torque-package-mom-linux-x86_64.sh node1:/root/</span><br><span class="line">scp contrib/init.d/pbs_mom node1:/etc/init.d/</span><br><span class="line">scp contrib/init.d/trqauthd node1:/etc/init.d/</span><br></pre></td></tr></table></figure></li></ol><h2 id="计算节点的配置"><a href="#计算节点的配置" class="headerlink" title="计算节点的配置"></a>计算节点的配置</h2><ol><li>运行安装程序<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./torque-package-mom-linux-x86_64.sh --install</span><br><span class="line">./torque-package-clients-linux-x86_64.sh --install</span><br></pre></td></tr></table></figure></li><li>修改配置文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /var/spool/torque/mom_priv/config</span><br><span class="line">#添加</span><br><span class="line">pbsserver master</span><br><span class="line">logevent 255</span><br></pre></td></tr></table></figure></li><li>启动服务设置开机自动启动<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/pbs_mom start</span><br><span class="line">systemctl enable pbs_mom </span><br><span class="line">/etc/init.d/trqauthd start</span><br><span class="line">systemctl enable trqauthd</span><br></pre></td></tr></table></figure></li><li>每一个计算节点都需要这样配置</li></ol><h2 id="重启作业调度系统"><a href="#重启作业调度系统" class="headerlink" title="重启作业调度系统"></a>重启作业调度系统</h2><ul><li>控制节点：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart pbs_server</span><br><span class="line">systemctl restart trqauthd</span><br></pre></td></tr></table></figure></li><li>计算节点：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart trqauthd</span><br><span class="line">systemctl restart pbs_mom</span><br></pre></td></tr></table></figure></li></ul><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><ul><li>for i in pbs_server pbs_sched pbs_mom trqauthd; do service $i start; done</li><li>for i in pbs_server pbs_sched pbs_mom trqauthd; do service $i stop; done</li><li>for i in pbs_server pbs_sched pbs_mom trqauthd; do service $i status; done<br>或者</li><li>&#x2F;etc&#x2F;init.d&#x2F;pbs_server start|stop|status  </li><li>&#x2F;etc&#x2F;init.d&#x2F;pbs_sched start|stop|status  </li><li>&#x2F;etc&#x2F;init.d&#x2F;pbs_mom start|stop|status  </li><li>&#x2F;etc&#x2F;init.d&#x2F;trqauthd start|stop|status</li></ul><h1 id="Maui的安装"><a href="#Maui的安装" class="headerlink" title="Maui的安装"></a>Maui的安装</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><p>Torque自带一个任务调度器 pbs_sched ，但是我们并没有安装。我们安装Maui来代替，其功能丰富，适合中小集群使用。Maui 只需装在控制节点上，计算节点上不必安装。为丰富torque的管理调度功能，一般用maui调度和管理torque作业。</p><h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><p>Maui 只需要安装在控制节点上。</p><h2 id="开始安装-Maui"><a href="#开始安装-Maui" class="headerlink" title="开始安装 Maui"></a>开始安装 Maui</h2><ol><li>下载 Maui 软件，相应的软件可以在本博客的<a href="https://haharcher1.github.io/download/" title="资源">资源</a>页面找到，上传到控制节点并解压。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf maui-3.3.1.tar.gz</span><br></pre></td></tr></table></figure></li><li>进入 Maui 文件夹，并配置安装位置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd maui-3.3.1</span><br><span class="line">./configure --prefix=/usr/local/maui --with-pbs=/usr/local/torque</span><br></pre></td></tr></table></figure></li></ol><ul><li>.&#x2F;configure 预编译</li><li>–prefix&#x3D; 指定编译安装路径</li><li>–with-pbs&#x3D;&#x2F;usr&#x2F;local&#x2F;torque 指定torque路径<br><img src="6.png"></li></ul><ol start="3"><li>安装<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>如果make过程中出现类似“&#x2F;usr&#x2F;bin&#x2F;ld: cannot find -ltorque”，编辑Makefile文件，参考如下添加torque的库路径和头文件路径：<br>export PBSCFLAGS &#x3D; -I&#x2F;usr&#x2F;local&#x2F;torque&#x2F;include<br>export PBSLDFLAGS &#x3D; -L&#x2F;usr&#x2F;local&#x2F;torque&#x2F;lib -ltorque<br><img src="15.png"></li><li>配置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi contrib/service-scripts/redhat.maui.d</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改</span></span><br><span class="line">MAUI_PREFIX=/opt -&gt; MAUI_PREFIX=/usr/local/maui</span><br><span class="line">daemon --user maui -&gt; daemon --user root</span><br></pre></td></tr></table></figure><img src="7.png"></li><li>启动 Maui ，并设置开机自动启动<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp contrib/service-scripts/redhat.maui.d /etc/init.d/maui</span><br><span class="line">chmod a+x /etc/init.d/maui</span><br><span class="line">chkconfig maui on</span><br><span class="line">systemctl enable maui #开机启动</span><br><span class="line">/etc/init.d/maui start #启动</span><br></pre></td></tr></table></figure></li><li>相关命令</li></ol><ul><li>&#x2F;etc&#x2F;init.d&#x2F;maui  start      #启动maui</li><li>&#x2F;etc&#x2F;init.d&#x2F;maui  status     #查看maui开启状态</li><li>&#x2F;etc&#x2F;init.d&#x2F;maui  restart    #重启maui</li><li>&#x2F;etc&#x2F;init.d&#x2F;maui  stop       #停止maui</li></ul><h1 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h1><ul><li>pbsnodes: Server has no node list MSG&#x3D;node list is empty - check ‘server_priv&#x2F;nodes’ file<br>用 qterm 之后重启服务</li></ul><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ol><li>控制节点和计算节点都关机重启，注意顺序</li><li>看到进程<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -e | grep 进程名字</span><br></pre></td></tr></table></figure><img src="8.png"><br><img src="9.png"></li><li>设置队列<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qmgr -c &quot;create queue bigmem queue_type=execution&quot;</span><br><span class="line">qmgr -c &quot;set queue bigmem enabled = True&quot;</span><br><span class="line">qmgr -c &quot;set queue bigmem started = True&quot; #我这里设置的队列名字是 bigmem</span><br></pre></td></tr></table></figure></li><li>使用 VASP 进行测试</li><li>准备好 VASP文件和提交任务脚本<br><img src="10.png"><br><img src="11.png"></li><li>设置好 VSAP 和 Intel oneAPI 的环境变量，可以参考：<a href="/2024/03/20/Centos8-stream%E5%AE%89%E8%A3%85VASP-2024-Intel-oneAPI/" title="Centos8 stream安装VASP--2024 Intel oneAPI">Centos8 stream安装 VASP 2024 Intel oneAPI</a></li><li>由于我的 VASP 安装在 &#x2F;opt 下面 所以我需要将 node1 的&#x2F;opt 挂载到master的 &#x2F;opt 下面，具体方法参考：<a href="/2024/03/22/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89/" title="Centos8集群Torque作业管理系统安装（二）">Centos8集群Torque作业管理系统安装（二）</a></li><li>完成后就可以提交任务。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qsub workVasp.pbs</span><br></pre></td></tr></table></figure><img src="13.png"><br><img src="14.png"><br><img src="12.png"><br>可以看到计算成功，表明我们的Torque作业管理系统安装成功。</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/387947448" title="Centos7+Torque+Maui安装">Centos7+Torque+Maui安装</a></li><li><a href="https://zhuanlan.zhihu.com/p/201400741" title="Centos 7 或 Centos 8 下集群服务器 Torque作业管理系统的安装（小白专用）">Centos 7 或 Centos 8 下集群服务器 Torque作业管理系统的安装（小白专用）</a></li><li><a href="https://gist.github.com/wangxianhe/1236d22319ddff6b42b1dcfc7f60eac7" title="CentOS 7 高性能计算（HPC）集群搭建过程">CentOS 7 高性能计算（HPC）集群搭建过程</a></li><li><a href="https://blog.csdn.net/u012460749/article/details/78583026" title="Centos7安装-多节点Torque">Centos7安装-多节点Torque</a></li><li><a href="http://bbs.keinsci.com/thread-20943-1-1.html" title="CentOS下安装PBS+maui教程">CentOS下安装PBS+maui教程</a></li><li><a href="https://cloud.tencent.com/developer/article/2158787" title="Centos7安装-多节点Torque">Centos7安装-多节点Torque</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> Torque </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8集群Torque作业管理系统安装（三）</title>
      <link href="/2024/03/23/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2024/03/23/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>搭建集群的时候需要频繁的到个个节点上去，因此需要设置节点之间的免密登录</p><h1 id="集群免密登录"><a href="#集群免密登录" class="headerlink" title="集群免密登录"></a>集群免密登录</h1><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><table><thead><tr><th align="center">主机名</th><th align="center">系统</th><th align="center">ip</th></tr></thead><tbody><tr><td align="center">master（服务端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.122</td></tr><tr><td align="center">node1（客户端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.123</td></tr></tbody></table><h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><ol><li>修改hosts文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">172.16.34.122 master</span><br><span class="line">172.16.34.123 node1</span><br></pre></td></tr></table></figure></li><li>在每台机器上都生成秘钥对<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>输入三次回车后，在家目录下会生成 .ssh 文件夹<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -a</span><br></pre></td></tr></table></figure><img src="1.png"><br>在 .ssh 目录下会看见 id_rsa（私钥）和 id_rsa.pub （公钥）<br><img src="2.png"></li><li>将 master 的 id_rsa.pub 复制到 node1<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp ~/.ssh/id_rsa.pub root@node1:~/.ssh/master_pub</span><br></pre></td></tr></table></figure><img src="3.png"><br><img src="4.png"></li><li>合并 master_pub 和 node1 的 id_rsa.pub 合并为 authorized_keys<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat master_pub id_rsa.pub &gt; authorized_keys</span><br></pre></td></tr></table></figure></li><li>将生成好的 authorized_keys 发送回 master<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp authorized_keys root@master:~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li>测试成功<br><img src="5.png"><br><img src="6.png"></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/136152982" title="linux 集群免密登录，多种方式，详细">linux 集群免密登录，多种方式，详细</a><br><a href="https://gist.github.com/wangxianhe/d9bb9a4006bc0ec456c0ddb62d69a1a8" title="CentOS7 ssh免密码访问">CentOS7 ssh免密码访问</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8集群Torque作业管理系统安装（二）</title>
      <link href="/2024/03/22/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2024/03/22/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>主要还是工作原因，需要搭建高性能计算集群，因此这里用虚拟机搭一个小的集群，学习一下。</p><h1 id="NFS系统的搭建"><a href="#NFS系统的搭建" class="headerlink" title="NFS系统的搭建"></a>NFS系统的搭建</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>对于我们进行集群计算，远程多用户提交算例不仅要求每一台服务器上用户一样，必要程序的文件路径同样要求相同，因此需要将计算节点的部分文件夹挂载到控制节点。NFS（Network File System）就可以实现这样的功能。NFS 即网络文件系统。功能是让客户端通过网络访问不同主机上磁盘里的数据。特别是我们在控制节点上装上了某个软件，但是没有在计算节点上装，一定要把这个软件地址挂载到控制节点上，不然无法进行计算，要保证软件的路径相同。NFS的实现依赖于RPC（远程过程调用）机制，RPC充当NFS服务器和客户端的中介，以完成从远程到本地的映射过程，提供RPC支持的服务为<code>rpcbind</code>，提供NFS共享的服务为<code>nfs-server</code>。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>关机的时候先关客户端再关服务端，开机的时候先开服务端再开客户端。</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><table><thead><tr><th align="center">主机名</th><th align="center">系统</th><th align="center">ip</th></tr></thead><tbody><tr><td align="center">master（服务端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.122</td></tr><tr><td align="center">node1（客户端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.123</td></tr></tbody></table><h2 id="服务端和客户端共同配置"><a href="#服务端和客户端共同配置" class="headerlink" title="服务端和客户端共同配置"></a>服务端和客户端共同配置</h2><ol><li>为了避免服务端和客户端无法通信，关闭防火墙和<code>selinux</code><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure></li><li>修改<code>hosts</code>文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">172.16.34.122 master</span><br><span class="line">172.16.34.123 node1</span><br></pre></td></tr></table></figure></li></ol><h2 id="服务端的配置"><a href="#服务端的配置" class="headerlink" title="服务端的配置"></a>服务端的配置</h2><ol><li>安装服务端需要的软件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install nfs-utils</span><br></pre></td></tr></table></figure>注意我们只安装 <code>nfs-utils</code> 就可以，<code>rpcbind</code> 属于它的依赖，也会安装上。</li><li>启动 NSF 并开启开机自动启动<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable rpcbind</span><br><span class="line">systemctl enable --now nfs-server</span><br><span class="line">systemctl start rpcbind</span><br><span class="line">systemctl start nfs-server</span><br></pre></td></tr></table></figure></li><li>我们以挂载 <code>\home</code> 为例<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/exports</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line"> /home 172.16.34.0/24(rw,sync,no_root_squash,no_all_squash)</span><br></pre></td></tr></table></figure></li></ol><ul><li>共享 <code>/home</code> 目录</li><li><code>172.16.34.0/24</code> 设置客户端的<code>ip</code>地址范围，* 代表所有，即没有限制</li><li><code>rw</code>: 权限设置，可读可写。</li><li><code>ro</code>: 权限设置，只读。</li><li><code>sync</code>: 同步共享目录。</li><li><code>no_root_squash</code>: 可以使用<code>root</code>授权。</li><li><code>no_all_squash</code>: 可以使用普通用户授权。</li></ul><ol start="4"><li>刷新配置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exportfs -rv</span><br></pre></td></tr></table></figure></li><li>重启 NFS 服务<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart nfs-server</span><br></pre></td></tr></table></figure></li><li>检查一下本地的共享目录<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">showmount -e 主机名</span><br></pre></td></tr></table></figure><img src="1.png"></li></ol><h2 id="客户端的配置"><a href="#客户端的配置" class="headerlink" title="客户端的配置"></a>客户端的配置</h2><ol><li>安装客户端需要的软件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install nfs-utils</span><br></pre></td></tr></table></figure></li><li>启动 NFS 相关的服务并设置开机启动<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable rpcbind</span><br><span class="line">systemctl enable --now nfs-server</span><br><span class="line">systemctl start rpcbind</span><br><span class="line">systemctl start nfs-server</span><br></pre></td></tr></table></figure></li><li>检查服务端的共享目录<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">showmount -e 服务端主机名</span><br></pre></td></tr></table></figure><img src="2.png"></li><li>挂载共享文件夹<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount -t nfs 服务端主机名:/home/ /home/</span><br></pre></td></tr></table></figure><img src="3.png"></li><li>查看挂载<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount</span><br></pre></td></tr></table></figure><img src="4.png"></li><li>测试挂载，在客户端的共享区创建文件，在服务端可以看到相应的文件<br><img src="5.png"><br><img src="6.png"><br>7.设置开机自动挂载<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.local</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">mount -t nfs 主机名:/home/ /home/</span><br></pre></td></tr></table></figure></li><li>关机之后重启<br><img src="7.png"><br><img src="8.png"></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://developer.aliyun.com/article/834355" title="如果有人问你Centos8怎么安装配置NFS，就把这篇文章丢给她!">如果有人问你Centos8怎么安装配置NFS，就把这篇文章丢给她!</a></li><li><a href="https://gist.github.com/wangxianhe/d42c0b777287f215d5c18757fc0e0308" title="CentOS nfs服务">CentOS nfs服务</a></li><li><a href="https://blog.csdn.net/suifeng1984114/article/details/122467608" title="Centos8 NFS服务器搭建">Centos8 NFS服务器搭建</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> NFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8集群Torque作业管理系统安装（一）</title>
      <link href="/2024/03/22/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/03/22/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>主要还是工作原因，需要搭建高性能计算集群，因此这里用虚拟机搭一个小的集群，学习一下。</p><h1 id="NIS服务的搭建"><a href="#NIS服务的搭建" class="headerlink" title="NIS服务的搭建"></a>NIS服务的搭建</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>对于一个高性能计算集群，里面有很多台服务器，而且一般每台服务器都会有相同的用户，因此如果对每一台服务器都去设置相同的用户的用户名和密码，那将是一个非常繁杂的问题，特别是如果要进行增删改那就是巨大的任务量，因为每台服务器都要去增删改。那么，如果能够有一台服务器作为主节点来管理该集群中所有服务器的帐号密码，当其他的服务器有用户登录的需求时，可以到这台服务器上去查询请求相关的帐号密码等信息，如此这样一来，如果想要增删改，只需要到主节点服务器上面进行处理即可，便于管理。NIS（Network Information Services）就可以实现这样的功能。NIS早期为Sun Yellow Pages 简称YP 黄页的意思。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><h3 id="NIS-server-（服务端）"><a href="#NIS-server-（服务端）" class="headerlink" title="NIS server （服务端）"></a>NIS server （服务端）</h3><ul><li>NIS 服务端包括 master 和 slave服务端两种，slave的作用主要是做备份，master出现问题后，slave代替master工作，以此不让整个系统崩溃。</li></ul><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><ol><li>master先把帐号密码相关文件制作成数据库文件。</li><li>master告诉slave来更新或者slave主动来更新。</li><li>如果帐号密码，需要重新制作数据库文件并重新同步master和slave。</li></ol><h3 id="NIS-client（客户端）"><a href="#NIS-client（客户端）" class="headerlink" title="NIS client（客户端）"></a>NIS client（客户端）</h3><h4 id="工作流程-1"><a href="#工作流程-1" class="headerlink" title="工作流程"></a>工作流程</h4><ol><li>当用户登录 NIS 客户端时，会优先查询本机的账号和密码。</li><li>如果没有找到账号和密码，开始向整个 NIS 网域的主机广播查询。</li><li>每个 NIS 服务端（master&#x2F;slave）都可以进行相应，先响应者优先。</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>关机的时候先关客户端再关服务端，开机的时候先开服务端再开客户端。</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><table><thead><tr><th align="center">主机名</th><th align="center">系统</th><th align="center">ip</th></tr></thead><tbody><tr><td align="center">master（服务端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.122</td></tr><tr><td align="center">node1（客户端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.123</td></tr></tbody></table><h2 id="服务端和客户端共同配置"><a href="#服务端和客户端共同配置" class="headerlink" title="服务端和客户端共同配置"></a>服务端和客户端共同配置</h2><ol><li>为了避免服务端和客户端无法通信，关闭防火墙和selinux<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure></li><li>修改hosts文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">172.16.34.122 master</span><br><span class="line">172.16.34.123 node1</span><br></pre></td></tr></table></figure></li></ol><h2 id="服务端的配置"><a href="#服务端的配置" class="headerlink" title="服务端的配置"></a>服务端的配置</h2><ol><li>安装服务端需要的软件：ypserv, yp-tools, rpcbind<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install ypserv yp-tools rpcbind</span><br></pre></td></tr></table></figure></li></ol><ul><li>ypserv：提供 NIS Server端的设定软件</li><li>yp-tools：提供 NIS 相关的查寻指令功能</li><li>rpcbind：提供RPC程序号码和通用地址互相转换</li></ul><ol start="2"><li>设置 NIS 域名<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nisdomainname archer # NIS 域名为 archer</span><br></pre></td></tr></table></figure></li><li>设置自动挂载 NIS 域名，设置相关权限<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.d/rc.local</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">/bin/nisdomainname archer</span><br><span class="line">chmod 777 /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure></li><li>设置172.16.34.0网段访问权限<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/ypserv.conf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">172.16.34.0: *: *:none</span><br></pre></td></tr></table></figure>相关功能<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 192.168.10.110:*:*:none #给予该IP访问权限</span><br><span class="line">- 192.168.10.110:*:*:deny #拒绝该IP访问权限</span><br><span class="line">-               :*:*:deny #拒绝所有网络的访问权限</span><br></pre></td></tr></table></figure></li><li>建立存放用户信息的数据库<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/lib64/yp/ypinit -m  #next host to add：需要ctrl+d</span><br></pre></td></tr></table></figure><img src="2.png"></li><li>创建测试用户<br><img src="1.png"></li><li>同步新用户信息到数据库，注意：每次有用户数据更新，都要执行<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /var/yp</span><br><span class="line">make</span><br></pre></td></tr></table></figure><img src="3.png"></li><li>重新启动服务，设置为开机自启动<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart ypserv.service yppasswdd.service rpcbind.service</span><br><span class="line">systemctl enable ypserv.service yppasswdd.service rpcbind.service </span><br></pre></td></tr></table></figure><img src="4.png"></li></ol><h2 id="客户端的配置"><a href="#客户端的配置" class="headerlink" title="客户端的配置"></a>客户端的配置</h2><ol><li>安装客户端需要的软件：ypbind, rpcbind, oddjob-mkhomedir<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install ypbind rpcbind oddjob-mkhomedir</span><br></pre></td></tr></table></figure></li></ol><ul><li>ypbind ：提供 NIS Client 端的设定软件</li><li>oddjob-mkhomedir：用来创建主目录</li></ul><ol start="2"><li><p>设置域名</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nisdomainname archer</span><br></pre></td></tr></table></figure></li><li><p>开启自动挂载 NIS 域名，并设置权限</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.d/rc.local</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">/bin/nisdomainname archer</span><br><span class="line">chmod 777 /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure></li><li><p>指定 NIS 域和服务器 ip</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/yp.conf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">domain archer server master</span><br></pre></td></tr></table></figure></li><li><p>重新启动服务，设置开机自启</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart ypbind.service rpcbind.service nis-domainname oddjobd.service</span><br><span class="line">systemctl enable --now ypbind.service rpcbind.service nis-domainname oddjobd.service</span><br></pre></td></tr></table></figure></li><li><p>查看用户是否加入 archer 域中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yptest</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]# yptest</span><br><span class="line">Test 1: domainname</span><br><span class="line">Configured domainname is &quot;archer&quot;</span><br><span class="line"></span><br><span class="line">Test 2: ypbind</span><br><span class="line">Use Protocol V1: Used NIS server: 172.16.34.122</span><br><span class="line">Use Protocol V2: Used NIS server: 172.16.34.122</span><br><span class="line">Use Protocol V3:</span><br><span class="line">ypbind_nconf:</span><br><span class="line">nc_netid: udp</span><br><span class="line">nc_semantics: 1</span><br><span class="line">nc_flag: 1</span><br><span class="line">nc_protofmly: &#x27;inet&#x27;</span><br><span class="line">nc_proto: &#x27;udp&#x27;</span><br><span class="line">nc_device: &#x27;-&#x27;</span><br><span class="line">nc_nlookups: 0</span><br><span class="line">ypbind_svcaddr: 172.16.34.122:805</span><br><span class="line">ypbind_servername: master</span><br><span class="line">ypbind_hi_vers: 2</span><br><span class="line">ypbind_lo_vers: 2</span><br><span class="line"></span><br><span class="line">Test 3: yp_match</span><br><span class="line">WARNING: No such key in map (Map passwd.byname, key nobody)</span><br><span class="line"></span><br><span class="line">Test 4: yp_first</span><br><span class="line">user1 user1:$6$IVDk9bvENpB.vNaU$Jg1oZ2W2j9sIysW6kVysZBz5I67u.SWvQBPrype32FiosWH5td0XIOcoSPGlPI2L./aTjQZ5e..grUSAe1piN1:1001:1002::/home/user1:/bin/bash</span><br><span class="line"></span><br><span class="line">Test 5: yp_next</span><br><span class="line">user2 user2:$6$Fztg7jJWLUMjmiIC$jsnlqAveJ8Vr22MRPfzjjVHY5LiNedgv1GiEHZoCEhwQ6iODCkDxLH8gV9.ChwWwk3teOnvRQHshlcqLouvOt1:1002:1003::/home/user2:/bin/bash</span><br><span class="line">user_test user_test:$6$N74q30Iqd8OgX7mX$JvhizpG0Hg3tdtc9bAnqx2JQpiv.DpywRiDSGM/csz5ICLMdGMeMVSYbp0l9ZhoUD10iwvg9wiq.unS/Nklue1:1000:1001::/home/user_test:/bin/bash</span><br><span class="line"></span><br><span class="line">Test 6: yp_master</span><br><span class="line">master</span><br><span class="line"></span><br><span class="line">Test 7: yp_order</span><br><span class="line">1711108162</span><br><span class="line"></span><br><span class="line">Test 8: yp_maplist</span><br><span class="line">netid.byname</span><br><span class="line">group.bygid</span><br><span class="line">group.byname</span><br><span class="line">passwd.byuid</span><br><span class="line">passwd.byname</span><br><span class="line">mail.aliases</span><br><span class="line">protocols.byname</span><br><span class="line">protocols.bynumber</span><br><span class="line">services.byservicename</span><br><span class="line">services.byname</span><br><span class="line">rpc.bynumber</span><br><span class="line">rpc.byname</span><br><span class="line">hosts.byaddr</span><br><span class="line">hosts.byname</span><br><span class="line">ypservers</span><br><span class="line"></span><br><span class="line">Test 9: yp_all</span><br><span class="line">user1 user1:$6$IVDk9bvENpB.vNaU$Jg1oZ2W2j9sIysW6kVysZBz5I67u.SWvQBPrype32FiosWH5td0XIOcoSPGlPI2L./aTjQZ5e..grUSAe1piN1:1001:1002::/home/user1:/bin/bash</span><br><span class="line">user2 user2:$6$Fztg7jJWLUMjmiIC$jsnlqAveJ8Vr22MRPfzjjVHY5LiNedgv1GiEHZoCEhwQ6iODCkDxLH8gV9.ChwWwk3teOnvRQHshlcqLouvOt1:1002:1003::/home/user2:/bin/bash</span><br><span class="line">user_test user_test:$6$N74q30Iqd8OgX7mX$JvhizpG0Hg3tdtc9bAnqx2JQpiv.DpywRiDSGM/csz5ICLMdGMeMVSYbp0l9ZhoUD10iwvg9wiq.unS/Nklue1:1000:1001::/home/user_test:/bin/bash</span><br><span class="line">1 tests failed</span><br></pre></td></tr></table></figure></li><li><p>配置用户身份验证</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">authselect select nis --force </span><br></pre></td></tr></table></figure><p><img src="5.png"></p></li><li><p>配置初次登陆自动创建家目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">authselect enable-feature with-mkhomedir</span><br></pre></td></tr></table></figure><p><img src="6.png"></p></li><li><p>登录测试</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - user2</span><br></pre></td></tr></table></figure><p><img src="7.png"></p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/qq_63986545/article/details/126101135" title="Centos8.5搭建NIS详细步骤">Centos8.5搭建NIS详细步骤</a></li><li><a href="https://www.cnblogs.com/wangmuchen/p/14671708.html" title="Centos8.3-NIS">Centos8.3-NIS</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> NIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2024/03/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/03/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><h2 id="GNU的简介"><a href="#GNU的简介" class="headerlink" title="GNU的简介"></a>GNU的简介</h2><p>GNU 于1983年由Richard Stallman（RMS）发起，意在为所有软件用户能够自由控制自己的计算而构建一款由大家共同努力开发而成的操作系统。RMS今天仍然是GNU的首席搞事者。<br>GNU的基本目标和一贯目标是提供一个和Unix兼容的100% 自由软件的操作系统。不是95%、也不是99.5%、而是100%自由。这个系统的名字叫GNU，是GNU’s Not Unix的首字母递归缩写—这是对Unix的技术思想致敬的一种方法，同时表达GNU有所不同。从技术上说，GNU很像Unix。但是它不同于Unix，GNU给予其用户自由。<br>以后工作会经常用到 Linux 系统，在这里记录一下常用的命令，持续更新。</p><h2 id="GNU-Linux的简介"><a href="#GNU-Linux的简介" class="headerlink" title="GNU&#x2F;Linux的简介"></a>GNU&#x2F;Linux的简介</h2><p>GNU&#x2F;Linux 是一种计算机操作系统：一系列能让您与计算机进行交互操作并运行其它程序的程序。<br>操作系统由多种基础程序构成。它们使计算机可以与用户进行交流并接受指令，读取数据或将其写入硬盘、磁带或打印机，控制内存的使用，以及运行其它软件。操作系统最重要的组成部分是内核。在 GNU&#x2F;Linux 系统中，Linux 就是内核组件。而该系统的其余部分主要是由 GNU 工程编写和提供的程序组成。因为单独的 Linux 内核并不能成为一个可以正常工作的操作系统，所以我们更倾向使用 “GNU&#x2F;Linux” 一词来表达人们通常所说的 “Linux”。</p><p>GNU&#x2F;Linux 是以 Unix 操作系统为原型创造的。自从诞生之日起，它就被设计成一种多任务、多用户的系统。这些特点使 GNU&#x2F;Linux 完全不同于其它著名的操作系统。事实上，GNU&#x2F;Linux 比您所能想象到更加特别。与其它操作系统绝然相反的是，没人真正拥有 GNU&#x2F;Linux，其大部分开发工作都是由无偿的志愿者完成的。<br>后来演变为 GNU&#x2F;Linux 系统的开发工作开始于 1984 年。当时，自由软件基金会 开始研发被称为 GNU 的自由的类 Unix 操作系统。<br>GNU 工程 开发了大量用于 Unix 的自由软件工具和类 Unix 操作系统，例如 GNU&#x2F;Linux。这些工具使用户能执行从日常俗事(例如在系统中复制和删除文件)到神秘操作(例如书写和编译程序或对多种文档格式进行熟练的编辑工作)的各种任务。<br>虽然有许多组织和个人都对 GNU&#x2F;Linux 的发展作出了帮助，但是自由软件基金会依然是最大的单个贡献者。他不仅仅创造了绝大部分在 GNU&#x2F;Linux 中使用的工具，还为 GNU&#x2F;Linux 的存在提供了理论和社会基础。</p><p>Linux 内核 的首次面世是在 1991 年。当时，名为 Linus Torvalds 的芬兰计算机科学系学生在 Usenet 新闻组 comp.os.minix 上发布了一种 Minix 替代内核的早期版本。请看 Linux International 的 Linux 历史。<br>在一些子系统维护人员的帮助下，Linus Torvalds 一直协调着数百位开发人员的工作。Linux 内核有一个官方网站。<br>GNU&#x2F;Linux 用户在挑选软件方面有着极大的自由。例如，他们可以选择几十种不同的命令行外壳和多种图形桌面。这通常让其它操作系统的用户手足无措，他们甚至从来没想过命令行和桌面其实是可以更换的。<br>GNU&#x2F;Linux 很少会崩溃、适合在同一时间运行多个程序，而且比大多数操作系统更为安全。有了这些优势，Linux 成为在服务器市场上增长最快的操作系统。近来，它还开始在家庭和商业用户中变得越来越流行。</p><h2 id="服务器类型"><a href="#服务器类型" class="headerlink" title="服务器类型"></a>服务器类型</h2><ul><li>塔式服务器<br><img src="1.jpg"></li><li>机架式服务器<br><img src="2.jpg"></li><li>刀片式服务器<br><img src="3.png"></li></ul><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>命令语法：命令  选项  参数</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">命令 <span class="comment">#选项 #参数</span></span></span><br><span class="line"> ls    -l    /</span><br></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a  #查看ip</span><br><span class="line">nmcli connection down enp0s3 &amp;&amp; nmcli connection up enp0s3 ——重启网卡enp0s3</span><br><span class="line">ping www.baidu.com  #向某个网址发送请求，检查网络是否通畅</span><br></pre></td></tr></table></figure><h2 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname 主机名 #设置主机名</span><br></pre></td></tr></table></figure><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf -y install 软件名  #下载软件</span><br><span class="line">yum -y install 软件名  #下载软件</span><br></pre></td></tr></table></figure><h2 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su - 用户名 #root用户登陆其他账号</span><br></pre></td></tr></table></figure><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -e | grep 进程名字 #查看进程</span><br></pre></td></tr></table></figure><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令名 --help #获取帮助信息</span><br><span class="line">man 命令名 #获取帮助信息。manual</span><br><span class="line">watch -n2 &#x27;ls /root&#x27; #每过2秒去执行引号里面的内容</span><br></pre></td></tr></table></figure><h2 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">which 命令名 #查找命令的路径</span><br></pre></td></tr></table></figure><h2 id="查看终端"><a href="#查看终端" class="headerlink" title="查看终端"></a>查看终端</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tty</span><br></pre></td></tr></table></figure><h2 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">free -m #以兆为单位</span><br><span class="line">free -k #以kB为单位</span><br><span class="line">free -g #以G为单位</span><br></pre></td></tr></table></figure><h2 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a>倒计时</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sleep n #n秒倒计时</span><br><span class="line">sleep n &amp; #n秒倒计时，后台运行</span><br></pre></td></tr></table></figure><h2 id="文件和用户管理"><a href="#文件和用户管理" class="headerlink" title="文件和用户管理"></a>文件和用户管理</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>Linux一切皆是文件。Linux 的一切资源都放在 &#x2F; 根目录下。<br><img src="4.png"></p><ul><li>&#x2F;bin：Binary的缩写。存放系统命令，普通用户和 root 都可以执行。</li><li>&#x2F;boot： 启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</li><li>&#x2F;dev： Device的缩写。存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</li><li>&#x2F;etc： Etcetera的缩写。存放所有的系统管理所需要的配置文件和子目录。</li><li>&#x2F;home： 用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</li><li>&#x2F;root： 该目录为系统管理员，也称作超级权限者的用户主目录。</li><li>&#x2F;run： 运行目录。是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。</li><li>&#x2F;sbin： s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</li><li>&#x2F;lib： Library的缩写。这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</li><li>&#x2F;lib64： 64位相关的库会放在这。</li><li>&#x2F;media： linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</li><li>&#x2F;mnt： 系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。</li><li>&#x2F;opt： optional的缩写。这是给主机额外安装软件所摆放的目录。</li><li>&#x2F;proc： Processes的缩写。&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里。</li><li>&#x2F;srv： 该目录存放一些服务启动之后需要提取的数据。</li><li>&#x2F;sys： 虚拟文件系统。和 &#x2F;proc&#x2F; 目录相似，该目录中的数据都保存在内存中，主要保存与内核相关的信息。</li><li>&#x2F;tmp： temporary的缩写这个目录是用来存放一些临时文件的。</li><li>&#x2F;usr： unix system resources缩写。用于存储系统软件资源。</li><li>&#x2F;var： 用于存储动态数据，例如缓存、日志文件、软件运行过程中产生的文件等。这些日志就被记录到这个目录下，具体在 &#x2F;var&#x2F;log 目录下，另外 mail 的预设放置也是在这里。</li><li>&#x2F;lost+found： 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</li><li>&#x2F;selinux：这个目录是 Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</li><li>&#x2F;usr&#x2F;bin：系统用户使用的应用程序。</li><li>&#x2F;usr&#x2F;sbin：超级用户使用的比较高级的管理程序和系统守护程序。</li><li>&#x2F;usr&#x2F;src：内核源代码默认的放置目录。</li></ul><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><ul><li>普通文件： - 表示</li><li>文件夹：d 表示<br><img src="5.png"></li><li>设备文件（块设备）存储设备硬盘，U盘&#x2F;dev&#x2F;sda，&#x2F;dev&#x2F;sda1等：b 表示</li><li>设备文件（字符文件）打印机，终端&#x2F;dev&#x2F;tty1等：c表示</li><li>链接文件（淡蓝色）：l 表示</li><li>套接字文件：s 表示</li><li>管道文件：p 表示</li></ul><h3 id="与文件相关的命令"><a href="#与文件相关的命令" class="headerlink" title="与文件相关的命令"></a>与文件相关的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls #列出目录下的文件</span><br><span class="line">ls -l #列出详细信息</span><br><span class="line">ls -a #列出所有文件，隐藏文件</span><br><span class="line">ls -d #查看文件夹的信息</span><br><span class="line">cd 目录 #切换目录</span><br><span class="line">pwd #打印当前路径</span><br><span class="line">touch 文件路径 #用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件</span><br><span class="line">touch /home/&#123;a,b&#125;.txt ##在home下创建a.txt和b.txt</span><br><span class="line">mkdir 文件夹路径 #创建文件夹</span><br><span class="line">mkdir -p 文件夹路径 #确保目录名称存在，不存在的就建一个。</span><br><span class="line">mkdir /home/&#123;dir1,dir2&#125; #在home下创建dir1和dir2</span><br><span class="line">mkdir -v 文件夹路径 #显示创建的过程</span><br><span class="line">cp 源文件 目标文件夹或者目标文件 # 复制源文件到目标文件夹或者目标文件</span><br><span class="line">cp -r 源文件夹 目标文件夹 # 递归复制源文件夹到目标文件夹</span><br><span class="line">mv 源文件路径 目标文件路径 #把源文件移动到目标路径，当源和目标的路径一致时，其效果就是改变文件名字</span><br><span class="line">rm -rf 文件或目录的路径 #强制删除文件或者文件夹</span><br><span class="line">cat 文件路径 #查看文件内容</span><br><span class="line">cat -n 文件路径 #带编号查看文件内容</span><br><span class="line">more 文件路径 #查看文件内容，带翻页</span><br><span class="line">head -n 文件路径 #查看文件前n行</span><br><span class="line">tail -n 文件路径 #查看文件后n行</span><br><span class="line">grep 内容 文件路径 #过滤文件内容</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="comment">#重定向，覆盖</span></span></span><br><span class="line">ls -l &gt; a.txt</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; <span class="comment">#追加</span></span></span><br><span class="line">ls -l &gt;&gt; a.txt</span><br><span class="line">gedit 文件名 #linux的文本编辑器</span><br><span class="line">vi/vim 文件路径  #vim是vi的升级版</span><br><span class="line">i #进入输入模式</span><br><span class="line">a #进入输入模式，光标移动一个字符</span><br><span class="line">o #进入输入模式。光标换行</span><br><span class="line">esc #进入命令行模式</span><br><span class="line">: #命令行模式下进入末尾模式</span><br><span class="line">:wq #保存文件退出</span><br><span class="line">:q! #强制退出不保存</span><br><span class="line">:set nu #显示行号</span><br><span class="line">:set list #显示控制字符</span><br><span class="line">:set nonu #取消设置行号</span><br><span class="line">:w #保存</span><br><span class="line">:q #退出</span><br><span class="line">:n,m s/原内容/新内容/g #把第n到m行的所有的原内容替换成新内容，g是全局</span><br><span class="line">:w/tep/a.txt #另存为/tem/a.txt</span><br><span class="line">v #命令行模式下进入可视模式 ，可对字符进行选择，类似于鼠标选东西</span><br><span class="line">yy # 复制一行</span><br><span class="line">p  # 粘贴一行</span><br><span class="line">dd #删除一行</span><br><span class="line">nyy #复制n行</span><br><span class="line">ndd #删除n行</span><br><span class="line">u #撤销操作</span><br><span class="line">x #删除某个字符</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##光标定位</span></span></span><br><span class="line">hjkl #上下左右</span><br><span class="line">0 #进入行首</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="comment">#进入行尾</span></span></span><br><span class="line">gg #进入页首</span><br><span class="line">G #进入页尾</span><br><span class="line">nG或者ngg #进入第n行</span><br><span class="line">/string #末行模式下查找string，用n进行选择下一个，用N往上翻</span><br><span class="line">vim未正常关闭所产生的临时文件.swap文件，删除.swap文件就可以</span><br><span class="line">. #当前目录</span><br><span class="line">.. #上一级目录</span><br></pre></td></tr></table></figure><h3 id="与用户和组相关的基本知识"><a href="#与用户和组相关的基本知识" class="headerlink" title="与用户和组相关的基本知识"></a>与用户和组相关的基本知识</h3><p>所有的进程和文件都是属于用户的</p><ul><li>用户基本信息文件 &#x2F;etc&#x2F;passwd<br>7列的信息用冒号隔开<table><thead><tr><th align="center">用户名</th><th align="center">密码占位符</th><th align="center">uid</th><th align="center">gid</th><th align="center">描述</th><th align="center">HOME</th><th align="center">shell</th></tr></thead><tbody><tr><td align="center">root</td><td align="center">x</td><td align="center">0</td><td align="center">0</td><td align="center">root</td><td align="center">&#x2F;root</td><td align="center">&#x2F;bin&#x2F;bash</td></tr></tbody></table></li></ul><p><img src="6.png"><br>第一列：用户名<br>第二列：密码占位符，通常是x，具体内容不在这里<br>第三列：uid（用户的身份证号），特权用户uid：0。系统用户uid：1~499。普通用户uid：1000+<br>第四列：gid（组的id号）<br>第五列：描述，账号的补充信息，餐厅经理啥的，一般为用户名。<br>第六列：家目录，登录系统时，所在目录。<br>第七列：登录shell，命令解释器。版本很多，比如ashell，bshell，cshell，bash。&#x2F;bin&#x2F;bash就是执行bash，但是有些用户不能登录，比如&#x2F;sbin&#x2F;nologin。</p><ul><li>用户密码文件 &#x2F;etc&#x2F;shadow<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Huang:$6$iNeHX:19818:0:99999:7:::</span><br></pre></td></tr></table></figure>第一列：用户名 Huang<br>第二列：加密后的密码，$6$iNeHX，$6$表示用SHA-512算法加密。*表示密码被锁定，!!表示密码过期。<br>第三列：最后一次修改时间，比如1970年1月1日到2024年4月5日，过了多少天。<br>第四列：最小间隔 0，两次密码修改之间，需要间隔的天数。0表示当天可以修改密码，如果为5那么必须过了5天才能改密码。<br>第五列：最大时间间隔 99999，密码的有效期，每隔多长时间要改密码，99999基本表示永久。<br>第六列：警告时间（7），离密码到期还有7天的时候，提醒你改不改密码，改不改看你自己。<br>第七列： 不活动时间，一般没写，假如是28，用户不登录系统28天内没事，过了28天就是禁用冻结你。<br>第八列：失效时间，一般没写，假如为30，到了30天，你的账号就不能用了。<br>第九列： 保留<br>基本上只有前两列有用。<br><img src="7.png"></li><li>组信息文件 &#x2F;etc&#x2F;group<br>会创造一个和用户同名的组，该用户属于这个组<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root:x:0:</span><br></pre></td></tr></table></figure>第一列：组名，root<br>第二列：组密码，用x表示，一般不设密码<br>第三列：组ID，0<br>第四列：组成员<br><img src="8.png"></li></ul><h3 id="与用户相关的命令"><a href="#与用户相关的命令" class="headerlink" title="与用户相关的命令"></a>与用户相关的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd user01 #创建用户user01</span><br><span class="line">useradd user02 -u 1506 #创建用户并指定uid</span><br><span class="line">useradd user02 -d 目录 #创建用户并指定家目录</span><br><span class="line">id user01 #查看user01</span><br><span class="line">passwd user01 #为user01添加或修改密码</span><br><span class="line">userdel -r user02 #删除user02并删除家目录</span><br><span class="line">usermod #修改用户的模式</span><br><span class="line">usermod -s /sbin/nologin user01 #修改登录shell，user01无法登录</span><br><span class="line">whoami #查看当前用户是谁</span><br></pre></td></tr></table></figure><h3 id="与组相关的命令"><a href="#与组相关的命令" class="headerlink" title="与组相关的命令"></a>与组相关的命令</h3><p>一个用户可以在多个组中，一个组可以拥有多个用户</p><h4 id="组的类型"><a href="#组的类型" class="headerlink" title="组的类型"></a>组的类型</h4><p>相对于用户zhangsan来说，他加入了zhangsan组，lisi组和wangwu组</p><ul><li>基本组：随用户而创建，组名同用户，只能有一个，zhangsan组，可以在&#x2F;etc&#x2F;passwd中看到。</li><li>附加组：用户加入的其他组，lisi组和wangwu组。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd group01 #创建组group01</span><br><span class="line">groupadd group02 -g 2000 #创建组group02，并且组id为2000</span><br><span class="line">groupdel group02 #删除组group02</span><br><span class="line">-u 制定用户的uid</span><br><span class="line">-g 制定用户的基本组</span><br><span class="line">-G 制定用户的附加组</span><br><span class="line">/etc/passwd 可以看用户的基本组</span><br><span class="line">/etc/group 可以查看用户的附加组。id命令也可以看</span><br><span class="line">usermod AAA -g CCC #修改用户AAA的基本组为CCC</span><br><span class="line">usermod BBB -G CCC #修改用户BBB的附加组为CCC</span><br><span class="line">gpasswd -d BBB CCC #将用户BBB从组CCC中删除</span><br></pre></td></tr></table></figure></li></ul><h4 id="用户的提权"><a href="#用户的提权" class="headerlink" title="用户的提权"></a>用户的提权</h4><p>当普通用户需要更多的权利去执行某些任务时，需要提权。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su #普通用户使用su切换到root身份</span><br><span class="line">su - root #切换到root用户</span><br><span class="line">su - 用户名 #切换到某个用户</span><br><span class="line">exit #退出</span><br><span class="line">sudo #使用普通用户时，使用sudo完成部分特权指令</span><br><span class="line">用户名 主机名=命令 #给用户赋予特定的命令，可以在vim /etc/sudoers进行编辑</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#例如</span></span></span><br><span class="line">AAA localhost=/usr/sbin/useradd, /usr/sbin/userdel #赋予普通用户使用useradd和userdel命令</span><br><span class="line">sudo useradd u1 #普通用户使用sudo创建用户</span><br></pre></td></tr></table></figure><h3 id="用户的权限"><a href="#用户的权限" class="headerlink" title="用户的权限"></a>用户的权限</h3><h4 id="基本权限UGO"><a href="#基本权限UGO" class="headerlink" title="基本权限UGO"></a>基本权限UGO</h4><ul><li>属主：u</li><li>属主：g</li><li>其他人：o</li><li>特殊对象：所有人：a(u+g+o)</li></ul><h4 id="权限的种类"><a href="#权限的种类" class="headerlink" title="权限的种类"></a>权限的种类</h4><ul><li>读：r&#x3D;4</li><li>写：w&#x3D;2</li><li>执行：x&#x3D;1<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-rw-r--r--. 1 root root 0 Apr  6 16:34 1.txt</span><br><span class="line">第1个：-表示为文件</span><br><span class="line">第2-4：rw-为属主权限为可读可写</span><br><span class="line">第5-7：r--为属组权限为可读</span><br><span class="line">第8-10：r--为其他人的权限为可读</span><br><span class="line">第11列：.开启了SELinux功能的Linux系统才会有这个点。那个点表示文件带有“SELinux的安全上下文”。CentOS7默认是开启SELinux的，所以会有这个点，如果关闭SELinux，然后再创建文件，新创建的文件就不会再有这个点了，但是以前创建的文件本来有这个点的还会显示这个点（虽然SELinux不起作用了），如果为+号，表明该文件设置了acl权限。</span><br><span class="line">第12:1 表示链接数</span><br><span class="line">第13：root 属主</span><br><span class="line">第14：root 属组</span><br><span class="line">第15: 0 文件大小，Byte（字节）为单位</span><br><span class="line">第16：Apr  6 16:34 创建时间</span><br><span class="line">第17：1.txt 文件名</span><br><span class="line">语法：chmod 对象(u/g/o/a)赋值符(+/-/=)权限(r/w/x) 文件/目录</span><br><span class="line">chmod u+r 1.txt #为文件1.txt的属主添加读权限</span><br><span class="line">chmod u-r 1.txt #为文件1.txt的属主取消读权限</span><br><span class="line">chmod u+wx 1.txt #为文件1.txt的属主添加读写权限</span><br><span class="line">chmod u=rwx 1.txt #为文件1.txt的属主设置读写执行权限</span><br><span class="line">chmod u=rw 1.txt #为文件1.txt的属主设置读写权限</span><br><span class="line">chmod u= 1.txt #取消文件1.txt的属主的所有权限权限</span><br><span class="line">chmod u=--- 1.txt #取消文件1.txt的属主的所有权限权限</span><br><span class="line">chmod ug=rw, o=r 1.txt #为1.txt的属主设置读写权限，其他读权限</span><br><span class="line">chmod -R u+r dir1 #为文件夹dir1及其里面文件的属主添加读权限</span><br><span class="line">chmod 671 1.txt# 为1.txt的属主设置读写权限，属组设置读写执行权限，其他人是执行权限</span><br><span class="line">注意：问件夹一定要有可执行的权利，因为进入文件夹是执行。</span><br></pre></td></tr></table></figure></li></ul><h4 id="文件的归属"><a href="#文件的归属" class="headerlink" title="文件的归属"></a>文件的归属</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown alice.hr file1 #改file1的属主为alice改组为hr组</span><br><span class="line">chown alice file1 #改file1的属主为alice</span><br><span class="line">chown .hr file1 #改file1的组为hr组</span><br><span class="line">chown alice.hr dir1 #改文件夹dir1的属主为alice改组为hr组</span><br><span class="line">chown -R alice.hr dir1 #改文件夹dir1的属主为alice改组为hr组，把文件夹里面的内容都改为属主为alice改组为hr组</span><br><span class="line">.号可以换成:</span><br><span class="line">chown alice:hr file1 #改file1的属主为alice改组为hr组</span><br><span class="line">chgrp root file1 #改file1的组为root</span><br></pre></td></tr></table></figure><h4 id="ACL-access-control-list-访问控制列表"><a href="#ACL-access-control-list-访问控制列表" class="headerlink" title="ACL(access control list) 访问控制列表"></a>ACL(access control list) 访问控制列表</h4><p>核心就是：谁干什么，谁不能干什么，设置不同用户，不同的基本权限（r,w,x）。对象数量不同。是UGO的补充。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">语法</span></span><br><span class="line">setfacl -设置 对象:对象名:权限</span><br><span class="line">getfacl 文件或文件夹 #查看文件或者文件夹的acl权限</span><br><span class="line">setfacl -m u:Huang:rw 1.txt#设置用户Huang对1.txt有读写权限 -m是设置</span><br><span class="line">setfacl -m u:Huang:- 1.txt#设置用户Huang对1.txt没有任何权限 -m是设置</span><br><span class="line">setfacl -m o::w 1.txt#设置其他用户对1.txt有写的权限 -m是设置</span><br><span class="line">看到</span><br><span class="line">setfacl -x u:Huang 1.txt#取消用户Huang的acl权限 -x是删除</span><br><span class="line">setfacl -b 1.txt#取消1.txt的所有acl权限 -b是删除所有</span><br></pre></td></tr></table></figure><h4 id="特殊权限"><a href="#特殊权限" class="headerlink" title="特殊权限"></a>特殊权限</h4><ol><li>如果一个文件很重要，那么他万一被root删除了怎么办。就要靠特殊的i权限。</li><li>有一个权限为rwsrwxrwx，有一个s权限</li><li>为什么系统创建文件是默认权限是644，创建文件夹时权限为755。这是系统为了好管理进行这样设计的，进入文件夹需要x的执行权限。</li></ol><ul><li>suid(sgid)针对文件&#x2F;程序时，具备临时提升权限的能力，使得调用文件的用户，临时具备属主的能力，谁访问，就当这个用户是属主。<br>suid(在属主的执行位)，sgid(在属组的执行位)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod u+s /bin/cat</span><br><span class="line">-rwsr-xr-x. 1 root root 54080 Aug 20  2019 /bin/cat</span><br><span class="line">属主的执行位变成了s，我们就具有使用cat命令的属主能力了</span><br><span class="line">chmod u+s 1.txt</span><br><span class="line">-rwSrwx--x. 1 root root 12 Apr  7 11:33 1.txt</span><br><span class="line">变成了S，其主要原因是该文件最开始没有x权限，因此会变成S，添加了x群贤后，就会变成s了。</span><br><span class="line">chmod 4777 1.txt #将会使得使得调用文件的用户，临时具备属主的能力，数字4与suid相同</span><br><span class="line">chmod 2777 1.txt #将会使得使得调用文件的用户，临时具备属组的能力，数字2与sgid相同</span><br><span class="line">chmod 1777 1.txt #将会使得当前目录或当前文件只有主人可以删除，数字1就是粘滞位，其他的执行位变成t，一般是给文件夹的。</span><br></pre></td></tr></table></figure></li><li>文件属性chattr</li></ul><ol><li>用途：通常用于锁定某个文件，拒绝修改</li><li>分类有a，A，c，d，D，i等，常用的就在i，i用于锁定文件拒绝修改<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsattr 1.txt #查看文件属性</span><br><span class="line">[root@master tmp]# lsattr 1.txt</span><br><span class="line">---------------- 1.txt</span><br><span class="line">chattr +i 1.txt #添加i属性</span><br><span class="line">[root@master tmp]# lsattr 1.txt</span><br><span class="line">----i----------- 1.txt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">无法修改1.txt</span></span><br><span class="line">chattr -i 1.txt #去掉i属性</span><br><span class="line">chattr +a 1.txt #添加a属性，文件只能追加</span><br></pre></td></tr></table></figure></li></ol><ul><li>进程掩码umask</li></ul><ol><li>概念：新建文件，目录的默认权限会受到umask的影响，umask表示要减掉的权限。</li><li>观察系统的掩码<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">umask #查看系统的掩码</span><br><span class="line">[root@master tmp]# umask</span><br><span class="line">0022 #有四位，第一位就是那么特殊位</span><br><span class="line">0777 - 0022 # 系统创建目录和文件夹时，权限就是0755</span><br><span class="line">0755 - 0111 #系统为了保护自己，所以在创建的文件上，去掉了所有的执行。</span><br><span class="line">-rw-r--r--. 1 root root  0 Apr  7 14:14 2.txt</span><br><span class="line">drwxr-xr-x. 2 root root  6 Apr  7 14:13 dir1</span><br><span class="line">创建的文件夹权限为：755</span><br><span class="line">创建的文件权限为：644</span><br><span class="line">umask 0000 #设置umask为0000</span><br><span class="line">-rw-rw-rw-. 1 root root  0 Apr  7 14:15 3.txt</span><br><span class="line">drwxrwxrwx. 2 root root  6 Apr  7 14:15 dir2</span><br><span class="line">创建的文件夹权限为：777</span><br><span class="line">创建的文件权限为：666</span><br></pre></td></tr></table></figure></li></ol><h3 id="进程管理PS-process-status"><a href="#进程管理PS-process-status" class="headerlink" title="进程管理PS(process status)"></a>进程管理PS(process status)</h3><h4 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h4><ul><li>进程是已启动的可执行程序的运行实例</li><li>其组成部分：</li></ul><ol><li>一个文件 &#x2F;bin&#x2F;passwd</li><li>被分配内存的地址空间</li><li>获取CPU时间</li><li>每个进程都有唯一的进程号PID(process ID)</li><li>有权限限制</li><li>程序代码的一个或多个副本（也叫执行线程）</li><li>拥有状态</li><li>任何进程都可以创建子进程</li><li>所有进程都是第一个系统进程的后代</li><li>父进程复制自己的地址空间（fork）创建新的子进程</li></ol><h4 id="静态查看进程ps"><a href="#静态查看进程ps" class="headerlink" title="静态查看进程ps"></a>静态查看进程ps</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux #查看进程</span><br><span class="line">ps aux | head -3</span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root         1  0.0  0.3 128008  6696 ?        Ss   14:30   0:00 /usr/lib/systemd/systemd --switched-root --system --deserialize 22</span><br><span class="line">root         2  0.0  0.0      0     0 ?        S    14:30   0:00 [kthreadd]</span><br><span class="line">ps a #all显示现行终端机下的所有程序，包括其他用户的程序。</span><br><span class="line">ps u #user以用户为主的格式来显示程序状况。</span><br><span class="line">ps x #显示所有程序，不以终端机来区分。</span><br><span class="line">ps aux --sort %cpu #以CPU占用率升序排列，常用的就是CPU，MEM和PID进行排序</span><br><span class="line">ps aux --sort -%cpu #以CPU占用率降序排列，-号表示降序</span><br><span class="line">ps aux --sort %mem #以MEM占用率升序排列，常用的就是CPU，MEM和PID进行排序</span><br><span class="line">ps aux --sort -%mem #以MEM占用率降序排列，-号表示降序</span><br><span class="line">ps -ef #可以查看PPID(父进程)，如果子进程杀不死，可以杀他的父进程，也可以杀死子进程</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 14:30 ?        00:00:00 /usr/lib/systemd/systemd --switched-root --system --deserialize 22</span><br><span class="line">root         2     0  0 14:30 ?        00:00:00 [kthreadd]</span><br><span class="line">ps axo user,pid,ppid,%mem,command #指定想要输出的东西，o表示operation，操作</span><br></pre></td></tr></table></figure><ul><li>第一列USER：运行进程的用户</li><li>第二列PID：进程的唯一进程号</li><li>第三列%CPU：CPU的占用率，百分比</li><li>第四列%MEM：内存的占用率，百分比</li><li>第五列VSZ：Virtual Memory Size。占用虚拟内存大小</li><li>第六列RSS：Resident Set Size。常驻内存集合大小，表示该进程分配的内存大小，占用实际内存大小</li><li>第七列TTY：终端的次要装置号（minor device number of tty），进程运行的终端，本机运行一般是？号，远程登录的话一般是pts&#x2F;n</li><li>第八列STAT：进程状态</li><li>第九列START：进程启动时间</li><li>第十列TIME：进程占用CPU的时间</li><li>第十一列COMMAND：命令&#x2F;程序名称，命令的路径</li></ul><h4 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h4><ul><li>S(Sleep)睡眠中，可中断</li><li>R(Run)正在执行中</li><li>T(Stop)暂停执行</li><li>Z(Zoombie)已退出，成为僵尸进程</li><li>D 无法中断的休眠状态 (通常 IO 的进程)</li><li>W 没有足够的记忆体分页可分配</li><li>&lt; 高优先序的行程</li><li>N 低优先序的行程</li><li>L 有记忆体分页分配并锁在记忆体内 (实时系统或捱A I&#x2F;O)</li></ul><h4 id="动态查看进程top"><a href="#动态查看进程top" class="headerlink" title="动态查看进程top"></a>动态查看进程top</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top #动态查看进程状态，可以用q退出</span><br><span class="line">上半部分：为系统的性能部分</span><br><span class="line">top - 20:31:34 up  6:00,  1 user,  load average: 0.00, 0.01, 0.05</span><br><span class="line">Tasks: 123 total,   1 running, 122 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">Cpu(s):  0.0 us,  0.1 sy,  0.0 ni, 99.8 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.2 si,  0.0 st</span></span><br><span class="line">KiB Mem :  1881624 total,  1562348 free,   195620 used,   123656 buff/cache</span><br><span class="line">KiB Swap:  2097148 total,  2097148 free,        0 used.  1544956 avail Mem</span><br></pre></td></tr></table></figure><ul><li>第一行：top - 20:31:34 up  6:00,  1 user,  load average: 0.00, 0.01, 0.05</li><li>第一行：程序名-系统时间  运行时间  登录用户数   CPU平均负载：5分钟占用0.0 10分钟占用0.01 15分钟占用0.05</li><li>第二行：Tasks: 123 total,   1 running, 122 sleeping,   0 stopped,   0 zombie</li><li>第二行：总进程数             运行数1     睡眠数175       停止数0       僵尸进程0</li><li>第三行：%Cpu(s):  0.0 us,     0.1 sy,      0.0 ni,         99.8 id,     0.0 wa,      0.0 hi,   0.2 si,   0.0 st</li><li>第三行：CPU占用率  us用户程序   sy系统程序   ni优先级高的占用  id空闲的CPU  wa等待CPU等待 hi硬件占用 si软件占用 st虚拟机占用</li><li>第四行：KiB Mem :   1881624 total,  1562348 free,   195620 used,   123656 buff&#x2F;cache</li><li>第四行：物理内存(字节) 总共约1.9G    空闲内存约1.6G    使用内存约195M  cache缓存硬盘内容124M</li><li>第五行：KiB Swap:                          2097148 total,  2097148 free,  0 used. 1544956 avail Mem</li><li>第五行：交换内存，硬盘的一部分，虚拟内存(字节) 总共约2.1G       空闲内存约2.1G  未使用 创建新进程时，在不使用swap分区的情况下，能够分配的内存大小。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">下半部分：进程状态</span><br><span class="line"> PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                </span><br><span class="line">    1 root      20   0  128008   6700   4148 S   0.0  0.4   0:00.80 systemd                                                </span><br><span class="line">    2 root      20   0       0      0      0 S   0.0  0.0   0:00.00 kthreadd                                               </span><br><span class="line">    4 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H                                           </span><br><span class="line">    5 root      20   0       0      0      0 S   0.0  0.0   0:00.00 kworker/u8:0                                           </span><br><span class="line">    6 root      20   0       0      0      0 S   0.0  0.0   0:00.02 ksoftirqd/0                                            </span><br><span class="line">    7 root      rt   0       0      0      0 S   0.0  0.0   0:00.01 migration/0                                            </span><br><span class="line">    8 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcu_bh                                                 </span><br><span class="line">    9 root      20   0       0      0      0 S   0.0  0.0   0:02.35 rcu_sched                                              </span><br><span class="line">   10 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 lru-add-drain                                          </span><br><span class="line">   11 root      rt   0       0      0      0 S   0.0  0.0   0:00.14 watchdog/0                                             </span><br><span class="line">   12 root      rt   0       0      0      0 S   0.0  0.0   0:00.10 watchdog/1</span><br></pre></td></tr></table></figure></li><li>第一列PID：进程的唯一进程号</li><li>第二列USER：运行进程的用户</li><li>第三列PR：priority，表示内核在调度该进程的优先级</li><li>第四列NI：nice 会影响PR</li><li>第五列VIRT：VIRT表示进程使用的所有内存大小，包括虚拟使用的swap内存和物理内存，申请的内存，但并没占满</li><li>第六列RES：是使用的物理内存大小，占用实际内存大小</li><li>第七列SHR：当前进程同其它进程共享内存的大小</li><li>第八列S：进程状态</li><li>第九列%CPU：CPU的占用率，百分比</li><li>第十列%MEM：内存的占用率，百分比</li><li>第十一列TIME：进程占用CPU的时间</li><li>第十二列COMMAND：命令&#x2F;程序名称，命令的路径</li></ul><h4 id="top内部的常用命令"><a href="#top内部的常用命令" class="headerlink" title="top内部的常用命令"></a>top内部的常用命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">h #帮助</span><br><span class="line">M #按内存的使用排序</span><br><span class="line">P #按CPU的使用排序</span><br><span class="line">N #以PID的大小排序</span><br><span class="line">&lt; #向前</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="comment">#向后</span></span></span><br><span class="line">z #彩色</span><br><span class="line">Z #设置彩色，用数字调整</span><br></pre></td></tr></table></figure><h4 id="top的使用技巧"><a href="#top的使用技巧" class="headerlink" title="top的使用技巧"></a>top的使用技巧</h4><ul><li>能用ps就不用top，top消耗资源</li><li>top -d n # 每过n秒刷新一次</li><li>top -p 进程号1,进程号2 #只显示对应的进程号的信息</li></ul><h4 id="使用信号控制进程"><a href="#使用信号控制进程" class="headerlink" title="使用信号控制进程"></a>使用信号控制进程</h4><ul><li>给进程发送信号</li><li>kill -l #列出所有支持的信号</li><li>kill -编号 PID #给进程发送信号</li><li>kill PID #默认是15号<br>编号 型号名</li></ul><ol><li>SIGHUP 重新加载配置文件</li><li>SIGINT 键盘中断Ctrl+C</li><li>SIGQUIT 键盘退出Ctrl+\ ，类似SIGINT</li><li>SIGKILL 强制终止，无条件</li><li>SIGTERM 终止（正常结束），缺省信号</li><li>SIGCONT 继续</li><li>SIGSTOP 暂停</li><li>SIGTSTP 键盘暂停 Ctrl+Z</li></ol><h4 id="进程优先级nice"><a href="#进程优先级nice" class="headerlink" title="进程优先级nice"></a>进程优先级nice</h4><ul><li>简介：Linux进程调度及多任务时，每个CPU在一个时间点上只能处理一个进程，通过时间切片技术，来同时运行多个程序，如果某个进程需要更多的消耗CPU。</li><li>优先级范围和特性：</li></ul><ol><li>范围：-20 - +19，一般为0</li><li>nice值越大优先级越小，如+19</li><li>nice值越小优先级越大，如-20</li></ol><ul><li>系统中的两种优先级</li></ul><ol><li>NI：实际nice值</li><li>PR(+20)：将nice级别显示为映射到更大有限队列，当nice为-20时，将会映射到0。</li><li>加上的之后的优先级PR才会最终影响进程的优先级。</li></ol><ul><li>查看优先级<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps axo pid,command,nice --sort nice #以nice值升序排列</span><br><span class="line">ps axo pid,command,nice --sort -nice #以nice值降序排列，-号表示降序</span><br></pre></td></tr></table></figure></li><li>调整nice值<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进程默认会继承父进程的<span class="built_in">nice</span>值</span></span><br><span class="line">nice -n 优先级数 命令名 #运行时改变优先级</span><br><span class="line">renice 优先级数 PID #运行后改变优先级</span><br></pre></td></tr></table></figure></li></ul><h4 id="作业控制jobs"><a href="#作业控制jobs" class="headerlink" title="作业控制jobs"></a>作业控制jobs</h4><ul><li>简介：作业控制是一个命令行功能，也叫后台运行</li><li>foreground(fg) 前台进程：是在终端中运行的命令，占领终端</li><li>background(bg) 后台运行：没有控制终端，它不需要终端的交互。看不见，但在运行<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用&amp;可以放到后台运行</span><br><span class="line">sleep 3300 &amp;</span><br><span class="line">jops #可以查看后台工作的进程，看不了前台进程</span><br><span class="line">[root@master ~]# jobs</span><br><span class="line">[1]+  Running                 sleep 3000 &amp;</span><br><span class="line">fg 1 #将进程调回前台</span><br><span class="line">[root@master ~]# fg 1</span><br><span class="line">sleep 3000</span><br><span class="line">Ctrl + z #可以使得前台程序放到后台，但是程序停止</span><br><span class="line">[root@master ~]# jobs</span><br><span class="line">[1]+  Stopped                 sleep 3000</span><br><span class="line">bg 1 #使得后台暂停的程序运行</span><br><span class="line">[root@master ~]# jobs</span><br><span class="line">[1]+  Running                 sleep 3000 &amp;</span><br><span class="line">kill %1 # 杀死后台程序</span><br><span class="line">[root@master ~]# jobs</span><br><span class="line">[1]+  Terminated              sleep 3000</span><br></pre></td></tr></table></figure></li></ul><h4 id="虚拟文件系统proc"><a href="#虚拟文件系统proc" class="headerlink" title="虚拟文件系统proc"></a>虚拟文件系统proc</h4><ul><li>简介：细腻文件系统：采集服务器自身内核，进程运行状态信息，里面的数字代表进程信息，进程号</li><li>CPU：&#x2F;proc&#x2F;cpuinfo，CPU的参数，可以查看CPU的信息</li><li>内存：&#x2F;proc&#x2F;meminfo，内存的信息</li><li>内核：&#x2F;proc&#x2F;cmdline，内核信息</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.gnu.org/gnu/about-gnu.zh-cn.html" title="简说 GNU">简说 GNU</a></li><li><a href="https://www.debian.org/releases/stable/s390x/ch01s02.zh-cn.html" title="什么是 GNU/Linux？">什么是 GNU&#x2F;Linux？</a></li><li><a href="https://blog.csdn.net/da_ge_de_nv_ren/article/details/128391575" title="Linux">Linux</a></li><li><a href="https://www.jianshu.com/p/a38cd22b28ad" title="Linux TOP 命令">Linux TOP 命令</a></li><li><a href="https://www.bilibili.com/video/BV1pz4y1D73n?p=29&vd_source=4470be84aba61145fe9d1690fe726951" title="千锋云计算Linux教程650集，linux系统运维从入门到精通教程（Linux安装极速入门，零基础必备）">千锋云计算Linux教程650集，linux系统运维从入门到精通教程（Linux安装极速入门，零基础必备）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机的网络类型和静态ip的设置</title>
      <link href="/2024/03/21/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E7%B1%BB%E5%9E%8B%E5%92%8C%E9%9D%99%E6%80%81ip%E7%9A%84%E8%AE%BE%E7%BD%AE/"/>
      <url>/2024/03/21/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E7%B1%BB%E5%9E%8B%E5%92%8C%E9%9D%99%E6%80%81ip%E7%9A%84%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>虚拟机的网络配置对于使用虚拟机特别重要，我去了解了一下关于虚拟机网络的东西，在这里做个记录。</p><h1 id="虚拟机的网络配置"><a href="#虚拟机的网络配置" class="headerlink" title="虚拟机的网络配置"></a>虚拟机的网络配置</h1><h2 id="虚拟机的网络类型"><a href="#虚拟机的网络类型" class="headerlink" title="虚拟机的网络类型"></a>虚拟机的网络类型</h2><ul><li>NAT (Network address translation) 模式<br>也叫网络地址转换模式。在 NAT 模式下，虚拟机要访问外部网络，需要经过宿主机进行处理，再连接到外部网络。虚拟机可以访问外部网络和宿主机，宿主机无法访问虚拟机。举个形象的例子，小红（虚拟机）要过桥去村子外面买菜，但是这座桥是小黄（宿主机）的，因此需要小黄同意才可以过桥。在这种情况下，宿主机可以看做充当路由器的作用，宿主机虚拟出来的dhcp服务器会给虚拟机分配一个局域网的 ip 地址。在这种情况下，外部网络无法访问我们的虚拟机，比较安全。</li><li>桥接模式<br>在桥接模式下，虚拟机和宿主机类似于兄弟，属于同一网段的独立网络。虚拟机直接和外部网络相连，宿主机充当了虚拟机和外部网络的桥梁，从而实现了虚拟机和外部网络的通信。虚拟机可以访问外部网络和宿主机，宿主机也可以访问虚拟机。但是在这种情况下，外部网络可以访问虚拟机，并不安全。</li><li>仅主机模式Host-only网络<br>开启仅主机模式Host-only网络之前，我们需要在Virtual Box创建一个Ethernet Adapter，其和宿主机虚拟出来的网卡处于在同一个网段，虚拟机和宿主机共享一个网络，从而实现了主机和多个虚拟机之间的通信。虚拟机可以访问宿主机，无法访问外部网络。宿主机可以访问虚拟机。</li></ul><h2 id="NAT模式"><a href="#NAT模式" class="headerlink" title="NAT模式"></a>NAT模式</h2><ol><li>将虚拟机设置为 NAT 模式<br><img src="1.png"></li><li>查看 ip<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="2.png"><br>ip 为10.0.2.15</li><li>访问宿主机(172.16.34.145)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 172.16.34.145</span><br></pre></td></tr></table></figure><img src="3.png"><br>能和宿主机通信</li><li>访问外部网络<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><img src="4.png"><br>能够访问外部网络。</li><li>宿主机访问虚拟机<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 10.0.2.15</span><br></pre></td></tr></table></figure><img src="5.png"><br>宿主机无法访问虚拟机。</li></ol><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><ol><li>将虚拟机设置为桥接模式<br><img src="6.png"></li><li>查看 ip<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="7.png"><br>ip 为172.16.34.246，与宿主机的外部网络在同一网段。</li><li>访问宿主机(172.16.34.145)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 172.16.34.145</span><br></pre></td></tr></table></figure><img src="8.png"><br>能和宿主机通信</li><li>访问外部网络<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><img src="9.png"><br>能够访问外部网络。</li><li>宿主机访问虚拟机<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 172.16.34.246</span><br></pre></td></tr></table></figure><img src="10.png"><br>宿主机可以访问虚拟机。</li></ol><h2 id="仅主机模式Host-only网络"><a href="#仅主机模式Host-only网络" class="headerlink" title="仅主机模式Host-only网络"></a>仅主机模式Host-only网络</h2><ol><li>设置全局的网卡：管理 -&gt; 工具 -&gt; 网络配置管理器 -&gt; 创建<br><img src="12.png"><br>启动DHCP服务器<br><img src="13.png"><br><img src="14.png"></li><li>将虚拟机设置为仅主机模式Host-only网络<br><img src="11.png"></li><li>查看 ip<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="15.png"><br>ip 为192.168.176.3</li><li>访问宿主机(172.16.34.145)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 172.16.34.145</span><br></pre></td></tr></table></figure><img src="16.png"><br>无法和宿主机进行通信，经过分析发现宿主机和虚拟机的 ip 不在一个网段，肯定无法访问的，现在宿主机的 ip 相当于一个外部网络的 ip 。 我们可以通过宿主机的局域网 ip (192.168.176.1)进行访问，其和虚拟机的 ip 在同一个网段。<br><img src="17.png"><br>可以访问宿主机<br><img src="18.png"><br>通过查看 Virtual Box的网络配置，可以看到相应的 ip 地址分配方案，ip 地址会在最小地址和最大地址之间随机生成。<br><img src="19.png"></li><li>访问外部网络<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><img src="20.png"><br>无法访问外部网络。</li><li>宿主机访问虚拟机<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 192.168.176.3</span><br></pre></td></tr></table></figure><img src="21.png"><br>宿主机可以访问虚拟机，如果访问不了，请关闭宿主机的防火墙。</li></ol><h2 id="常用的网络配置"><a href="#常用的网络配置" class="headerlink" title="常用的网络配置"></a>常用的网络配置</h2><ul><li>NAT模式+仅主机模式Host-only网络</li><li>桥接网络</li></ul><h2 id="NAT模式-仅主机模式Host-only网络"><a href="#NAT模式-仅主机模式Host-only网络" class="headerlink" title="NAT模式+仅主机模式Host-only网络"></a>NAT模式+仅主机模式Host-only网络</h2><ol><li>网卡1设置为仅主机模式Host-only网络，网卡2设置设置为NAT模式<br><img src="22.png"><br><img src="23.png"></li><li>查看 ip<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="24.png"><br>存在两张网卡：enp0s3 (192.168.176.3)，enp0s8 (10.0.3.15)</li><li>访问宿主机(172.16.34.145)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 172.16.34.145</span><br></pre></td></tr></table></figure><img src="25.png"><br>能和宿主机通信</li><li>访问外部网络<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><img src="26.png"><br>能够访问外部网络。</li><li>宿主机访问虚拟机<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 192.168.176.3</span><br></pre></td></tr></table></figure><img src="27.png"><br>宿主机可以访问虚拟机。</li></ol><h2 id="静态-ip-地址配置：以桥接网络为例"><a href="#静态-ip-地址配置：以桥接网络为例" class="headerlink" title="静态 ip 地址配置：以桥接网络为例"></a>静态 ip 地址配置：以桥接网络为例</h2><ol><li>查看 ip<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="28.png"><br>ip 为172.16.34.246，与宿主机的外部网络在同一网段。</li><li>该 ip 为动态分配的，下次开机可能 ip 会改变，因此需要设置静态 ip。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=172.16.34.123</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=172.16.34.1 #和宿主机一样</span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line">DNS2=8.8.8.8</span><br></pre></td></tr></table></figure><img src="29.png"></li><li>重启网卡<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmcli connection down enp0s3 &amp;&amp; nmcli connection up enp0s3 ——重启网卡enp0s3</span><br></pre></td></tr></table></figure></li><li>查看 ip<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="30.png"><br>修改 ip 为：172.16.34.123</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://cloud.tencent.com/developer/article/1463782" title="桥接、NAT、Host-only上网方式的区别">桥接、NAT、Host-only上网方式的区别</a></li><li><a href="https://www.ctyun.cn/developer/article/353763363754053" title="Linux虚拟机的创建与配网（一）">Linux虚拟机的创建与配网（一）</a></li><li><a href="https://www.bilibili.com/video/BV1nF41117d1/?spm_id_from=333.788.recommend_more_video.-1&vd_source=4470be84aba61145fe9d1690fe726951" title="002.十分钟带你搞懂虚拟机各种网络配置以及centos7配置静态IP,看完学的会，配的出！">002.十分钟带你搞懂虚拟机各种网络配置以及centos7配置静态IP,看完学的会，配的出！</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 虚拟机网络配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> Virtual Box </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加hexo搭建个人博客（七）</title>
      <link href="/2024/03/21/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%83%EF%BC%89/"/>
      <url>/2024/03/21/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%83%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>主要是自己想把收集来的好看的图片整理成相册之类的，所以想着在博客中添加一个相册功能。</p><h1 id="相册仓库搭建"><a href="#相册仓库搭建" class="headerlink" title="相册仓库搭建"></a>相册仓库搭建</h1><ol><li>在主题配置文件 _config.butterfly.yml 中设置相册<br><img src="5.png"></li><li>在 Git Bash 输入：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new [layout] gallery</span><br></pre></td></tr></table></figure>创建相册仓库</li><li>修改仓库 &#x2F;source&#x2F;gallery&#x2F;index.md<br><img src="1.png"></li><li>创建相册<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;gallery-group-main&quot;&gt;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><ul><li>name：图库名字</li><li>description：图库描述</li><li>link：连接到对应相册的地址</li><li>img-url：图库封面的地址<br>例如：<br><img src="2.png"></li></ul><h1 id="相册的创建"><a href="#相册的创建" class="headerlink" title="相册的创建"></a>相册的创建</h1><ol><li>在 Git Bash 输入：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page landscape</span><br></pre></td></tr></table></figure>创建相册</li><li>修改相册 &#x2F;source&#x2F;landscape&#x2F;index.md<br><img src="3.png"></li><li>创建相册内容<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% gallery [lazyload],[rowHeight],[limit] %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>lazyload ：【可选】点击按钮加载更多图片，填写 true&#x2F;false。默认为 false。</li><li>rowHeight ：【可选】图片显示的高度，如果需要一行显示更多的图片，可设置更小的数字。默认为 220。</li><li>limit ：【可选】每次加载多少张照片。默认为 10。<br>例如：<br><img src="4.png"></li></ul><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="6.png"><br><img src="7.png"><br><img src="8.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://butterfly.js.org/" title="butterfly 的官方教程网站">butterfly 的官方教程网站</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
          <category> 个人博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机安装Centos8 stream以及网络配置</title>
      <link href="/2024/03/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Centos8-stream%E4%BB%A5%E5%8F%8A%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/03/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Centos8-stream%E4%BB%A5%E5%8F%8A%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>由于以后会从事和 Linux 相关的工作，但我手头没有服务器，组里的服务器我也没有权限去动，所以只能在虚拟机里面搞一搞，学习学习。</p><h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><h2 id="相关软件"><a href="#相关软件" class="headerlink" title="相关软件"></a>相关软件</h2><ul><li><a href="https://www.virtualbox.org/wiki/Downloads" title="Virtual Box 下载链接">Virtual Box</a></li><li><a href="https://mirrors.aliyun.com/centos/8-stream/" title="Centos8 stream 下载链接">Centos8 stream</a></li></ul><h2 id="下载Virtual-Box"><a href="#下载Virtual-Box" class="headerlink" title="下载Virtual Box"></a>下载Virtual Box</h2><ol><li>前往<a href="https://www.virtualbox.org/wiki/Downloads" title="Virtual Box 下载链接">Virtual Box 官网</a>下载对应版本的 Virtual Box 。<br><img src="1.png"></li><li>除了修改安装目录其他就是傻瓜式一路下一步就行。<br><img src="2.png"><br><img src="3.png"></li></ol><h2 id="安装-Centos8-stream-系统"><a href="#安装-Centos8-stream-系统" class="headerlink" title="安装 Centos8 stream 系统"></a>安装 Centos8 stream 系统</h2><ol><li>打开Virtual Box ，新建一个虚拟机。<br><img src="4.png"></li><li>设置好虚拟机名称，安装路径，Centos8 stream 的目录，内存，CPU和硬盘大小。<br><img src="5.png"><br><img src="6.png"><br><img src="7.png"><br><img src="8.png"></li><li>设置好网络，这里选择桥接网卡，之后会介绍其他网卡类型。<br><img src="9.png"><br><img src="10.png"></li><li>“原神”启动！<br><img src="11.png"></li><li>设置最小化安装，选择好硬盘，连接好网络设置好root密码，开始安装。<br><img src="12.png"><br><img src="13.png"><br><img src="14.png"><br><img src="16.png"><br><img src="15.png"><br><img src="17.png"></li><li>重启后，用 root 账户登录。<br><img src="18.png"><br><img src="19.png"><br><img src="20.png"></li><li>查看 ip 为172.16.34.246。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="21.png"></li><li>检查网络是否通畅。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><img src="22.png"></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/111567471" title="win10虚拟机Oracle VM VirtualBox安装和使用教程">win10虚拟机Oracle VM VirtualBox安装和使用教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> Virtual Box </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8 stream安装VASP--2024 Intel oneAPI</title>
      <link href="/2024/03/20/Centos8-stream%E5%AE%89%E8%A3%85VASP-2024-Intel-oneAPI/"/>
      <url>/2024/03/20/Centos8-stream%E5%AE%89%E8%A3%85VASP-2024-Intel-oneAPI/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>组里的服务器安装的是 Centos7的系统，在2020年的时候 Centos 项目与红帽联合宣布将全部投资转向Centos stream , Centos7 将会在2024年6月30日停止维护。并且组里之前安装 VASP 是依赖于 Intel Parallel Studio ，但是现在 Intel 也不继续更新这个软件了，转而去开发 Intel oneAPI 。 再加上我以后从事的工作和这个很相关，因此就想着自己先试着安装一下看看，以这篇文章记录一下自己的安装过程，估计以后应该会用得到。</p><h1 id="软件的安装"><a href="#软件的安装" class="headerlink" title="软件的安装"></a>软件的安装</h1><h2 id="相关的软件"><a href="#相关的软件" class="headerlink" title="相关的软件"></a>相关的软件</h2><ul><li><a href="https://www.virtualbox.org/wiki/Downloads" title="Virtual Box 下载链接">Virtual Box</a></li><li><a href="https://mirrors.aliyun.com/centos/8-stream/" title="Centos8 stream 下载链接">Centos8 stream</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/developer/tools/oneapi/base-toolkit-download.html" title="l_BaseKit 下载链接">l_BaseKit</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/developer/tools/oneapi/hpc-toolkit-download.html" title="l_HPCKit 下载链接">l_HPCKit</a></li><li><a href="https://www.vasp.at/" title="VASP 官网">VASP</a></li></ul><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><p>由于我手头没有服务器，组里的服务器我也没有权限去动，所以只能在虚拟机里面搞一搞了。相应的软件可以在官网上进行下载，由于 VASP 是收费的软件，因为版权原因，这里就不提供了，需要的话可以评论区说一下。</p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><ol><li><p>Virtual Box 和 Centos8 stream 的安装很简单，可以参考这篇知乎文章：<a href="https://zhuanlan.zhihu.com/p/111567471" title="win10虚拟机Oracle VM VirtualBox安装和使用教程">win10虚拟机Oracle VM VirtualBox安装和使用教程</a>和之前的文章：<a href="/2024/03/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Centos8-stream%E4%BB%A5%E5%8F%8A%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/" title="虚拟机安装Centos8 stream以及网络配置">虚拟机安装Centos8 stream以及网络配置</a>，最小化安装即可。</p></li><li><p>安装一些 Linux 的软件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install gcc</span><br><span class="line">yum install gcc-c++</span><br><span class="line">yum install make</span><br><span class="line">yum install tar</span><br><span class="line">yum install rsync</span><br></pre></td></tr></table></figure></li><li><p>对于这两个 Intel 软件 ，我这里分别下载的是：l_BaseKit_p_2024.0.1.46_offline.sh 和 l_HPCKit_p_2024.0.1.38_offline.sh 。<br><img src="1.png"></p></li><li><p>首先安装 l_BaseKit_p_2024.0.1.46_offline.sh，输入命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh l_BaseKit_p_2024.0.1.46_offline.sh</span><br></pre></td></tr></table></figure><p>按照提示一步一步安装就行。</p></li><li><p>安装 l_HPCKit_p_2024.0.1.38_offline.sh，同上。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh l_HPCKit_p_2024.0.1.38_offline.sh</span><br></pre></td></tr></table></figure><p>安装成功后在 &#x2F;opt 下面会出现 intel 文件夹。 </p></li><li><p>执行以下命令设置环境变量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /opt/intel/oneapi/setvars.sh</span><br></pre></td></tr></table></figure><p>会出现一下信息：<br><img src="2.png"></p></li><li><p>执行以下命令生成 libfftw3xf_intel.a 。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /opt/intel/oneapi/mkl/2024.0/share/mkl/interfaces/fftw3xf</span><br><span class="line">source /opt/intel/oneapi/setvars.sh</span><br><span class="line">make libintel64</span><br></pre></td></tr></table></figure><p><img src="3.png"></p></li><li><p>解压 VASP 我这里的版本是 6.3.0</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf vasp.6.3.0.tgz</span><br></pre></td></tr></table></figure></li><li><p>复制生成 makefile.include </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd vasp.6.3.0</span><br><span class="line">cp arch/makefile.include.intel makefile.include</span><br></pre></td></tr></table></figure></li><li><p>修改 makefile.include</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MKLROOT    ?=        #直接设置为空，之前设置好了环境变量了，可以使用 echo $MKLROOT 查看环境变量</span><br><span class="line">CC_LIB      = icx</span><br><span class="line">CXX_PARS    = icpx</span><br></pre></td></tr></table></figure></li><li><p>修改后保存，之后直接安装。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make all</span><br></pre></td></tr></table></figure><p>大概等个半个小时就可以安装成功了。<br><img src="4.png"></p></li><li><p>每次登陆都要添加 oneAPI 的环境变量，配置好 VASP的环境变量。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi ~/.bashrc</span><br><span class="line">添加 ：</span><br><span class="line">export PATH=/opt/vasp.6.3.0/bin/:$PATH</span><br><span class="line">source /opt/intel/oneapi/setvars.sh</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p><img src="5.png"></p></li></ol><h2 id="测试-VASP"><a href="#测试-VASP" class="headerlink" title="测试 VASP"></a>测试 VASP</h2><ol><li>准备好输入文件后启动 VASP。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mpirun -np 2 vasp_std</span><br></pre></td></tr></table></figure><img src="6.png"></li><li>出现了相应的结果，表明安装成功！<br><img src="7.png"></li><li>注意如果是非 root 用户安装， intel 文件夹将会出现在 &#x2F;home&#x2F;用户名&#x2F; 下面，剩下的安装方法都是一样的。</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/qq_28778001/article/details/135576784" title="VASP6.3.2版本安装教程及运行测试(续)  --2024 intel OneAPI">VASP6.3.2版本安装教程及运行测试(续) – 2024 intel OneAPI</a></li><li><a href="https://blog.csdn.net/passsive/article/details/132982277" title="VASP6.3.2版本安装教程">VASP6.3.2版本安装教程</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/developer/articles/technical/building-vasp-with-intel-mkl-and-intel-compilers.html?&us" title="Building VASP* with Intel® oneAPI Base and HPC toolkits">Building VASP* with Intel® oneAPI Base and HPC toolkits</a></li><li><a href="https://zhuanlan.zhihu.com/p/565198883" title="Vasp5.4.4最新安装教程">Vasp5.4.4最新安装教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VASP </tag>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> Intel oneAPI </tag>
            
            <tag> Virtual Box </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加hexo搭建个人博客（六）</title>
      <link href="/2024/03/20/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2024/03/20/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="图床的搭建和使用"><a href="#图床的搭建和使用" class="headerlink" title="图床的搭建和使用"></a>图床的搭建和使用</h1><h2 id="为什么要使用图床"><a href="#为什么要使用图床" class="headerlink" title="为什么要使用图床"></a>为什么要使用图床</h2><p>在前面的文章中，我们使用了大量的图片。但是图片存储在什么地方，将会是一个很大的问题。如果将图片存储在hexo的项目文件中，就会使得整个项目很臃肿。同时我们也会使用大量的图片的url，通过网上去定位图片，但是这样做有时候，无法定位到这些图片。当然我们可以下载图片之后，再进行引用，这就又回到了前一个问题。解决这个问题的方式，可以将所有的本地图片上传到服务器，也就是图床。</p><h2 id="github仓库加Picogo软件"><a href="#github仓库加Picogo软件" class="headerlink" title="github仓库加Picogo软件"></a>github仓库加Picogo软件</h2><p>有很多方式都可以实现图床的功能，既然我们是要免费搭建，那就要白嫖到底了。这里我们选择采用 github 仓库 加 Picogo 的方式。</p><h3 id="新建-github-仓库"><a href="#新建-github-仓库" class="headerlink" title="新建 github 仓库"></a>新建 github 仓库</h3><p>这里就不多说了，参考前面：<a href="/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/" title="github加hexo搭建个人博客（一）">github加hexo搭建个人博客（一）</a>。</p><h3 id="Picogo-的安装和配置"><a href="#Picogo-的安装和配置" class="headerlink" title="Picogo 的安装和配置"></a>Picogo 的安装和配置</h3><h4 id="下载和安装-Picogo"><a href="#下载和安装-Picogo" class="headerlink" title="下载和安装 Picogo"></a>下载和安装 Picogo</h4><p>在这里<a href="https://github.com/Molunerfinn/PicGo/releases" title="Picogo的下载地址">下载</a>后，正常安装就行，傻瓜式安装。</p><h4 id="生成-github-token"><a href="#生成-github-token" class="headerlink" title="生成 github token"></a>生成 github token</h4><ol><li>进入主页，点击右上角的头像，点击 Settings<br><img src="3.png"></li><li>下拉至最末尾，点击 Developer settings<br><img src="4.png"></li><li>依次点击：Personal access tokens -&gt; Token -&gt; Generate a personal access token<br><img src="5.png"></li><li>Note 随便填，然后将所有都打勾选上，点击 Generate token<br><img src="6.png"></li><li>复制 token 备用<br><img src="7.png"></li></ol><h4 id="配置-Picogo"><a href="#配置-Picogo" class="headerlink" title="配置 Picogo"></a>配置 Picogo</h4><ol><li>打开软件后，进入图床设置，进行 github 的图床配置<br><img src="1.png"></li><li>按照下图进行配置，设定为新建的仓库名，在 token 那一栏中输入复制的 token ，保存即可。<br><img src="2.png"></li><li>在 PicGo 设置中可以开启代理，如果不需要的话，也可以不用开。<br><img src="11.png"></li><li>能够上传图片和复制 url 表明配置成功。<br><img src="8.png"><br><img src="9.png"><br><img src="10.png"></li><li>可以在 新建的 github 仓库中看到上传的图片。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
          <category> 个人博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
            <tag> Picgo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加hexo搭建个人博客（五）</title>
      <link href="/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hexo-主题的使用和相关设置"><a href="#hexo-主题的使用和相关设置" class="headerlink" title="hexo 主题的使用和相关设置"></a>hexo 主题的使用和相关设置</h1><p>hexo 有着很多好看有趣的主题，我们可以去<a href="https://hexo.io/themes/" title="hexo 主题">主题</a>官网上查看、下载和使用。 我这里使用的是 <a href="https://github.com/jerryc127/hexo-theme-butterfly" title="butterfly 主题">butterfly</a>。</p><h2 id="butterfly-主题的安装和配置"><a href="#butterfly-主题的安装和配置" class="headerlink" title="butterfly 主题的安装和配置"></a>butterfly 主题的安装和配置</h2><p>在博客目录下，打开 Git Bash，输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>进行安装。<br><img src="1.png"><br>安装 pug 以及 stylus 的渲染器。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p><img src="2.png"><br>将 _config.yml 中的主题换成 butterfly 。<br><img src="3.png"><br>部署成功后，我们的博客变得更加的漂亮。<br><img src="4.png"><br>我们接下来可以按照 <a href="https://butterfly.js.org/" title="butterfly 的官方教程网站">butterfly 的官方教程网站</a>进行修改，加上特效和一些其他的功能，就可以让博客变得很漂亮和炫酷，就像<a href="https://butterfly.js.org/" title="butterfly 的官方教程网站">butterfly 的官方教程网站</a>一样。</p><h2 id="设置搜索功能"><a href="#设置搜索功能" class="headerlink" title="设置搜索功能"></a>设置搜索功能</h2><p>当我们的博客内容越来越多的时候，能够快速搜索到相应的文章，就会显得越来越重要。 我们采用本地搜索，先安装相关的插件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p><img src="5.png"><br>install hexo-generator-search 插件会把文章的信息生成一个搜素的数据库保存到本地，因此搜素的速度很快。在博客的配置文件 _config.yml 中添加：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml #生成的搜素文件名</span><br><span class="line">  field: post  #指定搜素的对象，我们这里用的是文章</span><br><span class="line">  format: html #搜素结果的格式</span><br><span class="line">  limit: 10000 #最多的显示结果数</span><br></pre></td></tr></table></figure><p>修改主题的配置文件 _config.butterfly.yml ，打开 local_search：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  CDN:</span><br></pre></td></tr></table></figure><p>生成搜素文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>部署到 github 上，可以看到搜素栏可以使用。<br><img src="6.png"></p><h2 id="设置评论区和-Gitalk-的使用"><a href="#设置评论区和-Gitalk-的使用" class="headerlink" title="设置评论区和 Gitalk 的使用"></a>设置评论区和 Gitalk 的使用</h2><p>由于 hexo 是纯静态博客框架，所以其本身无法支持评论功能，需要第三方平台和软件的支持。在博客中我们需要读者的评论和交流，以提高我们的技术。因此我们需要给博客添加评论功能，我们采用的是利用 github 的免费评论平台—— Gitalk 。</p><h3 id="配置部署"><a href="#配置部署" class="headerlink" title="配置部署"></a>配置部署</h3><ul><li>进入 github 主页，点击右上方头像，点击 Settings<br><img src="7.png"></li><li>下拉到最后点击 Developer settings<br><img src="8.png"></li><li>依次点击 QAuth Apps ，Register a new application<br><img src="9.png"></li><li>填好之后点击 Regiter application<br><img src="10.png"></li><li>点击 Generate a new client secret , 并复制 Client ID 和 Client secrets。<br><img src="11.jpg"></li><li>修改主题的配置文件 _config.butterfly.yml<br><img src="12.png"><br><img src="13.png"><br>部署到 github 上可以看到评论已经开启。<br><img src="14.png"></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://butterfly.js.org/" title="butterfly 的官方教程网站">butterfly 的官方教程网站</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
          <category> 个人博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdownpad2的安装和破解</title>
      <link href="/2024/03/19/markdownpad2%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%A0%B4%E8%A7%A3/"/>
      <url>/2024/03/19/markdownpad2%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="软件下载和安装"><a href="#软件下载和安装" class="headerlink" title="软件下载和安装"></a>软件下载和安装</h2><p>markdownpad2 和 awesomium_v1.6.6_sdk_win 的下载链接可以在<a href="https://haharcher1.github.io/download/" title="博客的资源页面">博客的资源页面</a>找到。<br>先安装 awesomium_v1.6.6_sdk_win 。<br><img src="1.png"><br>一路next下去，安装路径可以自己选。<br><img src="2.png"><br>最后完成安装。<br><img src="3.png"><br>接下来安装 markdownpad2 。<br><img src="4.png"><br>一路next下去，安装路径可以自己选。<br><img src="5.png"><br>最后安装成功。<br><img src="6.png"></p><h2 id="markdownpad2-的破解"><a href="#markdownpad2-的破解" class="headerlink" title="markdownpad2 的破解"></a>markdownpad2 的破解</h2><p>运行 markdownpad2 之后会出现激活的界面。<br><img src="7.png"><br>输入邮箱地址：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Soar360@live.com</span><br></pre></td></tr></table></figure><p>输入 License key</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="8.png"><br>最后激活成功。<br><img src="9.png"><br>感谢<a href="https://www.cnblogs.com/Ning-Blog/p/15142839.html" title="MarkdownPad 2在win10上安装及破解（含安装包">这篇博客的博主提供的破解码</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdownpad2 </tag>
            
            <tag> awesomium_v1.6.6_sdk_win </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加hexo搭建个人博客（四）</title>
      <link href="/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文章书写和图片插入"><a href="#文章书写和图片插入" class="headerlink" title="文章书写和图片插入"></a>文章书写和图片插入</h1><h2 id="文章创建"><a href="#文章创建" class="headerlink" title="文章创建"></a>文章创建</h2><p>在 My_Blog 目录下打开 Git Bash ，输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &quot;文章名字&quot; # layout 可以省略</span><br></pre></td></tr></table></figure><p>关于 layout 的说明可以参考，<a href="https://fuguigui.github.io/hexo2/" title="一次完整的Hexo写作流程">这篇博客</a>和<a href="https://hexo.io/zh-cn/docs/writing.html" title="官方文档">官方文档</a>。<br><img src="1.png"><br>执行结束后会在 My_Blog\source_posts 文件夹下面生成 demo.md 文件。 hexo 支持将 markdown 语法写出来的文章转换为 Html 的格式。 因此我们在demo.md 文件中只需要按照 markdown 语法进行写作就可以了。 markdown 的语法可以参考<a href="https://www.zhihu.com/tardis/zm/art/99319314?source_id=1003" title="Markdown语法及原理从入门到高级（可能是全网最全）">这篇知乎专栏</a>。书写 markdown 的软件，我使用的是 markdownpad2 和 awesomium_v1.6.6_sdk 。软件的下载和安装请参考：<a href="/2024/03/19/markdownpad2%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%A0%B4%E8%A7%A3/" title="markdownpad2的安装和破解">markdownpad2的安装和破解</a>。</p><p>软件安装成功后，直接打开 demo.md ，输入博客内容就行，如图：<br><img src="2.png"><br>依次在 Git Bash 中输入命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>部署到 github 上，进入博客网站，可以看到：<br><img src="3.png"></p><h2 id="图片的插入"><a href="#图片的插入" class="headerlink" title="图片的插入"></a>图片的插入</h2><p>修改主目录 My_Blog 中的配置文件 _config.yml 中的参数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p><img src="4.png"><br>修改之后，每次我们用命令在 _posts 文件夹下面生成 .md 文件时，将会同时生成一个同名的文件夹，图片就可以放在这个文件夹下。<br><img src="5.png"><br><img src="6.png"><br>在 Git Bash 输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>安装插件。<br><img src="7.png"><br>按照<a href="https://github.com/xcodebuild/hexo-asset-image" title="官方文档">官方的使用说明</a>。<br><img src="14.png"><br>我的图片位置和文档中的书写方法。<br><img src="8.png"><br><img src="9.png"><br>部署成功后，发现图片无法显示：<br><img src="10.png"></p><p>我在这里卡了好久，在网上找了好多教程，都发现没有用。我用谷歌浏览器的开发者工具，发现在图片的 url 中莫名其妙会多出来一个 .com ，完全不能理解。<br><img src="11.png"><br>我都快放弃了，最后在一篇<a href="https://zhuanlan.zhihu.com/p/542101567" title="Hexo 图片插入无法显示的问题">知乎文章</a>中找到了解决方案。主要是这个插件太老了，出bug了，作者也不更新了，而hexo 都已经更新了好几个版本了。解决方法是在根目录中，我这里是 My_Blog ，按照以下顺序：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node_modules -&gt; hexo-asset-image -&gt; index.js</span><br></pre></td></tr></table></figure><ul><li>找到 index.js 文件</li><li>用记事本打开 index.js 文件</li><li>修改内容 index.js 里面的内容</li></ul><p>修改前：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, config.<span class="property">root</span> + link + src);</span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, src);</span><br></pre></td></tr></table></figure><p><img src="12.png"><br>重新部署到 github 上，可以看到图片加载成功！<br><img src="13.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
          <category> 个人博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加hexo搭建个人博客（三）</title>
      <link href="/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装-hexo-并生成网页"><a href="#安装-hexo-并生成网页" class="headerlink" title="安装 hexo 并生成网页"></a>安装 hexo 并生成网页</h1><h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><p>创建一个任意名字的文件夹，这里我创建的是 My_Blog 。 进入该文件夹，右键进入 Git Bash 输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="1.png"><br>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>初始化我们的博客。<br><img src="2.png"><br>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>生成静态文件。<br><img src="3.png"><br>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>进行本地查看。<br><img src="4.png"><br>在浏览器中输入： <a href="http://localhost:4000/">http://localhost:4000/</a><br><img src="5.png"><br>可以看到我们的博客已经布置成功了。</p><h2 id="部署到github上"><a href="#部署到github上" class="headerlink" title="部署到github上"></a>部署到github上</h2><p>在 My_Blog 文件夹中，用笔记本打开 _config.yml 文件，在最后添加：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/你的 github 用户名/你的 github 用户名.github.io.git  #你的仓库地址</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p><img src="6.png"></p><p>在 My_Blog 文件夹中，打开 Git Bash，输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装 Git 部署插件。<br><img src="7.png"><br>第一次提交到 github ，会报错，我们需要先配置邮箱和用户名。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;you@example.com&quot; #注册 github 时的邮箱</span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;Your Name&quot; #注册 github 时的用户名</span><br></pre></td></tr></table></figure><p>依次输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean #清除缓存文件和静态文件</span><br><span class="line"></span><br><span class="line">hexo g #生成静态文件</span><br><span class="line"></span><br><span class="line">hexo d # 部署到对应的 github 仓库</span><br></pre></td></tr></table></figure><p>在浏览器中输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://你的 github 用户名.github.io/</span><br></pre></td></tr></table></figure><p>就可以看到相应的网站：<br><img src="8.png"><br>同时对应的 github 仓库也存在文件。<br><img src="9.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
          <category> 个人博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加hexo搭建个人博客（二）</title>
      <link href="/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装-node-js-并配置-node-js-的环境"><a href="#安装-node-js-并配置-node-js-的环境" class="headerlink" title="安装 node.js 并配置 node.js 的环境"></a>安装 node.js 并配置 node.js 的环境</h1><p>由于 hexo 是基于 node.js 开发的框架，因此我们需要安装 node.js 并配置好相应的环境。</p><h2 id="下载并安装-node-js"><a href="#下载并安装-node-js" class="headerlink" title="下载并安装 node.js"></a>下载并安装 node.js</h2><p>进入 <a href="https://nodejs.org/en," title="node.js 的官网">node.js</a> 的官网，选择相应的版本下载就行。<br><img src="1.png"><br>安装路径那里可以选择安装的地方，其他就是一路 next 就好。<br><img src="2.png"><br>安装完成后，node.js 默认会添加进环境变量中，因此在windows的命令提示符窗口中输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line"></span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>可以看到下面的版本信息，就表明安装成功了。<br><img src="3.png"></p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>我们在使用 npm 安装一些包和插件的时候，会默认安装到 C 盘，占用系统盘的空间，影响计算机的运行速度，因此我们需要更改默认设置。在命令提示符窗口中输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set prefix &quot;D:\Program Files\nodejs\node_global&quot;</span><br><span class="line"></span><br><span class="line">npm config set cache &quot;D:\Program Files\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure><p><img src="4.png"><br>在我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量 -&gt; 系统环境变量，新建一个名叫 NODE_PATH 的变量名，在变量值处，输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\Program Files\nodejs\node_modules</span><br></pre></td></tr></table></figure><p><img src="10.png"></p><p>再编辑上面的用户环境变量中的 Path。<br>修改前：<br><img src="5.png"><br>编辑为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\Program Files\nodejs\node_global</span><br></pre></td></tr></table></figure><p>修改后：<br><img src="6.png"><br>在命令提示符中输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure><p>可以看到安装的包已经安装到了我们所指定的文件夹，对于 node.js 的安装和环境的配置就算完成了。<br><img src="7.png"><br><img src="8.png"><br><img src="9.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/antma/article/details/86104068," title="node.js 安装详细步骤教程">node.js 安装详细步骤教程</a>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
          <category> 个人博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加hexo搭建个人博客（一）</title>
      <link href="/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>由于本人刚准备转码，希望可以提高个人技术，因此搭建个人博客，来记录学习过程，遇到的问题以及解决问题的方法。希望这个搭建的方法可以帮助到大家。</p><p><a href="https://hexo.io/" title="hexo官网">hexo</a> 是一个快速、简洁且高效的博客框架。hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。我们可以利用大型同性交友网站<a href="https://github.com/" title="github官网">github</a>和 hexo 免费搭建个人博客，白嫖是第一声力！</p><h1 id="github账号注册和git软件的下载"><a href="#github账号注册和git软件的下载" class="headerlink" title="github账号注册和git软件的下载"></a>github账号注册和git软件的下载</h1><h2 id="github账号注册"><a href="#github账号注册" class="headerlink" title="github账号注册"></a>github账号注册</h2><p>进入<a href="https://github.com/" title="github官网">github</a>官网，点击右上角用邮箱进行注册。<br><img src="1.png"><br><img src="2.png"><br>注册完成，登录之后，选择免费的就好。<br><img src="3.png"><br>创建仓库：<br><img src="4.png"><br>仓库名为：你的github账号名.github.io 如图：<br><img src="5.png"><br>创建好仓库之后，在浏览器中输入：https:&#x2F;&#x2F;你的github账号名.github.io&#x2F; 可以看到相应的网站，当然现在都是空白的网页：<br><img src="6.png"></p><h2 id="git软件的下载"><a href="#git软件的下载" class="headerlink" title="git软件的下载"></a>git软件的下载</h2><p>前往<a href="https://git-scm.com/" title="git官网">git</a>官网，下载git软件：<br><img src="7.png"><br>下载相应的版本，本人是win10 64位系统：<br><img src="8.png"><br>接下来安装git软件，除了选择安装目录那里，其他的按照默认的就可以了：<br><img src="9.png"><br>安装完成后，右键选择Open Git Bash here ，打开Git Bash<br><img src="10.png"><br>输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git</span><br></pre></td></tr></table></figure><p><img src="11.png"><br>得到以下信息，表示git安装成功！<br><img src="12.png"></p><h2 id="与github进行绑定"><a href="#与github进行绑定" class="headerlink" title="与github进行绑定"></a>与github进行绑定</h2><p>由于本人的博客会利用github，需要利用git将相应的文件上传到github，因此需用通过SSH登录远程的主机，相应的方式有两种：1，口令登录。2，公钥登录。前者每次都要输入密码，比较繁琐。本人选择公钥登录，以避免频繁输入密码，在 git bash 中输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>然后一直回车进行，如果出现下面的图，表示生成成功。<br><img src="13.png"><br>生成的秘钥 id_rsa 和公钥 id_rsa.pub 在 C:\Users\你的windows用户名\.ssh 目录下：<br><img src="14.png"><br>用记事本打开公钥，将里面的内容复制，进入github主页点击右边头像，然后点击 Settings<br><img src="15.png"><br>点击SSH and GPG keys ，再点击 New SSH key<br><img src="16.png"><br>在 Key 中输入公钥的内容，然后点击 Add SSH key<br><img src="17.png"><br>在 Git Bash 中输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>再输入 yes ，得到下面的结果就表示和github连接成功。<br><img src="18.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
          <category> 个人博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
