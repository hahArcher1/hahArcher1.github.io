<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux常用命令（二）</title>
      <link href="/2024/04/09/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2024/04/09/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">date #查看当前时间</span><br></pre></td></tr></table></figure><h2 id="切割命令"><a href="#切割命令" class="headerlink" title="切割命令"></a>切割命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cut -d: -f3 #用:作为切割符，给出切割后第3列信息</span><br></pre></td></tr></table></figure><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">date &gt; time.txt #把输出内容保存到文件中</span><br></pre></td></tr></table></figure><h3 id="FD简介"><a href="#FD简介" class="headerlink" title="FD简介"></a>FD简介</h3><ul><li>file descriptor(FD)，文件描述符，文件句柄</li><li>进程使用文件描述符来管理打开的文件，每个进程都有属于自己的FD</li><li>FD是数字，范围：0-255</li><li>1 表示标准输出，比如：终端界面</li><li>2 表示错误的输出，比如：终端界面</li><li>0 表示标准输入，比如：键盘鼠标啥的</li><li>其他数字：表示其他文件，可读可写</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim 1.txt #打开一个文件</span><br><span class="line">ps aux | grep vim #在新终端中查看vim的进程号</span><br><span class="line">[root@master ~]# ps aux | grep vim</span><br><span class="line">root      1565  0.0  0.2 149264  4960 pts/0    S+   09:46   0:00 vim 1.txt</span><br><span class="line">ls -d /proc/1565 #查看</span><br><span class="line">ls /proc/1565 #查看进程1565的信息</span><br></pre></td></tr></table></figure><p><img src="1.png"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -l /proc/1565/fd #里面的数字是链接</span><br></pre></td></tr></table></figure><p><img src="2.png"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 123 &gt; /dev/pts/0 #在新窗口里面输入这个</span><br><span class="line">旧窗口里面会出现：</span><br></pre></td></tr></table></figure><p><img src="3.png"></p><h3 id="输出重定向的类型"><a href="#输出重定向的类型" class="headerlink" title="输出重定向的类型"></a>输出重定向的类型</h3><ol><li>正确输出</li></ol><ul><li>1&gt; 相当于 &gt; #会覆盖内容</li><li>1&gt;&gt; 相当于 &gt;&gt; #追加内容</li></ul><ol start="2"><li>错误输出</li></ol><ul><li>2&gt;  #错误输出，会覆盖内容</li><li>2&gt;&gt; #错误输出，追加内容</li></ul><ol start="3"><li>同时输出正确和错误信息</li></ol><ul><li>&amp;&gt; # &amp;号和&gt;号不能分开，否则会当成后台运行<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls /home /aaaaa &amp;&gt; 2.txt</span><br><span class="line">ls /home /aaaaa &amp;&gt; /dev/null #什么信息都不输出，相当于丢进了垃圾桶回收站</span><br></pre></td></tr></table></figure></li></ul><h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h3><p>输入给程序，利用输入重定向，把文件内容代替人为的输入，编程时常用</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chengxu &lt; file #文件把内容给程序</span><br><span class="line">chengxu 0&lt; file #同上</span><br><span class="line"></span><br><span class="line">cat &gt;1.txt &lt;&lt; EOF</span><br><span class="line">11111</span><br><span class="line">22222</span><br><span class="line">33333</span><br><span class="line">EOF  # 将后面的内容给cat看，然后重定向保存在1.txt中，EOF(end of file)里面的回车都无效</span><br><span class="line">[root@master ~]# cat 1.txt </span><br><span class="line">11111</span><br><span class="line">22222</span><br><span class="line">33333</span><br></pre></td></tr></table></figure><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><h4 id="进程管道"><a href="#进程管道" class="headerlink" title="进程管道"></a>进程管道</h4><ul><li>简介：管道(piping)|可以将多条命令组合起来，一次性完成复杂的处理任务</li><li>语法：commad1|commad2|commad3</li><li>管道左侧的输出就是右侧的输入</li></ul><h4 id="tee管道"><a href="#tee管道" class="headerlink" title="tee管道"></a>tee管道</h4><ul><li>简介：三通管道，即交给另一个程序处理，又保存一份副本</li><li>语法：commad1 |tee 1.txt | commad2 |tee 2.txt | commad3</li></ul><h4 id="参数传递-xargs（特殊参数）"><a href="#参数传递-xargs（特殊参数）" class="headerlink" title="参数传递 xargs（特殊参数）"></a>参数传递 xargs（特殊参数）</h4><ul><li>cp rm一些特殊命令就是不服其他程序</li><li>实例<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch /home/file&#123;1..5&#125; #创建文件</span><br><span class="line">[root@master ~]# cat files </span><br><span class="line">/home/file1</span><br><span class="line">/home/file3</span><br><span class="line">/home/file5 #输入内容</span><br><span class="line">cat files | rm -rvf #删除文件</span><br><span class="line">删除失败</span><br><span class="line">cat files |xargs rm -rvf #使用xargs</span><br><span class="line">[root@master ~]# cat files |xargs rm -rvf</span><br><span class="line">removed ‘/home/file1’</span><br><span class="line">removed ‘/home/file3’</span><br><span class="line">removed ‘/home/file5’</span><br><span class="line">成功删除</span><br></pre></td></tr></table></figure></li></ul><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/da_ge_de_nv_ren/article/details/128391575" title="Linux">Linux</a></li><li><a href="https://www.bilibili.com/video/BV1pz4y1D73n?p=29&vd_source=4470be84aba61145fe9d1690fe726951" title="千锋云计算Linux教程650集，linux系统运维从入门到精通教程（Linux安装极速入门，零基础必备）">千锋云计算Linux教程650集，linux系统运维从入门到精通教程（Linux安装极速入门，零基础必备）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8集群Slurm作业管理系统安装（三）</title>
      <link href="/2024/03/28/Centos8%E9%9B%86%E7%BE%A4Slurm%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2024/03/28/Centos8%E9%9B%86%E7%BE%A4Slurm%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="slurm的安装和配置"><a href="#slurm的安装和配置" class="headerlink" title="slurm的安装和配置"></a>slurm的安装和配置</h1><h2 id="slurm的简介"><a href="#slurm的简介" class="headerlink" title="slurm的简介"></a>slurm的简介</h2><p>Slurm 任务调度工具（前身为极简Linux资源管理工具，英文：Simple Linux Utility for Resource Management，取首字母，简写为SLURM），或 Slurm，是一个用于 Linux 和 Unix 内核系统的自由开源的任务调度工具，被世界范围内的超级计算机和计算机群广泛采用。它提供了三个关键功能。第一，为用户分配一定时间的专享或非专享的资源(计算机节点)，以供用户执行工作。第二，它提供了一个框架，用于启动、执行、监测在节点上运行着的任务(通常是并行的任务，例如 MPI)，第三，为任务队列合理地分配资源。<br>大约60％的500强超级计算机上都运行着Slurm，包括2016年前世界上最快的计算机天河-2。<br>其为超算提供了三个关键功能：</p><ul><li>为用户分配一定时间的专享或非专享的资源，来执行任务</li><li>提供了用于启动、执行、监测在节点上运行的任务的框架</li><li>为任务队列合理地分配计算资源</li></ul><h2 id="slurm的架构"><a href="#slurm的架构" class="headerlink" title="slurm的架构"></a>slurm的架构</h2><p>在slurm计算集群系统，众多节点将会分为master节点（主节点&#x2F;管控节点），compute节点（计算节点）以及部分集群会有client节点（登录节点），它专门用来给用户执行各种作业调度与资源部署的指令，但多数情况是client节点和master节点部署在同一个节点上以简化部署。slurm包含四种服务（守护进程），在各个节点上有不同的部署分布：</p><ol><li>slurmctld服务：只运行于master节点，作为中心管理器用于监测资源和任务</li><li>slurmd服务，主要运行于compute节点，作用是接收调度，承担实际的计算负载</li><li>slurmdbd数据库服务，通常运行于master节点，可以将多个slurm管理的集群的记账信息记录在同一个数据库中</li><li>slurmrestd服务，通常运行于master节点，用来提供REST API与Slurm进行交互<br><img src="1.png"></li></ol><h2 id="创建slurm账户，并且保证所有节点一致"><a href="#创建slurm账户，并且保证所有节点一致" class="headerlink" title="创建slurm账户，并且保证所有节点一致"></a>创建slurm账户，并且保证所有节点一致</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export SLURM_USER=2025</span><br><span class="line">groupadd -g $SLURM_USER slurm</span><br><span class="line">useradd  -m -c &quot;SLURM manager&quot; -d /var/lib/slurm -u $SLURM_USER -g slurm  -s /bin/bash slurm</span><br></pre></td></tr></table></figure><h2 id="所有节点安装相关的依赖"><a href="#所有节点安装相关的依赖" class="headerlink" title="所有节点安装相关的依赖"></a>所有节点安装相关的依赖</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install python3 readline-devel pam-devel perl-ExtUtils-MakeMaker mailx</span><br></pre></td></tr></table></figure><h2 id="控制节点安装-slurm"><a href="#控制节点安装-slurm" class="headerlink" title="控制节点安装 slurm"></a>控制节点安装 slurm</h2><ol><li>先去<a href="https://www.schedmd.com/download-slurm/" title="slurm的官网">官网</a>下载相应的安装包，我下载的是 slurm-23.11.5.tar.bz2，并上传，然后生成rpm包。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpmbuild -ta --clean slurm-23.11.5.tar.bz2</span><br></pre></td></tr></table></figure><img src="2.png"></li><li>安装slurm<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /root/rpmbuild/RPMS/x86_64</span><br><span class="line">yum localinstall slurm-*</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制rpm包到共享区，用于计算节点的安装</span></span><br><span class="line">mkdir /opt/slurm_dir</span><br><span class="line">cp slurm-* /opt/slurm_dir</span><br></pre></td></tr></table></figure></li></ol><h2 id="计算节点安装-slurm"><a href="#计算节点安装-slurm" class="headerlink" title="计算节点安装 slurm"></a>计算节点安装 slurm</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#计算节点只需要安装</span><br><span class="line"># slurm</span><br><span class="line"># slurm-perlapi</span><br><span class="line"># slurm-pam_slurm</span><br><span class="line"># slurm-slurmd</span><br><span class="line">cd /opt/slurm_dir</span><br><span class="line">yum localinstall slurm-23.11.5-1.el8.x86_64.rpm slurm-pam_slurm-23.11.5-1.el8.x86_64.rpm slurm-perlapi-23.11.5-1.el8.x86_64.rpm slurm-slurmd-23.11.5-1.el8.x86_64.rpm -y</span><br></pre></td></tr></table></figure><h2 id="修改文件和相应的权限"><a href="#修改文件和相应的权限" class="headerlink" title="修改文件和相应的权限"></a>修改文件和相应的权限</h2><ol><li>控制节点<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建配置文件</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">slurmdbd.conf文件为slurmdbd服务的配置文件，所有者必须为slurm用户</span></span><br><span class="line">cp  /etc/slurm/slurmdbd.conf.example   /etc/slurm/slurmdbd.conf</span><br><span class="line">chown -R slurm:slurm /etc/slurm/slurmdbd.conf</span><br><span class="line">chmod -R 600 /etc/slurm/slurmdbd.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">slurm.conf文件为slurmd、slurmctld的配置文件，所有者必须为root用户</span></span><br><span class="line">cp  /etc/slurm/slurm.conf.example   /etc/slurm/slurm.conf</span><br><span class="line">chown -R root:root /etc/slurm/slurm.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">cgroup.conf文件配置默认即可</span></span><br><span class="line">cp  /etc/slurm/cgroup.conf.example   /etc/slurm/cgroup.conf</span><br><span class="line">chown -R root:root /etc/slurm/cgroup.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立slurmctld服务存储其状态等的目录，由slurm.conf中StateSaveLocation参数定义：</span></span><br><span class="line">mkdir /var/spool/slurmctld</span><br><span class="line">chown -R slurm:slurm /var/spool/slurmctld</span><br><span class="line">chmod -R 755 /var/spool/slurmctld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立日志文件存储目录，并修改目录权限</span></span><br><span class="line">mkdir /var/log/slurm</span><br><span class="line">touch /var/log/slurm/&#123;slurmd,slurmctld,slurmdbd&#125;.log</span><br><span class="line">chown -R slurm:slurm /var/log/slurm</span><br><span class="line">chmod -R 755 /var/log/slurm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建立slurmd服务目录</span></span><br><span class="line">mkdir /var/spool/slurmd</span><br><span class="line">chown -R root:root /var/spool/slurmd</span><br><span class="line">chmod -R 755 /var/spool/slurmd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建pid文件并设置权限</span></span><br><span class="line">touch /var/run/slurmdbd.pid</span><br><span class="line">chown slurm:slurm /var/run/slurmdbd.pid</span><br><span class="line">chmod 755 /var/run/slurmdbd.pid</span><br></pre></td></tr></table></figure></li><li>计算节点<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -pv /etc/slurm</span><br><span class="line">mkdir -pv /var/spool/slurmd</span><br><span class="line">mkdir -pv /var/log/slurm</span><br><span class="line">touch /var/log/slurm/slurmd.log &amp;&amp; chown -R slurm:slurm /var/log/slurm &amp;&amp; chmod -R 755 /var/log/slurm</span><br></pre></td></tr></table></figure></li><li>控制节点修改 slurmdbd的 slurmdbd.conf 配置文件，可以参考：<a href="https://mp.weixin.qq.com/s/EEHurb8u46YuTssban_qew" title="022-日常研究之Slurm部署文档">022-日常研究之Slurm部署文档</a>，以下是我的配置文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/slurm/slurmdbd.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Example slurmdbd.conf file.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># See the slurmdbd.conf man page for more information.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Archive info</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ArchiveJobs=<span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ArchiveDir=<span class="string">&quot;/tmp&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ArchiveSteps=<span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ArchiveScript=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JobPurge=12</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">StepPurge=1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Authentication info</span></span></span><br><span class="line">AuthType=auth/munge</span><br><span class="line">AuthInfo=/var/run/munge/munge.socket.2 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># slurmDBD info</span></span></span><br><span class="line">DbdAddr=172.16.34.127</span><br><span class="line">DbdHost=master</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">DbdPort=7031</span></span><br><span class="line">SlurmUser=slurm</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MessageTimeout=300</span></span><br><span class="line">DebugLevel=verbose</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">DefaultQOS=normal,standby</span></span><br><span class="line">LogFile=/var/log/slurm/slurmdbd.log</span><br><span class="line">PidFile=/var/run/slurmdbd.pid</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PluginDir=/usr/lib/slurm</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PrivateData=accounts,<span class="built_in">users</span>,usage,<span class="built_in">jobs</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">TrackWCKey=<span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Database info</span></span></span><br><span class="line">StorageType=accounting_storage/mysql</span><br><span class="line">StorageHost=172.16.34.127</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">StoragePort=1234</span></span><br><span class="line">StoragePass=123456</span><br><span class="line">StorageUser=slurm</span><br><span class="line">StorageLoc=slurm_acct_db</span><br></pre></td></tr></table></figure></li><li>控制节点修改slurmd和slurmctld的配置文件slurm.conf，可以参考：<a href="https://mp.weixin.qq.com/s/EEHurb8u46YuTssban_qew" title="022-日常研究之Slurm部署文档">022-日常研究之Slurm部署文档</a>，或者使用<a href="https://slurm.schedmd.com/configurator.html" title="官方的生成工具">官方的生成工具</a>，以下是我的配置文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/slurm/slurm.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">slurm.conf file generated by configurator.html.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Put this file on all nodes of your cluster.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">See the slurm.conf man page <span class="keyword">for</span> more information.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">ClusterName=cluster</span></span><br><span class="line">SlurmctldHost=master</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SlurmctldHost=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#DisableRootJobs=NO</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">EnforcePartLimits=NO</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Epilog=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">EpilogSlurmctld=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">FirstJobId=1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MaxJobId=67043328</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">GresTypes=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">GroupUpdateForce=0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">GroupUpdateTime=600</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JobFileAppend=0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JobRequeue=1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JobSubmitPlugins=lua</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">KillOnBadExit=0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">LaunchType=launch/slurm</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Licenses=foo*4,bar</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MailProg=/bin/mail</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MaxJobCount=10000</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MaxStepCount=40000</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MaxTasksPerNode=512</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MpiDefault=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MpiParams=ports=<span class="comment">#-#</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PluginDir=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PlugStackConfig=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PrivateData=<span class="built_in">jobs</span></span></span><br><span class="line">ProctrackType=proctrack/cgroup</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Prolog=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PrologFlags=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PrologSlurmctld=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PropagatePrioProcess=0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PropagateResourceLimits=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PropagateResourceLimitsExcept=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">RebootProgram=</span></span><br><span class="line">ReturnToService=1</span><br><span class="line">SlurmctldPidFile=/var/run/slurmctld.pid</span><br><span class="line">SlurmctldPort=6817</span><br><span class="line">SlurmdPidFile=/var/run/slurmd.pid</span><br><span class="line">SlurmdPort=6818</span><br><span class="line">SlurmdSpoolDir=/var/spool/slurmd</span><br><span class="line">SlurmUser=slurm</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SlurmdUser=root</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SrunEpilog=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SrunProlog=</span></span><br><span class="line">StateSaveLocation=/var/spool/slurmctld</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SwitchType=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">TaskEpilog=</span></span><br><span class="line">TaskPlugin=task/affinity,task/cgroup</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">TaskProlog=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">TopologyPlugin=topology/tree</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">TmpFS=/tmp</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">TrackWCKey=no</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">TreeWidth=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">UnkillableStepProgram=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">UsePAM=0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">TIMERS</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">BatchStartTimeout=10</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">CompleteWait=0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">EpilogMsgTime=2000</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">GetEnvTimeout=2</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">HealthCheckInterval=0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">HealthCheckProgram=</span></span><br><span class="line">InactiveLimit=0</span><br><span class="line">KillWait=30</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MessageTimeout=10</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ResvOverRun=0</span></span><br><span class="line">MinJobAge=300</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">OverTimeLimit=0</span></span><br><span class="line">SlurmctldTimeout=120</span><br><span class="line">SlurmdTimeout=300</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">UnkillableStepTimeout=60</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">VSizeFactor=0</span></span><br><span class="line">Waittime=0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SCHEDULING</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">DefMemPerCPU=0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MaxMemPerCPU=0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SchedulerTimeSlice=30</span></span><br><span class="line">SchedulerType=sched/backfill</span><br><span class="line">SelectType=select/cons_tres</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JOB PRIORITY</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityFlags=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityType=priority/multifactor</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityDecayHalfLife=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityCalcPeriod=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityFavorSmall=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityMaxAge=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityUsageResetPeriod=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityWeightAge=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityWeightFairshare=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityWeightJobSize=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityWeightPartition=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">PriorityWeightQOS=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">LOGGING AND ACCOUNTING</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">AccountingStorageEnforce=0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">AccountingStorageHost=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">AccountingStoragePass=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">AccountingStoragePort=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">AccountingStorageType=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">AccountingStorageUser=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">AccountingStoreFlags=</span></span><br><span class="line">JobCompHost=master</span><br><span class="line">JobCompLoc=slurm_jobcomp_db</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JobCompParams=</span></span><br><span class="line">JobCompPass=123456</span><br><span class="line">JobCompPort=3306</span><br><span class="line">JobCompType=jobcomp/mysql</span><br><span class="line">JobCompUser=slurm</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JobContainerType=</span></span><br><span class="line">JobAcctGatherFrequency=30</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">JobAcctGatherType=</span></span><br><span class="line">SlurmctldDebug=info</span><br><span class="line">SlurmctldLogFile=/var/log/slurm/slurmctld.log</span><br><span class="line">SlurmdDebug=info</span><br><span class="line">SlurmdLogFile=/var/log/slurm/slurmd.log</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SlurmSchedLogFile=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SlurmSchedLogLevel=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">DebugFlags=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">POWER SAVE SUPPORT FOR IDLE NODES (optional)</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SuspendProgram=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ResumeProgram=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SuspendTimeout=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ResumeTimeout=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ResumeRate=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SuspendExcNodes=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SuspendExcParts=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SuspendRate=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">SuspendTime=</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">COMPUTE NODES</span></span><br><span class="line">NodeName=node1 CPUs=4 Boards=1 SocketsPerBoard=1 CoresPerSocket=4 ThreadsPerCore=1 RealMemory=1778</span><br><span class="line">PartitionName=compute Nodes=node1 Default=YES MaxTime=INFINITE State=UP</span><br></pre></td></tr></table></figure></li><li>计算节点的信息可以获得<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">slurmd -C | head -n 1</span><br></pre></td></tr></table></figure><img src="3.png"></li><li>复制 配置文件到计算节点，保证所有节点的配置文件一致<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp /etc/slurm/slurm.conf node1:/etc/slurm/</span><br><span class="line">scp /etc/slurm/cgroup.conf node1:/etc/slurm/</span><br></pre></td></tr></table></figure></li><li>修改 slurmctld.service，要添加maridb服务 使slurmctld服务在数据库服务之后启动<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /lib/systemd/system/slurmctld.service</span><br></pre></td></tr></table></figure><img src="4.png"></li></ol><h2 id="slurm的启动"><a href="#slurm的启动" class="headerlink" title="slurm的启动"></a>slurm的启动</h2><h3 id="控制节点"><a href="#控制节点" class="headerlink" title="控制节点"></a>控制节点</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable slurmdbd slurmctld</span><br><span class="line">systemctl start slurmdbd slurmctld</span><br><span class="line">systemctl status slurmdbd slurmctld</span><br></pre></td></tr></table></figure><p><img src="5.png"><br><img src="6.png"></p><h3 id="计算节点"><a href="#计算节点" class="headerlink" title="计算节点"></a>计算节点</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable slurmd</span><br><span class="line">systemctl start slurmd</span><br><span class="line">systemctl status slurmd</span><br></pre></td></tr></table></figure><p><img src="7.png"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol><li>查看节点状态<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sinfo</span><br></pre></td></tr></table></figure><img src="8.png"></li><li>查看节点信息<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scontrol show partition</span><br></pre></td></tr></table></figure><img src="9.png"></li><li>提交任务<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">srun -N1 hostname</span><br></pre></td></tr></table></figure><img src="10.png"></li><li>提交VASP的并行任务，可以参考：<a href="/2024/03/20/Centos8-stream%E5%AE%89%E8%A3%85VASP-2024-Intel-oneAPI/" title="Centos8 stream安装VASP--2024 Intel oneAPI">Centos8 stream安装 VASP 2024 Intel oneAPI</a><br><img src="13.png"><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sbatch job.sh</span><br></pre></td></tr></table></figure><img src="14.png"><br><img src="15.png"></li><li>如果计算节点 状态为down，可以使用一下命令让其变为空闲（idle）状态<br><img src="11.png"><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scontrol update NodeName=node1 State=RESUME</span><br></pre></td></tr></table></figure><img src="12.png"></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://minglog.hzbmmc.com/2023/05/29/Slurm%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/" title="Slurm集群管理系统搭建">Slurm集群管理系统搭建</a></li><li><a href="https://mp.weixin.qq.com/s/EEHurb8u46YuTssban_qew" title="022-日常研究之Slurm部署文档">022-日常研究之Slurm部署文档</a></li><li><a href="https://www.ctyun.cn/developer/article/363542369067077" title="HPC调度基础：slurm集群的部署与配置">HPC调度基础：slurm集群的部署与配置</a></li><li><a href="https://slurm.schedmd.com/" title="slurm文档">slurm文档</a></li><li><a href="http://bbs.keinsci.com/thread-29223-1-1.html" title="[集群维护] 0基础slurm安装"> 0基础slurm安装</a></li><li><a href="https://advancedsolver.com/guide/admin/slurm-on-cluster/Installation" title="如何在服务器上安装并配置 slurm">如何在服务器上安装并配置 slurm</a></li><li><a href="https://zhuanlan.zhihu.com/p/637824704" title="slurm环境搭建">slurm环境搭建</a></li><li><a href="http://bbs.keinsci.com/thread-39120-1-1.html" title="南叔装机小记——第四篇（下集）：手搓slurm小集群">南叔装机小记——第四篇（下集）：手搓slurm小集群</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> munge </tag>
            
            <tag> slurm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8集群Slurm作业管理系统安装（二）</title>
      <link href="/2024/03/28/Centos8%E9%9B%86%E7%BE%A4Slurm%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2024/03/28/Centos8%E9%9B%86%E7%BE%A4Slurm%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="munge和mariadb软件的安装"><a href="#munge和mariadb软件的安装" class="headerlink" title="munge和mariadb软件的安装"></a>munge和mariadb软件的安装</h1><h2 id="munge的简介"><a href="#munge的简介" class="headerlink" title="munge的简介"></a>munge的简介</h2><p>munge是主要功能是认证服务，在大规模高性能计算集群中，用于生成和验证证书。slurm官方推荐使用munge作为slurm作业调度系统的认证服务，用于主控节点和计算节点之间的认证通信。配置时分为服务端和用户端，其中服务端应作为slurm调度服务的主控节点，用于管理认证服务。</p><h2 id="master节点的安装"><a href="#master节点的安装" class="headerlink" title="master节点的安装"></a>master节点的安装</h2><ol><li>确保master节点没有安装过 munge<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove munge munge-libs munge-devel -y</span><br><span class="line">userdel -r munge</span><br></pre></td></tr></table></figure></li><li>安装相关的软件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 epel-release</span></span><br><span class="line">yum install -y epel-release </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 rpmbuild</span></span><br><span class="line">yum install -y rpm-build</span><br></pre></td></tr></table></figure></li><li>因为munge安装后会自动创建munge用户，所以我们要提前创建munge用户，并且保证所有节点的munge用户的uid和gid相同<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export MUNGE_USER=2024</span><br><span class="line">groupadd -g $MUNGE_USER munge</span><br><span class="line">useradd  -m -c &quot;MUNGE User&quot; -d /var/lib/munge -u $MUNGE_USER -g munge  -s /sbin/nologin munge</span><br></pre></td></tr></table></figure></li><li>前往官网<a href="https://dun.github.io/munge/" title="munge官网">下载</a>最新的munge，我这里下载的是munge-0.5.16的版本，并上传，编译RPM包<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装相关依赖</span></span><br><span class="line">yum install -y bzip2-devel gcc openssl-devel zlib-devel</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编译RPM包</span></span><br><span class="line">rpmbuild -tb --without verify munge-0.5.16.tar.xz</span><br></pre></td></tr></table></figure></li><li>安装 munge<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /root/rpmbuild/RPMS/x86_64</span><br><span class="line">yum localinstall -y munge-0.5.16-1.el8.x86_64.rpm munge-libs-0.5.16-1.el8.x86_64.rpm munge-devel-0.5.16-1.el8.x86_64.rpm</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">复制到共享区，计算节点也需要安装</span></span><br><span class="line">mkdir /opt/munge_dir</span><br><span class="line">cp munge-0.5.16-1.el8.x86_64.rpm munge-libs-0.5.16-1.el8.x86_64.rpm munge-devel-0.5.16-1.el8.x86_64.rpm /opt/munge_dir</span><br></pre></td></tr></table></figure></li><li>创建munge.key文件，生成的文件在 &#x2F;etc&#x2F;munge下<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">产生munge.key文件</span></span><br><span class="line">sudo -u munge /usr/sbin/mungekey -v</span><br></pre></td></tr></table></figure><img src="1.png"><br><img src="2.png"></li><li>修改相关文件和文件夹的所属权限<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown munge: /etc/munge/munge.key </span><br><span class="line">chmod 400 /etc/munge/munge.key</span><br><span class="line">chown -R munge: /var/lib/munge</span><br><span class="line">chown -R munge: /var/run/munge</span><br><span class="line">chown -R munge: /var/log/munge</span><br></pre></td></tr></table></figure></li><li>启动服务并设置为开机自启<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start munge</span><br><span class="line">systemctl enable munge</span><br></pre></td></tr></table></figure></li></ol><h2 id="计算节点的安装"><a href="#计算节点的安装" class="headerlink" title="计算节点的安装"></a>计算节点的安装</h2><ol><li>确保计算节点没有安装过 munge<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove munge munge-libs munge-devel -y</span><br><span class="line">userdel -r munge</span><br></pre></td></tr></table></figure></li><li>安装相关的软件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 epel-release</span></span><br><span class="line">yum install -y epel-release </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 rpmbuild</span></span><br><span class="line">yum install -y rpm-build</span><br></pre></td></tr></table></figure></li><li>因为munge安装后会自动创建munge用户，所以我们要提前创建munge用户，并且保证所有节点的munge用户的uid和gid相同<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export MUNGE_USER=2024</span><br><span class="line">groupadd -g $MUNGE_USER munge</span><br><span class="line">useradd  -m -c &quot;MUNGE User&quot; -d /var/lib/munge -u $MUNGE_USER -g munge  -s /sbin/nologin munge</span><br></pre></td></tr></table></figure></li><li>安装 munge<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt/munge_dir/</span><br><span class="line">yum localinstall munge-0.5.16-1.el8.x86_64.rpm munge-libs-0.5.16-1.el8.x86_64.rpm munge-devel-0.5.16-1.el8.x86_64.rpm</span><br></pre></td></tr></table></figure></li><li>把master节点的munge.key 发送到计算节点<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp /etc/munge/munge.key root@node1:/etc/munge/</span><br></pre></td></tr></table></figure></li><li>设置相关权限<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 700 /etc/munge</span><br><span class="line">chown -R munge: /etc/munge</span><br><span class="line">chown -R munge: /var/lib/munge</span><br><span class="line">chown -R munge: /var/run/munge</span><br><span class="line">chown -R munge: /var/log/munge</span><br></pre></td></tr></table></figure></li><li>启动相关服务，并设置开机自动启动<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start munge</span><br><span class="line">systemctl enable munge</span><br></pre></td></tr></table></figure></li></ol><h2 id="进行验证"><a href="#进行验证" class="headerlink" title="进行验证"></a>进行验证</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">master节点输入</span></span><br><span class="line">munge -n|unmunge</span><br></pre></td></tr></table></figure><p><img src="3.png"><br>说明master节点的munge安装成功</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务节点输入</span></span><br><span class="line">munge -n|ssh node1 unmunge</span><br></pre></td></tr></table></figure><p><img src="4.png"><br>说明计算节点的munge安装成功</p><h2 id="mariadb的简介"><a href="#mariadb的简介" class="headerlink" title="mariadb的简介"></a>mariadb的简介</h2><p>MariaDB Server 是一个通用的开源关系数据库管理系统。 它是世界上最受欢迎的数据库服务器之一，拥有包括 Wikipedia、WordPress.com 和 Google 在内的知名用户。 MariaDB Server 在 GPLv2 开源许可下发布，并保证保持开源。它可用于高可用性事务数据、分析、作为嵌入式服务器，并且广泛的工具和应用程序支持 MariaDB Server。</p><h2 id="mariadb的安装"><a href="#mariadb的安装" class="headerlink" title="mariadb的安装"></a>mariadb的安装</h2><ol><li>确保控制节点和计算节点都没有安装过mariadb<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum list installed mariadb</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果有就卸载</span></span><br><span class="line">yum -y remove mariadb*</span><br></pre></td></tr></table></figure></li><li>前往<a href="https://mariadb.org/download/" title="mariad的官网">mariadb的官网</a>，获取相应版本的yum源，并复制。我这里用的是10.11版本，使用的是阿里源。<br><img src="5.png"></li><li>添加 yum 源<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/yum.repos.d/mariadb.repo</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加相应的yum源，添加</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MariaDB 10.11 RedHatEnterpriseLinux repository list - created 2024-03-31 06:10 UTC</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://mariadb.org/download/</span></span><br><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rpm.mariadb.org is a dynamic mirror <span class="keyword">if</span> your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ <span class="keyword">for</span> details.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">baseurl = https://rpm.mariadb.org/10.11/rhel/<span class="variable">$releasever</span>/<span class="variable">$basearch</span></span></span><br><span class="line">baseurl = https://mirrors.aliyun.com/mariadb/yum/10.11/rhel/$releasever/$basearch</span><br><span class="line">module_hotfixes = 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">gpgkey = https://rpm.mariadb.org/RPM-GPG-KEY-MariaDB</span></span><br><span class="line">gpgkey = https://mirrors.aliyun.com/mariadb/yum/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck = 1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行</span></span><br><span class="line">yum clean all &amp;&amp; yum makecache </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发送到计算节点</span></span><br><span class="line">scp /etc/yum.repos.d/mariadb.repo node1:/etc/yum.repos.d/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在计算节点执行</span></span><br><span class="line">yum clean all &amp;&amp; yum makecache</span><br></pre></td></tr></table></figure></li><li>master节点安装<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y mariadb mariadb-server mariadb-devel MariaDB-backup</span><br></pre></td></tr></table></figure></li><li>计算节点安装<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y  MariaDB-common  MariaDB-compat  libyaml</span><br></pre></td></tr></table></figure></li><li>master 节点配置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动数据库，并开机自动启动</span></span><br><span class="line">systemctl  enable  --now mariadb</span><br><span class="line">mariadb-secure-installation</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置数据库</span></span><br><span class="line">Enter current password for root (enter for none): 回车</span><br><span class="line">Switch to unix_socket authentication [Y/n] n</span><br><span class="line">Change the root password? [Y/n] y</span><br><span class="line">New password: </span><br><span class="line">Remove anonymous users? [Y/n] 回车</span><br><span class="line">Disallow root login remotely? [Y/n] n</span><br><span class="line">Remove test database and access to it? [Y/n] 回车</span><br><span class="line">Reload privilege tables now? [Y/n] 回车</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置数据库</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个新用户slurm,密码是123456,并指定使用localhost本地权限.</span></span><br><span class="line">create user &#x27;slurm&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成slurm用户,其密码是123456，可自行设定,并开启%远程登录</span></span><br><span class="line">create user &#x27;slurm&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成账户数据库slurm_acct_db</span></span><br><span class="line">create database slurm_acct_db;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">赋予slurm从本机localhost采用密码123456登录具备操作slurm_acct_db数据下所有表的全部权限</span></span><br><span class="line">grant all on slurm_acct_db.* TO &#x27;slurm&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27; with grant option;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建slurm用户并给予%远程登陆的权限,并对slurm_acct_db数据库全部授权</span></span><br><span class="line">grant all on slurm_acct_db.* TO &#x27;slurm&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27; with grant option;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成作业信息数据库slurm_jobcomp_db</span></span><br><span class="line">create database slurm_jobcomp_db;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">赋予slurm从本机localhost采用密码123456登录具备操作slurm_jobcomp_db数据下所有表的全部权限</span></span><br><span class="line">grant all on slurm_jobcomp_db.* TO &#x27;slurm&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27; with grant option;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建slurm用户并给予%远程登陆的权限,并对slurm_jobcomp_db数据库全部授权</span></span><br><span class="line">grant all on slurm_jobcomp_db.* TO &#x27;slurm&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27; with grant option;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#保存配置</span></span></span><br><span class="line">flush privileges; </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#退出</span></span></span><br><span class="line">exit;</span><br></pre></td></tr></table></figure></li><li>可以修改数据库的配置文件 &#x2F;etc&#x2F;my.cnf 。我这里就不修改了。</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://minglog.hzbmmc.com/2023/05/29/Slurm%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%90%AD%E5%BB%BA/" title="Slurm集群管理系统搭建">Slurm集群管理系统搭建</a></li><li><a href="https://mp.weixin.qq.com/s/EEHurb8u46YuTssban_qew" title="022-日常研究之Slurm部署文档">022-日常研究之Slurm部署文档</a></li><li><a href="https://blog.csdn.net/xhk12345678/article/details/124710893" title="munge认证服务配置-集群搭建步骤4">munge认证服务配置-集群搭建步骤4</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> munge </tag>
            
            <tag> mariadb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8集群Slurm作业管理系统安装（一）</title>
      <link href="/2024/03/28/Centos8%E9%9B%86%E7%BE%A4Slurm%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/03/28/Centos8%E9%9B%86%E7%BE%A4Slurm%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>之前我们安装了Torque作业管理系统，但是这个太老了，而且基本上就只有一些小型的高性能计算集群在使用，目前主流的是使用Slurm作业管理系统，特别是在大型的超算体系下，因此为了以后的工作，还是需要自己搭建一个Slurm作业管理系统。</p><h1 id="Chrony服务的搭建"><a href="#Chrony服务的搭建" class="headerlink" title="Chrony服务的搭建"></a>Chrony服务的搭建</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Chrony是NTP（Network Time Protocol，网络时间协议，服务器时间同步的一种协议）的另一种实现，与ntpd不同，它可以更快且更准确地同步系统时钟，最大程度的减少时间和频率误差。由于Slurm需要用到munge来做信息认证服务，而munge需要每个节点之间的时间误差在5分钟之内，因此我们需要做时间同步。</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><table><thead><tr><th align="center">主机名</th><th align="center">系统</th><th align="center">ip</th></tr></thead><tbody><tr><td align="center">master（服务端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.127</td></tr><tr><td align="center">node1（客户端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.128</td></tr></tbody></table><h2 id="服务端和客户端共同配置"><a href="#服务端和客户端共同配置" class="headerlink" title="服务端和客户端共同配置"></a>服务端和客户端共同配置</h2><ol><li><p>为了避免服务端和客户端无法通信，关闭防火墙和selinux</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改</span></span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure></li><li><p>修改hosts文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">172.16.34.127 master</span><br><span class="line">172.16.34.128 node1</span><br></pre></td></tr></table></figure></li></ol><h2 id="服务端的配置"><a href="#服务端的配置" class="headerlink" title="服务端的配置"></a>服务端的配置</h2><ol><li><p>默认下Centos8已经安装了chrony，如果没有安装可以自己安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install chrony </span><br></pre></td></tr></table></figure></li><li><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/chrony.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加</span></span><br><span class="line">allow 172.16.34.0/24</span><br></pre></td></tr></table></figure></li><li><p>配置成功后，重启服务，并配置开机自启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart chronyd.service &amp;&amp; systemctl enable chronyd.service --now</span><br></pre></td></tr></table></figure></li><li><p>查看是否成功</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ss -tlunp | grep chronyd</span><br></pre></td></tr></table></figure></li></ol><p><img src="1.png"></p><h2 id="客户端的配置"><a href="#客户端的配置" class="headerlink" title="客户端的配置"></a>客户端的配置</h2><ol><li><p>默认下Centos8已经安装了chrony，如果没有安装可以自己安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install chrony </span><br></pre></td></tr></table></figure></li><li><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/chrony.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注释掉默认的NTP服务器地址，添加服务端的地址</span></span><br><span class="line">server 172.16.34.127 iburst</span><br></pre></td></tr></table></figure></li></ol><p><img src="2.png"></p><ol start="3"><li><p>配置成功后，重启服务，并配置开机自启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart chronyd.service &amp;&amp; systemctl enable chronyd.service --now</span><br></pre></td></tr></table></figure></li><li><p>查看是否成功</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chronyc sources -v</span><br></pre></td></tr></table></figure></li></ol><p><img src="3.png"></p><ol start="5"><li>服务器地址前有^*，表示已经配置成功NTP服务器</li></ol><h1 id="NIS系统的搭建"><a href="#NIS系统的搭建" class="headerlink" title="NIS系统的搭建"></a>NIS系统的搭建</h1><ul><li>可以参考：<a href="/2024/03/22/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89/" title="Centos8集群Torque作业管理系统安装（一）">Centos8集群Torque作业管理系统安装（一）</a></li></ul><h1 id="NFS系统的搭建"><a href="#NFS系统的搭建" class="headerlink" title="NFS系统的搭建"></a>NFS系统的搭建</h1><ul><li>可以参考：<a href="/2024/03/22/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89/" title="Centos8集群Torque作业管理系统安装（二）">Centos8集群Torque作业管理系统安装（二）</a></li></ul><h1 id="集群免密登录"><a href="#集群免密登录" class="headerlink" title="集群免密登录"></a>集群免密登录</h1><ul><li>可以参考：<a href="/2024/03/23/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%89%EF%BC%89/" title="Centos8集群Torque作业管理系统安装（三）">Centos8集群Torque作业管理系统安装（三）</a></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://42cloud.cn/2020/08/09/148.html" title="Centos8配置 chrony NTP服务端及客户端">Centos8配置 chrony NTP服务端及客户端</a></li><li><a href="https://www.cnblogs.com/pipci/p/12871993.html" title="linux时间同步chrony介绍">linux时间同步chrony介绍</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> Chrony </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8集群Torque作业管理系统安装（四）</title>
      <link href="/2024/03/23/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2024/03/23/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>前面安装了这么多的软件，终于要安装我们的主角 Torque 了。组里的服务器就是用的Torque作为作业管理的。</p><h1 id="Torque-作业系统的搭建"><a href="#Torque-作业系统的搭建" class="headerlink" title="Torque 作业系统的搭建"></a>Torque 作业系统的搭建</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>对于高性能计算集群而言，作业调度系统是必不可少的工具软件，不论是单机计算还是集群计算，它的作用是更好的分配计算资源，管理用户的作业。作业调度软件有很多种，常见的有Torque、MAUI、SGE、slurm、HTcondar、openPBS等。我这里采用的Torque软件。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>关机的时候先关计算节点再关控制节点，开机的时候先开控制节点再开计算节点。</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><table><thead><tr><th align="center">主机名</th><th align="center">系统</th><th align="center">ip</th></tr></thead><tbody><tr><td align="center">master（控制节点）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.122</td></tr><tr><td align="center">node1（计算节点）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.123</td></tr></tbody></table><h2 id="控制节点和计算节点的共同配置"><a href="#控制节点和计算节点的共同配置" class="headerlink" title="控制节点和计算节点的共同配置"></a>控制节点和计算节点的共同配置</h2><ol><li>为了避免服务端和客户端无法通信，关闭防火墙和selinux<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure></li><li>修改hosts文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">172.16.34.122 master</span><br><span class="line">172.16.34.123 node1</span><br></pre></td></tr></table></figure></li></ol><h2 id="控制节点的配置"><a href="#控制节点的配置" class="headerlink" title="控制节点的配置"></a>控制节点的配置</h2><ol><li>安装相关的软件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install libxml2-devel openssl-devel gcc gcc-c++ boost-devel libtool -y</span><br></pre></td></tr></table></figure></li><li>下载 Torque 软件，相应的软件可以在本博客的<a href="https://haharcher1.github.io/download/" title="资源">资源</a>页面找到，上传到控制节点并解压。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf torque-6.1.3_gcc8.tar.gz</span><br></pre></td></tr></table></figure></li><li>进入 Torque 文件夹，并配置安装位置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd torque-6.1.3</span><br><span class="line">./configure --prefix=/usr/local/torque --with-scp --with-default-server=master #注意 master 为控制节点主机名，请根据自己的情况修改</span><br></pre></td></tr></table></figure><img src="1.png"></li><li>进行安装<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br><span class="line">make packages</span><br></pre></td></tr></table></figure></li><li>添加库到系统<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">libtool --finish /usr/local/torque/lib</span><br></pre></td></tr></table></figure><img src="2.png"></li><li>拷贝作业调度服务到 &#x2F;etc&#x2F;init.d ，当我们安装集群版本时，控制节点一般不参与计算，无需拷贝 pbs_mom ，其为作业调度的客户端服务进程，只需要 pbs_server 和pbs_trqauthd 。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp contrib/init.d/pbs_server /etc/init.d/</span><br><span class="line">cp contrib/init.d/trqauthd /etc/init.d/</span><br></pre></td></tr></table></figure></li><li>配置 Torque 环境，编译完成后会在 &#x2F;etc&#x2F;profile.d&#x2F;目录下自动生成torque.sh文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls </span><br></pre></td></tr></table></figure><img src="3.png"><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile.d/torque.sh</span><br></pre></td></tr></table></figure></li><li>设置所有用户每次登陆都配置 Torque 环境<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line">#添加 </span><br><span class="line">source /etc/profile.d/torque.sh</span><br></pre></td></tr></table></figure></li><li>设置服务开机自动启动<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable pbs_server.service</span><br><span class="line">systemctl enable trqauthd.service</span><br></pre></td></tr></table></figure></li><li>初始化并启动 Torque 服务<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./torque.setup root</span><br><span class="line">qterm</span><br><span class="line">for i in pbs_server trqauthd; do service $i start;done</span><br></pre></td></tr></table></figure><img src="4.png"></li><li>在 &#x2F;var&#x2F;spool&#x2F;torque&#x2F;server_priv&#x2F;nodes 添加计算节点的信息<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /var/spool/torque/server_priv/nodes</span><br></pre></td></tr></table></figure><img src="5.png"></li></ol><ul><li>nodes文件的添加规则为：主机名，可用CPU核心数（物理核心数），作业队列名</li><li>node1 为主机名</li><li>np&#x3D;填写该主机的可用CPU核心数，请注意，填写物理核心数，而不是超线程数</li><li>bigmem 是队列名。可以填写多个队列名</li></ul><ol start="12"><li>将计算节点的所需要的安装包上传到计算节点<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp torque-package-clients-linux-x86_64.sh torque-package-mom-linux-x86_64.sh node1:/root/</span><br><span class="line">scp contrib/init.d/pbs_mom node1:/etc/init.d/</span><br><span class="line">scp contrib/init.d/trqauthd node1:/etc/init.d/</span><br></pre></td></tr></table></figure></li></ol><h2 id="计算节点的配置"><a href="#计算节点的配置" class="headerlink" title="计算节点的配置"></a>计算节点的配置</h2><ol><li>运行安装程序<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./torque-package-mom-linux-x86_64.sh --install</span><br><span class="line">./torque-package-clients-linux-x86_64.sh --install</span><br></pre></td></tr></table></figure></li><li>修改配置文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /var/spool/torque/mom_priv/config</span><br><span class="line">#添加</span><br><span class="line">pbsserver master</span><br><span class="line">logevent 255</span><br></pre></td></tr></table></figure></li><li>启动服务设置开机自动启动<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/pbs_mom start</span><br><span class="line">systemctl enable pbs_mom </span><br><span class="line">/etc/init.d/trqauthd start</span><br><span class="line">systemctl enable trqauthd</span><br></pre></td></tr></table></figure></li><li>每一个计算节点都需要这样配置</li></ol><h2 id="重启作业调度系统"><a href="#重启作业调度系统" class="headerlink" title="重启作业调度系统"></a>重启作业调度系统</h2><ul><li>控制节点：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart pbs_server</span><br><span class="line">systemctl restart trqauthd</span><br></pre></td></tr></table></figure></li><li>计算节点：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart trqauthd</span><br><span class="line">systemctl restart pbs_mom</span><br></pre></td></tr></table></figure></li></ul><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><ul><li>for i in pbs_server pbs_sched pbs_mom trqauthd; do service $i start; done</li><li>for i in pbs_server pbs_sched pbs_mom trqauthd; do service $i stop; done</li><li>for i in pbs_server pbs_sched pbs_mom trqauthd; do service $i status; done<br>或者</li><li>&#x2F;etc&#x2F;init.d&#x2F;pbs_server start|stop|status  </li><li>&#x2F;etc&#x2F;init.d&#x2F;pbs_sched start|stop|status  </li><li>&#x2F;etc&#x2F;init.d&#x2F;pbs_mom start|stop|status  </li><li>&#x2F;etc&#x2F;init.d&#x2F;trqauthd start|stop|status</li></ul><h1 id="Maui的安装"><a href="#Maui的安装" class="headerlink" title="Maui的安装"></a>Maui的安装</h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><p>Torque自带一个任务调度器 pbs_sched ，但是我们并没有安装。我们安装Maui来代替，其功能丰富，适合中小集群使用。Maui 只需装在控制节点上，计算节点上不必安装。为丰富torque的管理调度功能，一般用maui调度和管理torque作业。</p><h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><p>Maui 只需要安装在控制节点上。</p><h2 id="开始安装-Maui"><a href="#开始安装-Maui" class="headerlink" title="开始安装 Maui"></a>开始安装 Maui</h2><ol><li>下载 Maui 软件，相应的软件可以在本博客的<a href="https://haharcher1.github.io/download/" title="资源">资源</a>页面找到，上传到控制节点并解压。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf maui-3.3.1.tar.gz</span><br></pre></td></tr></table></figure></li><li>进入 Maui 文件夹，并配置安装位置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd maui-3.3.1</span><br><span class="line">./configure --prefix=/usr/local/maui --with-pbs=/usr/local/torque</span><br></pre></td></tr></table></figure></li></ol><ul><li>.&#x2F;configure 预编译</li><li>–prefix&#x3D; 指定编译安装路径</li><li>–with-pbs&#x3D;&#x2F;usr&#x2F;local&#x2F;torque 指定torque路径<br><img src="6.png"></li></ul><ol start="3"><li>安装<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>如果make过程中出现类似“&#x2F;usr&#x2F;bin&#x2F;ld: cannot find -ltorque”，编辑Makefile文件，参考如下添加torque的库路径和头文件路径：<br>export PBSCFLAGS &#x3D; -I&#x2F;usr&#x2F;local&#x2F;torque&#x2F;include<br>export PBSLDFLAGS &#x3D; -L&#x2F;usr&#x2F;local&#x2F;torque&#x2F;lib -ltorque<br><img src="15.png"></li><li>配置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi contrib/service-scripts/redhat.maui.d</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改</span></span><br><span class="line">MAUI_PREFIX=/opt -&gt; MAUI_PREFIX=/usr/local/maui</span><br><span class="line">daemon --user maui -&gt; daemon --user root</span><br></pre></td></tr></table></figure><img src="7.png"></li><li>启动 Maui ，并设置开机自动启动<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp contrib/service-scripts/redhat.maui.d /etc/init.d/maui</span><br><span class="line">chmod a+x /etc/init.d/maui</span><br><span class="line">chkconfig maui on</span><br><span class="line">systemctl enable maui #开机启动</span><br><span class="line">/etc/init.d/maui start #启动</span><br></pre></td></tr></table></figure></li><li>相关命令</li></ol><ul><li>&#x2F;etc&#x2F;init.d&#x2F;maui  start      #启动maui</li><li>&#x2F;etc&#x2F;init.d&#x2F;maui  status     #查看maui开启状态</li><li>&#x2F;etc&#x2F;init.d&#x2F;maui  restart    #重启maui</li><li>&#x2F;etc&#x2F;init.d&#x2F;maui  stop       #停止maui</li></ul><h1 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h1><ul><li>pbsnodes: Server has no node list MSG&#x3D;node list is empty - check ‘server_priv&#x2F;nodes’ file<br>用 qterm 之后重启服务</li></ul><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><ol><li>控制节点和计算节点都关机重启，注意顺序</li><li>看到进程<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -e | grep 进程名字</span><br></pre></td></tr></table></figure><img src="8.png"><br><img src="9.png"></li><li>设置队列<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qmgr -c &quot;create queue bigmem queue_type=execution&quot;</span><br><span class="line">qmgr -c &quot;set queue bigmem enabled = True&quot;</span><br><span class="line">qmgr -c &quot;set queue bigmem started = True&quot; #我这里设置的队列名字是 bigmem</span><br></pre></td></tr></table></figure></li><li>使用 VASP 进行测试</li><li>准备好 VASP文件和提交任务脚本<br><img src="10.png"><br><img src="11.png"></li><li>设置好 VSAP 和 Intel oneAPI 的环境变量，可以参考：<a href="/2024/03/20/Centos8-stream%E5%AE%89%E8%A3%85VASP-2024-Intel-oneAPI/" title="Centos8 stream安装VASP--2024 Intel oneAPI">Centos8 stream安装 VASP 2024 Intel oneAPI</a></li><li>由于我的 VASP 安装在 &#x2F;opt 下面 所以我需要将 node1 的&#x2F;opt 挂载到master的 &#x2F;opt 下面，具体方法参考：<a href="/2024/03/22/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89/" title="Centos8集群Torque作业管理系统安装（二）">Centos8集群Torque作业管理系统安装（二）</a></li><li>完成后就可以提交任务。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qsub workVasp.pbs</span><br></pre></td></tr></table></figure><img src="13.png"><br><img src="14.png"><br><img src="12.png"><br>可以看到计算成功，表明我们的Torque作业管理系统安装成功。</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/387947448" title="Centos7+Torque+Maui安装">Centos7+Torque+Maui安装</a></li><li><a href="https://zhuanlan.zhihu.com/p/201400741" title="Centos 7 或 Centos 8 下集群服务器 Torque作业管理系统的安装（小白专用）">Centos 7 或 Centos 8 下集群服务器 Torque作业管理系统的安装（小白专用）</a></li><li><a href="https://gist.github.com/wangxianhe/1236d22319ddff6b42b1dcfc7f60eac7" title="CentOS 7 高性能计算（HPC）集群搭建过程">CentOS 7 高性能计算（HPC）集群搭建过程</a></li><li><a href="https://blog.csdn.net/u012460749/article/details/78583026" title="Centos7安装-多节点Torque">Centos7安装-多节点Torque</a></li><li><a href="http://bbs.keinsci.com/thread-20943-1-1.html" title="CentOS下安装PBS+maui教程">CentOS下安装PBS+maui教程</a></li><li><a href="https://cloud.tencent.com/developer/article/2158787" title="Centos7安装-多节点Torque">Centos7安装-多节点Torque</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> Torque </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8集群Torque作业管理系统安装（三）</title>
      <link href="/2024/03/23/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2024/03/23/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>搭建集群的时候需要频繁的到个个节点上去，因此需要设置节点之间的免密登录</p><h1 id="集群免密登录"><a href="#集群免密登录" class="headerlink" title="集群免密登录"></a>集群免密登录</h1><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><table><thead><tr><th align="center">主机名</th><th align="center">系统</th><th align="center">ip</th></tr></thead><tbody><tr><td align="center">master（服务端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.122</td></tr><tr><td align="center">node1（客户端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.123</td></tr></tbody></table><h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><ol><li>修改hosts文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">172.16.34.122 master</span><br><span class="line">172.16.34.123 node1</span><br></pre></td></tr></table></figure></li><li>在每台机器上都生成秘钥对<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>输入三次回车后，在家目录下会生成 .ssh 文件夹<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -a</span><br></pre></td></tr></table></figure><img src="1.png"><br>在 .ssh 目录下会看见 id_rsa（私钥）和 id_rsa.pub （公钥）<br><img src="2.png"></li><li>将 master 的 id_rsa.pub 复制到 node1<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp ~/.ssh/id_rsa.pub root@node1:~/.ssh/master_pub</span><br></pre></td></tr></table></figure><img src="3.png"><br><img src="4.png"></li><li>合并 master_pub 和 node1 的 id_rsa.pub 合并为 authorized_keys<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat master_pub id_rsa.pub &gt; authorized_keys</span><br></pre></td></tr></table></figure></li><li>将生成好的 authorized_keys 发送回 master<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp authorized_keys root@master:~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li>测试成功<br><img src="5.png"><br><img src="6.png"></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/136152982" title="linux 集群免密登录，多种方式，详细">linux 集群免密登录，多种方式，详细</a><br><a href="https://gist.github.com/wangxianhe/d9bb9a4006bc0ec456c0ddb62d69a1a8" title="CentOS7 ssh免密码访问">CentOS7 ssh免密码访问</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8集群Torque作业管理系统安装（二）</title>
      <link href="/2024/03/22/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2024/03/22/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>主要还是工作原因，需要搭建高性能计算集群，因此这里用虚拟机搭一个小的集群，学习一下。</p><h1 id="NFS系统的搭建"><a href="#NFS系统的搭建" class="headerlink" title="NFS系统的搭建"></a>NFS系统的搭建</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>对于我们进行集群计算，远程多用户提交算例不仅要求每一台服务器上用户一样，必要程序的文件路径同样要求相同，因此需要将计算节点的部分文件夹挂载到控制节点。NFS（Network File System）就可以实现这样的功能。NFS 即网络文件系统。功能是让客户端通过网络访问不同主机上磁盘里的数据。特别是我们在控制节点上装上了某个软件，但是没有在计算节点上装，一定要把这个软件地址挂载到控制节点上，不然无法进行计算，要保证软件的路径相同。NFS的实现依赖于RPC（远程过程调用）机制，RPC充当NFS服务器和客户端的中介，以完成从远程到本地的映射过程，提供RPC支持的服务为rpcbind，提供NFS共享的服务为nfs-server。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>关机的时候先关客户端再关服务端，开机的时候先开服务端再开客户端。</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><table><thead><tr><th align="center">主机名</th><th align="center">系统</th><th align="center">ip</th></tr></thead><tbody><tr><td align="center">master（服务端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.122</td></tr><tr><td align="center">node1（客户端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.123</td></tr></tbody></table><h2 id="服务端和客户端共同配置"><a href="#服务端和客户端共同配置" class="headerlink" title="服务端和客户端共同配置"></a>服务端和客户端共同配置</h2><ol><li>为了避免服务端和客户端无法通信，关闭防火墙和selinux<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure></li><li>修改hosts文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">172.16.34.122 master</span><br><span class="line">172.16.34.123 node1</span><br></pre></td></tr></table></figure></li></ol><h2 id="服务端的配置"><a href="#服务端的配置" class="headerlink" title="服务端的配置"></a>服务端的配置</h2><ol><li>安装服务端需要的软件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install nfs-utils</span><br></pre></td></tr></table></figure>注意我们只安装 nfs-utils 就可以，rpcbind 属于它的依赖，也会安装上。</li><li>启动 NSF 并开启开机自动启动<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable rpcbind</span><br><span class="line">systemctl enable --now nfs-server</span><br><span class="line">systemctl start rpcbind</span><br><span class="line">systemctl start nfs-server</span><br></pre></td></tr></table></figure></li><li>我们以挂载 \home 为例<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/exports</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line"> /home 172.16.34.0/24(rw,sync,no_root_squash,no_all_squash)</span><br></pre></td></tr></table></figure></li></ol><ul><li>共享 &#x2F;home 目录</li><li>172.16.34.0&#x2F;24 设置客户端的 ip 地址范围，* 代表所有，即没有限制</li><li>rw: 权限设置，可读可写。</li><li>sync: 同步共享目录。</li><li>no_root_squash: 可以使用 root 授权。</li><li>no_all_squash: 可以使用普通用户授权。</li></ul><ol start="4"><li>刷新配置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exportfs -rv</span><br></pre></td></tr></table></figure></li><li>重启 NFS 服务<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart nfs-server</span><br></pre></td></tr></table></figure></li><li>检查一下本地的共享目录<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">showmount -e 主机名</span><br></pre></td></tr></table></figure><img src="1.png"></li></ol><h2 id="客户端的配置"><a href="#客户端的配置" class="headerlink" title="客户端的配置"></a>客户端的配置</h2><ol><li>安装客户端需要的软件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install nfs-utils</span><br></pre></td></tr></table></figure></li><li>启动 NFS 相关的服务并设置开机启动<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable rpcbind</span><br><span class="line">systemctl enable --now nfs-server</span><br><span class="line">systemctl start rpcbind</span><br><span class="line">systemctl start nfs-server</span><br></pre></td></tr></table></figure></li><li>检查服务端的共享目录<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">showmount -e 服务端主机名</span><br></pre></td></tr></table></figure><img src="2.png"></li><li>挂载共享文件夹<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount -t nfs 服务端主机名:/home/ /home/</span><br></pre></td></tr></table></figure><img src="3.png"></li><li>查看挂载<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount</span><br></pre></td></tr></table></figure><img src="4.png"></li><li>测试挂载，在客户端的共享区创建文件，在服务端可以看到相应的文件<br><img src="5.png"><br><img src="6.png"><br>7.设置开机自动挂载<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.local</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">mount -t nfs 主机名:/home/ /home/</span><br></pre></td></tr></table></figure></li><li>关机之后重启<br><img src="7.png"><br><img src="8.png"></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://developer.aliyun.com/article/834355" title="如果有人问你Centos8怎么安装配置NFS，就把这篇文章丢给她!">如果有人问你Centos8怎么安装配置NFS，就把这篇文章丢给她!</a></li><li><a href="https://gist.github.com/wangxianhe/d42c0b777287f215d5c18757fc0e0308" title="CentOS nfs服务">CentOS nfs服务</a></li><li><a href="https://blog.csdn.net/suifeng1984114/article/details/122467608" title="Centos8 NFS服务器搭建">Centos8 NFS服务器搭建</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> NFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8集群Torque作业管理系统安装（一）</title>
      <link href="/2024/03/22/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/03/22/Centos8%E9%9B%86%E7%BE%A4Torque%E4%BD%9C%E4%B8%9A%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>主要还是工作原因，需要搭建高性能计算集群，因此这里用虚拟机搭一个小的集群，学习一下。</p><h1 id="NIS服务的搭建"><a href="#NIS服务的搭建" class="headerlink" title="NIS服务的搭建"></a>NIS服务的搭建</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>对于一个高性能计算集群，里面有很多台服务器，而且一般每台服务器都会有相同的用户，因此如果对每一台服务器都去设置相同的用户的用户名和密码，那将是一个非常繁杂的问题，特别是如果要进行增删改那就是巨大的任务量，因为每台服务器都要去增删改。那么，如果能够有一台服务器作为主节点来管理该集群中所有服务器的帐号密码，当其他的服务器有用户登录的需求时，可以到这台服务器上去查询请求相关的帐号密码等信息，如此这样一来，如果想要增删改，只需要到主节点服务器上面进行处理即可，便于管理。NIS（Network Information Services）就可以实现这样的功能。NIS早期为Sun Yellow Pages 简称YP 黄页的意思。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><h3 id="NIS-server-（服务端）"><a href="#NIS-server-（服务端）" class="headerlink" title="NIS server （服务端）"></a>NIS server （服务端）</h3><ul><li>NIS 服务端包括 master 和 slave服务端两种，slave的作用主要是做备份，master出现问题后，slave代替master工作，以此不让整个系统崩溃。</li></ul><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><ol><li>master先把帐号密码相关文件制作成数据库文件。</li><li>master告诉slave来更新或者slave主动来更新。</li><li>如果帐号密码，需要重新制作数据库文件并重新同步master和slave。</li></ol><h3 id="NIS-client（客户端）"><a href="#NIS-client（客户端）" class="headerlink" title="NIS client（客户端）"></a>NIS client（客户端）</h3><h4 id="工作流程-1"><a href="#工作流程-1" class="headerlink" title="工作流程"></a>工作流程</h4><ol><li>当用户登录 NIS 客户端时，会优先查询本机的账号和密码。</li><li>如果没有找到账号和密码，开始向整个 NIS 网域的主机广播查询。</li><li>每个 NIS 服务端（master&#x2F;slave）都可以进行相应，先响应者优先。</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>关机的时候先关客户端再关服务端，开机的时候先开服务端再开客户端。</p><h2 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h2><table><thead><tr><th align="center">主机名</th><th align="center">系统</th><th align="center">ip</th></tr></thead><tbody><tr><td align="center">master（服务端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.122</td></tr><tr><td align="center">node1（客户端）</td><td align="center">Centos8 stream</td><td align="center">172.16.34.123</td></tr></tbody></table><h2 id="服务端和客户端共同配置"><a href="#服务端和客户端共同配置" class="headerlink" title="服务端和客户端共同配置"></a>服务端和客户端共同配置</h2><ol><li>为了避免服务端和客户端无法通信，关闭防火墙和selinux<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">SELINUX=disabled</span><br></pre></td></tr></table></figure></li><li>修改hosts文件<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">172.16.34.122 master</span><br><span class="line">172.16.34.123 node1</span><br></pre></td></tr></table></figure></li></ol><h2 id="服务端的配置"><a href="#服务端的配置" class="headerlink" title="服务端的配置"></a>服务端的配置</h2><ol><li>安装服务端需要的软件：ypserv, yp-tools, rpcbind<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install ypserv yp-tools rpcbind</span><br></pre></td></tr></table></figure></li></ol><ul><li>ypserv：提供 NIS Server端的设定软件</li><li>yp-tools：提供 NIS 相关的查寻指令功能</li><li>rpcbind：提供RPC程序号码和通用地址互相转换</li></ul><ol start="2"><li>设置 NIS 域名<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nisdomainname archer # NIS 域名为 archer</span><br></pre></td></tr></table></figure></li><li>设置自动挂载 NIS 域名，设置相关权限<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.d/rc.local</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">/bin/nisdomainname archer</span><br><span class="line">chmod 777 /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure></li><li>设置172.16.34.0网段访问权限<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/ypserv.conf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">172.16.34.0: *: *:none</span><br></pre></td></tr></table></figure>相关功能<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 192.168.10.110:*:*:none #给予该IP访问权限</span><br><span class="line">- 192.168.10.110:*:*:deny #拒绝该IP访问权限</span><br><span class="line">-               :*:*:deny #拒绝所有网络的访问权限</span><br></pre></td></tr></table></figure></li><li>建立存放用户信息的数据库<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/lib64/yp/ypinit -m  #next host to add：需要ctrl+d</span><br></pre></td></tr></table></figure><img src="2.png"></li><li>创建测试用户<br><img src="1.png"></li><li>同步新用户信息到数据库，注意：每次有用户数据更新，都要执行<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /var/yp</span><br><span class="line">make</span><br></pre></td></tr></table></figure><img src="3.png"></li><li>重新启动服务，设置为开机自启动<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart ypserv.service yppasswdd.service rpcbind.service</span><br><span class="line">systemctl enable ypserv.service yppasswdd.service rpcbind.service </span><br></pre></td></tr></table></figure><img src="4.png"></li></ol><h2 id="客户端的配置"><a href="#客户端的配置" class="headerlink" title="客户端的配置"></a>客户端的配置</h2><ol><li>安装客户端需要的软件：ypbind, rpcbind, oddjob-mkhomedir<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install ypbind rpcbind oddjob-mkhomedir</span><br></pre></td></tr></table></figure></li></ol><ul><li>ypbind ：提供 NIS Client 端的设定软件</li><li>oddjob-mkhomedir：用来创建主目录</li></ul><ol start="2"><li><p>设置域名</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nisdomainname archer</span><br></pre></td></tr></table></figure></li><li><p>开启自动挂载 NIS 域名，并设置权限</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/rc.d/rc.local</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">/bin/nisdomainname archer</span><br><span class="line">chmod 777 /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure></li><li><p>指定 NIS 域和服务器 ip</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/yp.conf</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加</span></span><br><span class="line">domain archer server master</span><br></pre></td></tr></table></figure></li><li><p>重新启动服务，设置开机自启</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart ypbind.service rpcbind.service nis-domainname oddjobd.service</span><br><span class="line">systemctl enable --now ypbind.service rpcbind.service nis-domainname oddjobd.service</span><br></pre></td></tr></table></figure></li><li><p>查看用户是否加入 archer 域中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yptest</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]# yptest</span><br><span class="line">Test 1: domainname</span><br><span class="line">Configured domainname is &quot;archer&quot;</span><br><span class="line"></span><br><span class="line">Test 2: ypbind</span><br><span class="line">Use Protocol V1: Used NIS server: 172.16.34.122</span><br><span class="line">Use Protocol V2: Used NIS server: 172.16.34.122</span><br><span class="line">Use Protocol V3:</span><br><span class="line">ypbind_nconf:</span><br><span class="line">nc_netid: udp</span><br><span class="line">nc_semantics: 1</span><br><span class="line">nc_flag: 1</span><br><span class="line">nc_protofmly: &#x27;inet&#x27;</span><br><span class="line">nc_proto: &#x27;udp&#x27;</span><br><span class="line">nc_device: &#x27;-&#x27;</span><br><span class="line">nc_nlookups: 0</span><br><span class="line">ypbind_svcaddr: 172.16.34.122:805</span><br><span class="line">ypbind_servername: master</span><br><span class="line">ypbind_hi_vers: 2</span><br><span class="line">ypbind_lo_vers: 2</span><br><span class="line"></span><br><span class="line">Test 3: yp_match</span><br><span class="line">WARNING: No such key in map (Map passwd.byname, key nobody)</span><br><span class="line"></span><br><span class="line">Test 4: yp_first</span><br><span class="line">user1 user1:$6$IVDk9bvENpB.vNaU$Jg1oZ2W2j9sIysW6kVysZBz5I67u.SWvQBPrype32FiosWH5td0XIOcoSPGlPI2L./aTjQZ5e..grUSAe1piN1:1001:1002::/home/user1:/bin/bash</span><br><span class="line"></span><br><span class="line">Test 5: yp_next</span><br><span class="line">user2 user2:$6$Fztg7jJWLUMjmiIC$jsnlqAveJ8Vr22MRPfzjjVHY5LiNedgv1GiEHZoCEhwQ6iODCkDxLH8gV9.ChwWwk3teOnvRQHshlcqLouvOt1:1002:1003::/home/user2:/bin/bash</span><br><span class="line">user_test user_test:$6$N74q30Iqd8OgX7mX$JvhizpG0Hg3tdtc9bAnqx2JQpiv.DpywRiDSGM/csz5ICLMdGMeMVSYbp0l9ZhoUD10iwvg9wiq.unS/Nklue1:1000:1001::/home/user_test:/bin/bash</span><br><span class="line"></span><br><span class="line">Test 6: yp_master</span><br><span class="line">master</span><br><span class="line"></span><br><span class="line">Test 7: yp_order</span><br><span class="line">1711108162</span><br><span class="line"></span><br><span class="line">Test 8: yp_maplist</span><br><span class="line">netid.byname</span><br><span class="line">group.bygid</span><br><span class="line">group.byname</span><br><span class="line">passwd.byuid</span><br><span class="line">passwd.byname</span><br><span class="line">mail.aliases</span><br><span class="line">protocols.byname</span><br><span class="line">protocols.bynumber</span><br><span class="line">services.byservicename</span><br><span class="line">services.byname</span><br><span class="line">rpc.bynumber</span><br><span class="line">rpc.byname</span><br><span class="line">hosts.byaddr</span><br><span class="line">hosts.byname</span><br><span class="line">ypservers</span><br><span class="line"></span><br><span class="line">Test 9: yp_all</span><br><span class="line">user1 user1:$6$IVDk9bvENpB.vNaU$Jg1oZ2W2j9sIysW6kVysZBz5I67u.SWvQBPrype32FiosWH5td0XIOcoSPGlPI2L./aTjQZ5e..grUSAe1piN1:1001:1002::/home/user1:/bin/bash</span><br><span class="line">user2 user2:$6$Fztg7jJWLUMjmiIC$jsnlqAveJ8Vr22MRPfzjjVHY5LiNedgv1GiEHZoCEhwQ6iODCkDxLH8gV9.ChwWwk3teOnvRQHshlcqLouvOt1:1002:1003::/home/user2:/bin/bash</span><br><span class="line">user_test user_test:$6$N74q30Iqd8OgX7mX$JvhizpG0Hg3tdtc9bAnqx2JQpiv.DpywRiDSGM/csz5ICLMdGMeMVSYbp0l9ZhoUD10iwvg9wiq.unS/Nklue1:1000:1001::/home/user_test:/bin/bash</span><br><span class="line">1 tests failed</span><br></pre></td></tr></table></figure></li><li><p>配置用户身份验证</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">authselect select nis --force </span><br></pre></td></tr></table></figure><p><img src="5.png"></p></li><li><p>配置初次登陆自动创建家目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">authselect enable-feature with-mkhomedir</span><br></pre></td></tr></table></figure><p><img src="6.png"></p></li><li><p>登录测试</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - user2</span><br></pre></td></tr></table></figure><p><img src="7.png"></p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/qq_63986545/article/details/126101135" title="Centos8.5搭建NIS详细步骤">Centos8.5搭建NIS详细步骤</a></li><li><a href="https://www.cnblogs.com/wangmuchen/p/14671708.html" title="Centos8.3-NIS">Centos8.3-NIS</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> NIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2024/03/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/03/22/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><h2 id="GNU的简介"><a href="#GNU的简介" class="headerlink" title="GNU的简介"></a>GNU的简介</h2><p>GNU 于1983年由Richard Stallman（RMS）发起，意在为所有软件用户能够自由控制自己的计算而构建一款由大家共同努力开发而成的操作系统。RMS今天仍然是GNU的首席搞事者。<br>GNU的基本目标和一贯目标是提供一个和Unix兼容的100% 自由软件的操作系统。不是95%、也不是99.5%、而是100%自由。这个系统的名字叫GNU，是GNU’s Not Unix的首字母递归缩写—这是对Unix的技术思想致敬的一种方法，同时表达GNU有所不同。从技术上说，GNU很像Unix。但是它不同于Unix，GNU给予其用户自由。<br>以后工作会经常用到 Linux 系统，在这里记录一下常用的命令，持续更新。</p><h2 id="GNU-Linux的简介"><a href="#GNU-Linux的简介" class="headerlink" title="GNU&#x2F;Linux的简介"></a>GNU&#x2F;Linux的简介</h2><p>GNU&#x2F;Linux 是一种计算机操作系统：一系列能让您与计算机进行交互操作并运行其它程序的程序。<br>操作系统由多种基础程序构成。它们使计算机可以与用户进行交流并接受指令，读取数据或将其写入硬盘、磁带或打印机，控制内存的使用，以及运行其它软件。操作系统最重要的组成部分是内核。在 GNU&#x2F;Linux 系统中，Linux 就是内核组件。而该系统的其余部分主要是由 GNU 工程编写和提供的程序组成。因为单独的 Linux 内核并不能成为一个可以正常工作的操作系统，所以我们更倾向使用 “GNU&#x2F;Linux” 一词来表达人们通常所说的 “Linux”。</p><p>GNU&#x2F;Linux 是以 Unix 操作系统为原型创造的。自从诞生之日起，它就被设计成一种多任务、多用户的系统。这些特点使 GNU&#x2F;Linux 完全不同于其它著名的操作系统。事实上，GNU&#x2F;Linux 比您所能想象到更加特别。与其它操作系统绝然相反的是，没人真正拥有 GNU&#x2F;Linux，其大部分开发工作都是由无偿的志愿者完成的。<br>后来演变为 GNU&#x2F;Linux 系统的开发工作开始于 1984 年。当时，自由软件基金会 开始研发被称为 GNU 的自由的类 Unix 操作系统。<br>GNU 工程 开发了大量用于 Unix 的自由软件工具和类 Unix 操作系统，例如 GNU&#x2F;Linux。这些工具使用户能执行从日常俗事(例如在系统中复制和删除文件)到神秘操作(例如书写和编译程序或对多种文档格式进行熟练的编辑工作)的各种任务。<br>虽然有许多组织和个人都对 GNU&#x2F;Linux 的发展作出了帮助，但是自由软件基金会依然是最大的单个贡献者。他不仅仅创造了绝大部分在 GNU&#x2F;Linux 中使用的工具，还为 GNU&#x2F;Linux 的存在提供了理论和社会基础。</p><p>Linux 内核 的首次面世是在 1991 年。当时，名为 Linus Torvalds 的芬兰计算机科学系学生在 Usenet 新闻组 comp.os.minix 上发布了一种 Minix 替代内核的早期版本。请看 Linux International 的 Linux 历史。<br>在一些子系统维护人员的帮助下，Linus Torvalds 一直协调着数百位开发人员的工作。Linux 内核有一个官方网站。<br>GNU&#x2F;Linux 用户在挑选软件方面有着极大的自由。例如，他们可以选择几十种不同的命令行外壳和多种图形桌面。这通常让其它操作系统的用户手足无措，他们甚至从来没想过命令行和桌面其实是可以更换的。<br>GNU&#x2F;Linux 很少会崩溃、适合在同一时间运行多个程序，而且比大多数操作系统更为安全。有了这些优势，Linux 成为在服务器市场上增长最快的操作系统。近来，它还开始在家庭和商业用户中变得越来越流行。</p><h2 id="服务器类型"><a href="#服务器类型" class="headerlink" title="服务器类型"></a>服务器类型</h2><ul><li>塔式服务器<br><img src="1.jpg"></li><li>机架式服务器<br><img src="2.jpg"></li><li>刀片式服务器<br><img src="3.png"></li></ul><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>命令语法：命令  选项  参数</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">命令 <span class="comment">#选项 #参数</span></span></span><br><span class="line"> ls    -l    /</span><br></pre></td></tr></table></figure><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a  #查看ip</span><br><span class="line">nmcli connection down enp0s3 &amp;&amp; nmcli connection up enp0s3 ——重启网卡enp0s3</span><br><span class="line">ping www.baidu.com  #向某个网址发送请求，检查网络是否通畅</span><br></pre></td></tr></table></figure><h2 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname 主机名 #设置主机名</span><br></pre></td></tr></table></figure><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf -y install 软件名  #下载软件</span><br><span class="line">yum -y install 软件名  #下载软件</span><br></pre></td></tr></table></figure><h2 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su - 用户名 #root用户登陆其他账号</span><br></pre></td></tr></table></figure><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -e | grep 进程名字 #查看进程</span><br></pre></td></tr></table></figure><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令名 --help #获取帮助信息</span><br><span class="line">watch -n2 &#x27;ls /root&#x27; #每过2秒去执行引号里面的内容</span><br></pre></td></tr></table></figure><h2 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">which 命令名 #查找命令的路径</span><br></pre></td></tr></table></figure><h2 id="查看终端"><a href="#查看终端" class="headerlink" title="查看终端"></a>查看终端</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tty</span><br></pre></td></tr></table></figure><h2 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">free -m #以兆为单位</span><br><span class="line">free -k #以kB为单位</span><br><span class="line">free -g #以G为单位</span><br></pre></td></tr></table></figure><h2 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a>倒计时</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sleep n #n秒倒计时</span><br><span class="line">sleep n &amp; #n秒倒计时，后台运行</span><br></pre></td></tr></table></figure><h2 id="文件和用户管理"><a href="#文件和用户管理" class="headerlink" title="文件和用户管理"></a>文件和用户管理</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>Linux一切皆是文件。Linux 的一切资源都放在 &#x2F; 根目录下。<br><img src="4.png"></p><ul><li>&#x2F;bin：Binary的缩写。存放系统命令，普通用户和 root 都可以执行。</li><li>&#x2F;boot： 启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</li><li>&#x2F;dev： Device的缩写。存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</li><li>&#x2F;etc： Etcetera的缩写。存放所有的系统管理所需要的配置文件和子目录。</li><li>&#x2F;home： 用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</li><li>&#x2F;root： 该目录为系统管理员，也称作超级权限者的用户主目录。</li><li>&#x2F;run： 运行目录。是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。</li><li>&#x2F;sbin： s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</li><li>&#x2F;lib： Library的缩写。这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</li><li>&#x2F;lib64： 64位相关的库会放在这。</li><li>&#x2F;media： linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</li><li>&#x2F;mnt： 系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。</li><li>&#x2F;opt： optional的缩写。这是给主机额外安装软件所摆放的目录。</li><li>&#x2F;proc： Processes的缩写。&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里。</li><li>&#x2F;srv： 该目录存放一些服务启动之后需要提取的数据。</li><li>&#x2F;sys： 虚拟文件系统。和 &#x2F;proc&#x2F; 目录相似，该目录中的数据都保存在内存中，主要保存与内核相关的信息。</li><li>&#x2F;tmp： temporary的缩写这个目录是用来存放一些临时文件的。</li><li>&#x2F;usr： unix system resources缩写。用于存储系统软件资源。</li><li>&#x2F;var： 用于存储动态数据，例如缓存、日志文件、软件运行过程中产生的文件等。这些日志就被记录到这个目录下，具体在 &#x2F;var&#x2F;log 目录下，另外 mail 的预设放置也是在这里。</li><li>&#x2F;lost+found： 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</li><li>&#x2F;selinux：这个目录是 Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</li><li>&#x2F;usr&#x2F;bin：系统用户使用的应用程序。</li><li>&#x2F;usr&#x2F;sbin：超级用户使用的比较高级的管理程序和系统守护程序。</li><li>&#x2F;usr&#x2F;src：内核源代码默认的放置目录。</li></ul><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><ul><li>普通文件： - 表示</li><li>文件夹：d 表示<br><img src="5.png"></li><li>设备文件（块设备）存储设备硬盘，U盘&#x2F;dev&#x2F;sda，&#x2F;dev&#x2F;sda1等：b 表示</li><li>设备文件（字符文件）打印机，终端&#x2F;dev&#x2F;tty1等：c表示</li><li>链接文件（淡蓝色）：l 表示</li><li>套接字文件：s 表示</li><li>管道文件：p 表示</li></ul><h3 id="与文件相关的命令"><a href="#与文件相关的命令" class="headerlink" title="与文件相关的命令"></a>与文件相关的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls #列出目录下的文件</span><br><span class="line">ls -l #列出详细信息</span><br><span class="line">ls -a #列出所有文件，隐藏文件</span><br><span class="line">ls -d #查看文件夹的信息</span><br><span class="line">cd 目录 #切换目录</span><br><span class="line">pwd #打印当前路径</span><br><span class="line">touch 文件路径 #用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件</span><br><span class="line">touch /home/&#123;a,b&#125;.txt ##在home下创建a.txt和b.txt</span><br><span class="line">mkdir 文件夹路径 #创建文件夹</span><br><span class="line">mkdir -p 文件夹路径 #确保目录名称存在，不存在的就建一个。</span><br><span class="line">mkdir /home/&#123;dir1,dir2&#125; #在home下创建dir1和dir2</span><br><span class="line">mkdir -v 文件夹路径 #显示创建的过程</span><br><span class="line">cp 源文件 目标文件夹或者目标文件 # 复制源文件到目标文件夹或者目标文件</span><br><span class="line">cp -r 源文件夹 目标文件夹 # 递归复制源文件夹到目标文件夹</span><br><span class="line">mv 源文件路径 目标文件路径 #把源文件移动到目标路径，当源和目标的路径一致时，其效果就是改变文件名字</span><br><span class="line">rm -rf 文件或目录的路径 #强制删除文件或者文件夹</span><br><span class="line">cat 文件路径 #查看文件内容</span><br><span class="line">cat -n 文件路径 #带编号查看文件内容</span><br><span class="line">more 文件路径 #查看文件内容，带翻页</span><br><span class="line">head -n 文件路径 #查看文件前n行</span><br><span class="line">tail -n 文件路径 #查看文件后n行</span><br><span class="line">grep 内容 文件路径 #过滤文件内容</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="comment">#重定向，覆盖</span></span></span><br><span class="line">ls -l &gt; a.txt</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; <span class="comment">#追加</span></span></span><br><span class="line">ls -l &gt;&gt; a.txt</span><br><span class="line">gedit 文件名 #linux的文本编辑器</span><br><span class="line">vi/vim 文件路径  #vim是vi的升级版</span><br><span class="line">i #进入输入模式</span><br><span class="line">a #进入输入模式，光标移动一个字符</span><br><span class="line">o #进入输入模式。光标换行</span><br><span class="line">esc #进入命令行模式</span><br><span class="line">: #命令行模式下进入末尾模式</span><br><span class="line">:wq #保存文件退出</span><br><span class="line">:q! #强制退出不保存</span><br><span class="line">:set nu #显示行号</span><br><span class="line">:set list #显示控制字符</span><br><span class="line">:set nonu #取消设置行号</span><br><span class="line">:w #保存</span><br><span class="line">:q #退出</span><br><span class="line">:n,m s/原内容/新内容/g #把第n到m行的所有的原内容替换成新内容，g是全局</span><br><span class="line">:w/tep/a.txt #另存为/tem/a.txt</span><br><span class="line">v #命令行模式下进入可视模式 ，可对字符进行选择，类似于鼠标选东西</span><br><span class="line">yy # 复制一行</span><br><span class="line">p  # 粘贴一行</span><br><span class="line">dd #删除一行</span><br><span class="line">nyy #复制n行</span><br><span class="line">ndd #删除n行</span><br><span class="line">u #撤销操作</span><br><span class="line">x #删除某个字符</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##光标定位</span></span></span><br><span class="line">hjkl #上下左右</span><br><span class="line">0 #进入行首</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="comment">#进入行尾</span></span></span><br><span class="line">gg #进入页首</span><br><span class="line">G #进入页尾</span><br><span class="line">nG或者ngg #进入第n行</span><br><span class="line">/string #末行模式下查找string，用n进行选择下一个，用N往上翻</span><br><span class="line">vim未正常关闭所产生的临时文件.swap文件，删除.swap文件就可以</span><br><span class="line">. #当前目录</span><br><span class="line">.. #上一级目录</span><br></pre></td></tr></table></figure><h3 id="与用户和组相关的基本知识"><a href="#与用户和组相关的基本知识" class="headerlink" title="与用户和组相关的基本知识"></a>与用户和组相关的基本知识</h3><p>所有的进程和文件都是属于用户的</p><ul><li>用户基本信息文件 &#x2F;etc&#x2F;passwd<br>7列的信息用冒号隔开<table><thead><tr><th align="center">用户名</th><th align="center">密码占位符</th><th align="center">uid</th><th align="center">gid</th><th align="center">描述</th><th align="center">HOME</th><th align="center">shell</th></tr></thead><tbody><tr><td align="center">root</td><td align="center">x</td><td align="center">0</td><td align="center">0</td><td align="center">root</td><td align="center">&#x2F;root</td><td align="center">&#x2F;bin&#x2F;bash</td></tr></tbody></table></li></ul><p><img src="6.png"><br>第一列：用户名<br>第二列：密码占位符，通常是x，具体内容不在这里<br>第三列：uid（用户的身份证号），特权用户uid：0。系统用户uid：1~499。普通用户uid：1000+<br>第四列：gid（组的id号）<br>第五列：描述，账号的补充信息，餐厅经理啥的，一般为用户名。<br>第六列：家目录，登录系统时，所在目录。<br>第七列：登录shell，命令解释器。版本很多，比如ashell，bshell，cshell，bash。&#x2F;bin&#x2F;bash就是执行bash，但是有些用户不能登录，比如&#x2F;sbin&#x2F;nologin。</p><ul><li>用户密码文件 &#x2F;etc&#x2F;shadow<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Huang:$6$iNeHX:19818:0:99999:7:::</span><br></pre></td></tr></table></figure>第一列：用户名 Huang<br>第二列：加密后的密码，$6$iNeHX，$6$表示用SHA-512算法加密。*表示密码被锁定，!!表示密码过期。<br>第三列：最后一次修改时间，比如1970年1月1日到2024年4月5日，过了多少天。<br>第四列：最小间隔 0，两次密码修改之间，需要间隔的天数。0表示当天可以修改密码，如果为5那么必须过了5天才能改密码。<br>第五列：最大时间间隔 99999，密码的有效期，每隔多长时间要改密码，99999基本表示永久。<br>第六列：警告时间（7），离密码到期还有7天的时候，提醒你改不改密码，改不改看你自己。<br>第七列： 不活动时间，一般没写，假如是28，用户不登录系统28天内没事，过了28天就是禁用冻结你。<br>第八列：失效时间，一般没写，假如为30，到了30天，你的账号就不能用了。<br>第九列： 保留<br>基本上只有前两列有用。<br><img src="7.png"></li><li>组信息文件 &#x2F;etc&#x2F;group<br>会创造一个和用户同名的组，该用户属于这个组<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root:x:0:</span><br></pre></td></tr></table></figure>第一列：组名，root<br>第二列：组密码，用x表示，一般不设密码<br>第三列：组ID，0<br>第四列：组成员<br><img src="8.png"></li></ul><h3 id="与用户相关的命令"><a href="#与用户相关的命令" class="headerlink" title="与用户相关的命令"></a>与用户相关的命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd user01 #创建用户user01</span><br><span class="line">useradd user02 -u 1506 #创建用户并指定uid</span><br><span class="line">useradd user02 -d 目录 #创建用户并指定家目录</span><br><span class="line">id user01 #查看user01</span><br><span class="line">passwd user01 #为user01添加或修改密码</span><br><span class="line">userdel -r user02 #删除user02并删除家目录</span><br><span class="line">usermod #修改用户的模式</span><br><span class="line">usermod -s /sbin/nologin user01 #修改登录shell，user01无法登录</span><br><span class="line">whoami #查看当前用户是谁</span><br></pre></td></tr></table></figure><h3 id="与组相关的命令"><a href="#与组相关的命令" class="headerlink" title="与组相关的命令"></a>与组相关的命令</h3><p>一个用户可以在多个组中，一个组可以拥有多个用户</p><h4 id="组的类型"><a href="#组的类型" class="headerlink" title="组的类型"></a>组的类型</h4><p>相对于用户zhangsan来说，他加入了zhangsan组，lisi组和wangwu组</p><ul><li>基本组：随用户而创建，组名同用户，只能有一个，zhangsan组，可以在&#x2F;etc&#x2F;passwd中看到。</li><li>附加组：用户加入的其他组，lisi组和wangwu组。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd group01 #创建组group01</span><br><span class="line">groupadd group02 -g 2000 #创建组group02，并且组id为2000</span><br><span class="line">groupdel group02 #删除组group02</span><br><span class="line">-u 制定用户的uid</span><br><span class="line">-g 制定用户的基本组</span><br><span class="line">-G 制定用户的附加组</span><br><span class="line">/etc/passwd 可以看用户的基本组</span><br><span class="line">/etc/group 可以查看用户的附加组。id命令也可以看</span><br><span class="line">usermod AAA -g CCC #修改用户AAA的基本组为CCC</span><br><span class="line">usermod BBB -G CCC #修改用户BBB的附加组为CCC</span><br><span class="line">gpasswd -d BBB CCC #将用户BBB从组CCC中删除</span><br></pre></td></tr></table></figure></li></ul><h4 id="用户的提权"><a href="#用户的提权" class="headerlink" title="用户的提权"></a>用户的提权</h4><p>当普通用户需要更多的权利去执行某些任务时，需要提权。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su #普通用户使用su切换到root身份</span><br><span class="line">su - root #切换到root用户</span><br><span class="line">su - 用户名 #切换到某个用户</span><br><span class="line">exit #退出</span><br><span class="line">sudo #使用普通用户时，使用sudo完成部分特权指令</span><br><span class="line">用户名 主机名=命令 #给用户赋予特定的命令，可以在vim /etc/sudoers进行编辑</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#例如</span></span></span><br><span class="line">AAA localhost=/usr/sbin/useradd, /usr/sbin/userdel #赋予普通用户使用useradd和userdel命令</span><br><span class="line">sudo useradd u1 #普通用户使用sudo创建用户</span><br></pre></td></tr></table></figure><h3 id="用户的权限"><a href="#用户的权限" class="headerlink" title="用户的权限"></a>用户的权限</h3><h4 id="基本权限UGO"><a href="#基本权限UGO" class="headerlink" title="基本权限UGO"></a>基本权限UGO</h4><ul><li>属主：u</li><li>属主：g</li><li>其他人：o</li><li>特殊对象：所有人：a(u+g+o)</li></ul><h4 id="权限的种类"><a href="#权限的种类" class="headerlink" title="权限的种类"></a>权限的种类</h4><ul><li>读：r&#x3D;4</li><li>写：w&#x3D;2</li><li>执行：x&#x3D;1<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-rw-r--r--. 1 root root 0 Apr  6 16:34 1.txt</span><br><span class="line">第1个：-表示为文件</span><br><span class="line">第2-4：rw-为属主权限为可读可写</span><br><span class="line">第5-7：r--为属组权限为可读</span><br><span class="line">第8-10：r--为其他人的权限为可读</span><br><span class="line">第11列：.开启了SELinux功能的Linux系统才会有这个点。那个点表示文件带有“SELinux的安全上下文”。CentOS7默认是开启SELinux的，所以会有这个点，如果关闭SELinux，然后再创建文件，新创建的文件就不会再有这个点了，但是以前创建的文件本来有这个点的还会显示这个点（虽然SELinux不起作用了），如果为+号，表明该文件设置了acl权限。</span><br><span class="line">第12:1 表示链接数</span><br><span class="line">第13：root 属主</span><br><span class="line">第14：root 属组</span><br><span class="line">第15: 0 文件大小，Byte（字节）为单位</span><br><span class="line">第16：Apr  6 16:34 创建时间</span><br><span class="line">第17：1.txt 文件名</span><br><span class="line">语法：chmod 对象(u/g/o/a)赋值符(+/-/=)权限(r/w/x) 文件/目录</span><br><span class="line">chmod u+r 1.txt #为文件1.txt的属主添加读权限</span><br><span class="line">chmod u-r 1.txt #为文件1.txt的属主取消读权限</span><br><span class="line">chmod u+wx 1.txt #为文件1.txt的属主添加读写权限</span><br><span class="line">chmod u=rwx 1.txt #为文件1.txt的属主设置读写执行权限</span><br><span class="line">chmod u=rw 1.txt #为文件1.txt的属主设置读写权限</span><br><span class="line">chmod u= 1.txt #取消文件1.txt的属主的所有权限权限</span><br><span class="line">chmod u=--- 1.txt #取消文件1.txt的属主的所有权限权限</span><br><span class="line">chmod ug=rw, o=r 1.txt #为1.txt的属主设置读写权限，其他读权限</span><br><span class="line">chmod -R u+r dir1 #为文件夹dir1及其里面文件的属主添加读权限</span><br><span class="line">chmod 671 1.txt# 为1.txt的属主设置读写权限，属组设置读写执行权限，其他人是执行权限</span><br><span class="line">注意：问件夹一定要有可执行的权利，因为进入文件夹是执行。</span><br></pre></td></tr></table></figure></li></ul><h4 id="文件的归属"><a href="#文件的归属" class="headerlink" title="文件的归属"></a>文件的归属</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown alice.hr file1 #改file1的属主为alice改组为hr组</span><br><span class="line">chown alice file1 #改file1的属主为alice</span><br><span class="line">chown .hr file1 #改file1的组为hr组</span><br><span class="line">chown alice.hr dir1 #改文件夹dir1的属主为alice改组为hr组</span><br><span class="line">chown -R alice.hr dir1 #改文件夹dir1的属主为alice改组为hr组，把文件夹里面的内容都改为属主为alice改组为hr组</span><br><span class="line">.号可以换成:</span><br><span class="line">chown alice:hr file1 #改file1的属主为alice改组为hr组</span><br><span class="line">chgrp root file1 #改file1的组为root</span><br></pre></td></tr></table></figure><h4 id="ACL-access-control-list-访问控制列表"><a href="#ACL-access-control-list-访问控制列表" class="headerlink" title="ACL(access control list) 访问控制列表"></a>ACL(access control list) 访问控制列表</h4><p>核心就是：谁干什么，谁不能干什么，设置不同用户，不同的基本权限（r,w,x）。对象数量不同。是UGO的补充。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">语法</span></span><br><span class="line">setfacl -设置 对象:对象名:权限</span><br><span class="line">getfacl 文件或文件夹 #查看文件或者文件夹的acl权限</span><br><span class="line">setfacl -m u:Huang:rw 1.txt#设置用户Huang对1.txt有读写权限 -m是设置</span><br><span class="line">setfacl -m u:Huang:- 1.txt#设置用户Huang对1.txt没有任何权限 -m是设置</span><br><span class="line">setfacl -m o::w 1.txt#设置其他用户对1.txt有写的权限 -m是设置</span><br><span class="line">看到</span><br><span class="line">setfacl -x u:Huang 1.txt#取消用户Huang的acl权限 -x是删除</span><br><span class="line">setfacl -b 1.txt#取消1.txt的所有acl权限 -b是删除所有</span><br></pre></td></tr></table></figure><h4 id="特殊权限"><a href="#特殊权限" class="headerlink" title="特殊权限"></a>特殊权限</h4><ol><li>如果一个文件很重要，那么他万一被root删除了怎么办。就要靠特殊的i权限。</li><li>有一个权限为rwsrwxrwx，有一个s权限</li><li>为什么系统创建文件是默认权限是644，创建文件夹时权限为755。这是系统为了好管理进行这样设计的，进入文件夹需要x的执行权限。</li></ol><ul><li>suid(sgid)针对文件&#x2F;程序时，具备临时提升权限的能力，使得调用文件的用户，临时具备属主的能力，谁访问，就当这个用户是属主。<br>suid(在属主的执行位)，sgid(在属组的执行位)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod u+s /bin/cat</span><br><span class="line">-rwsr-xr-x. 1 root root 54080 Aug 20  2019 /bin/cat</span><br><span class="line">属主的执行位变成了s，我们就具有使用cat命令的属主能力了</span><br><span class="line">chmod u+s 1.txt</span><br><span class="line">-rwSrwx--x. 1 root root 12 Apr  7 11:33 1.txt</span><br><span class="line">变成了S，其主要原因是该文件最开始没有x权限，因此会变成S，添加了x群贤后，就会变成s了。</span><br><span class="line">chmod 4777 1.txt #将会使得使得调用文件的用户，临时具备属主的能力，数字4与suid相同</span><br><span class="line">chmod 2777 1.txt #将会使得使得调用文件的用户，临时具备属组的能力，数字2与guid相同</span><br><span class="line">chmod 1777 1.txt #将会使得使得调用文件的用户，临时具备其他用户的能力，数字1就是改变其他用户的特权。</span><br></pre></td></tr></table></figure></li><li>文件属性chattr</li></ul><ol><li>用途：通常用于锁定某个文件，拒绝修改</li><li>分类有a，A，c，d，D，i等，常用的就在i，i用于锁定文件拒绝修改<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsattr 1.txt #查看文件属性</span><br><span class="line">[root@master tmp]# lsattr 1.txt</span><br><span class="line">---------------- 1.txt</span><br><span class="line">chattr +i 1.txt #添加i属性</span><br><span class="line">[root@master tmp]# lsattr 1.txt</span><br><span class="line">----i----------- 1.txt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">无法修改1.txt</span></span><br><span class="line">chattr -i 1.txt #去掉i属性</span><br><span class="line">chattr +a 1.txt #添加a属性，文件只能追加</span><br></pre></td></tr></table></figure></li></ol><ul><li>进程掩码umask</li></ul><ol><li>概念：新建文件，目录的默认权限会受到umask的影响，umask表示要减掉的权限。</li><li>观察系统的掩码<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">umask #查看系统的掩码</span><br><span class="line">[root@master tmp]# umask</span><br><span class="line">0022 #有四位，第一位就是那么特殊位</span><br><span class="line">0777 - 0022 # 系统创建目录和文件夹时，权限就是0755</span><br><span class="line">0755 - 0111 #系统为了保护自己，所以在创建的文件上，去掉了所有的执行。</span><br><span class="line">-rw-r--r--. 1 root root  0 Apr  7 14:14 2.txt</span><br><span class="line">drwxr-xr-x. 2 root root  6 Apr  7 14:13 dir1</span><br><span class="line">创建的文件夹权限为：755</span><br><span class="line">创建的文件权限为：644</span><br><span class="line">umask 0000 #设置umask为0000</span><br><span class="line">-rw-rw-rw-. 1 root root  0 Apr  7 14:15 3.txt</span><br><span class="line">drwxrwxrwx. 2 root root  6 Apr  7 14:15 dir2</span><br><span class="line">创建的文件夹权限为：777</span><br><span class="line">创建的文件权限为：666</span><br></pre></td></tr></table></figure></li></ol><h3 id="进程管理PS-process-status"><a href="#进程管理PS-process-status" class="headerlink" title="进程管理PS(process status)"></a>进程管理PS(process status)</h3><h4 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程"></a>什么是进程</h4><ul><li>进程是已启动的可执行程序的运行实例</li><li>其组成部分：</li></ul><ol><li>一个文件 &#x2F;bin&#x2F;passwd</li><li>被分配内存的地址空间</li><li>获取CPU时间</li><li>每个进程都有唯一的进程号PID(process ID)</li><li>有权限限制</li><li>程序代码的一个或多个副本（也叫执行线程）</li><li>拥有状态</li><li>任何进程都可以创建子进程</li><li>所有进程都是第一个系统进程的后代</li><li>父进程复制自己的地址空间（fork）创建新的子进程</li></ol><h4 id="静态查看进程ps"><a href="#静态查看进程ps" class="headerlink" title="静态查看进程ps"></a>静态查看进程ps</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux #查看进程</span><br><span class="line">ps aux | head -3</span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root         1  0.0  0.3 128008  6696 ?        Ss   14:30   0:00 /usr/lib/systemd/systemd --switched-root --system --deserialize 22</span><br><span class="line">root         2  0.0  0.0      0     0 ?        S    14:30   0:00 [kthreadd]</span><br><span class="line">ps a #all显示现行终端机下的所有程序，包括其他用户的程序。</span><br><span class="line">ps u #user以用户为主的格式来显示程序状况。</span><br><span class="line">ps x #显示所有程序，不以终端机来区分。</span><br><span class="line">ps aux --sort %cpu #以CPU占用率升序排列，常用的就是CPU，MEM和PID进行排序</span><br><span class="line">ps aux --sort -%cpu #以CPU占用率降序排列，-号表示降序</span><br><span class="line">ps aux --sort %mem #以MEM占用率升序排列，常用的就是CPU，MEM和PID进行排序</span><br><span class="line">ps aux --sort -%mem #以MEM占用率降序排列，-号表示降序</span><br><span class="line">ps -ef #可以查看PPID(父进程)，如果子进程杀不死，可以杀他的父进程，也可以杀死子进程</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 14:30 ?        00:00:00 /usr/lib/systemd/systemd --switched-root --system --deserialize 22</span><br><span class="line">root         2     0  0 14:30 ?        00:00:00 [kthreadd]</span><br><span class="line">ps axo user,pid,ppid,%mem,command #指定想要输出的东西，o表示operation，操作</span><br></pre></td></tr></table></figure><ul><li>第一列USER：运行进程的用户</li><li>第二列PID：进程的唯一进程号</li><li>第三列%CPU：CPU的占用率，百分比</li><li>第四列%MEM：内存的占用率，百分比</li><li>第五列VSZ：Virtual Memory Size。占用虚拟内存大小</li><li>第六列RSS：Resident Set Size。常驻内存集合大小，表示该进程分配的内存大小，占用实际内存大小</li><li>第七列TTY：终端的次要装置号（minor device number of tty），进程运行的终端，本机运行一般是？号，远程登录的话一般是pts&#x2F;n</li><li>第八列STAT：进程状态</li><li>第九列START：进程启动时间</li><li>第十列TIME：进程占用CPU的时间</li><li>第十一列COMMAND：命令&#x2F;程序名称，命令的路径</li></ul><h4 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h4><ul><li>S(Sleep)睡眠中，可中断</li><li>R(Run)正在执行中</li><li>T(Stop)暂停执行</li><li>Z(Zoombie)已退出，成为僵尸进程</li><li>D 无法中断的休眠状态 (通常 IO 的进程)</li><li>W 没有足够的记忆体分页可分配</li><li>&lt; 高优先序的行程</li><li>N 低优先序的行程</li><li>L 有记忆体分页分配并锁在记忆体内 (实时系统或捱A I&#x2F;O)</li></ul><h4 id="动态查看进程top"><a href="#动态查看进程top" class="headerlink" title="动态查看进程top"></a>动态查看进程top</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top #动态查看进程状态，可以用q退出</span><br><span class="line">上半部分：为系统的性能部分</span><br><span class="line">top - 20:31:34 up  6:00,  1 user,  load average: 0.00, 0.01, 0.05</span><br><span class="line">Tasks: 123 total,   1 running, 122 sleeping,   0 stopped,   0 zombie</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">Cpu(s):  0.0 us,  0.1 sy,  0.0 ni, 99.8 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.2 si,  0.0 st</span></span><br><span class="line">KiB Mem :  1881624 total,  1562348 free,   195620 used,   123656 buff/cache</span><br><span class="line">KiB Swap:  2097148 total,  2097148 free,        0 used.  1544956 avail Mem</span><br></pre></td></tr></table></figure><ul><li>第一行：top - 20:31:34 up  6:00,  1 user,  load average: 0.00, 0.01, 0.05</li><li>第一行：程序名-系统时间  运行时间  登录用户数   CPU平均负载：5分钟占用0.0 10分钟占用0.01 15分钟占用0.05</li><li>第二行：Tasks: 123 total,   1 running, 122 sleeping,   0 stopped,   0 zombie</li><li>第二行：总进程数             运行数1     睡眠数175       停止数0       僵尸进程0</li><li>第三行：%Cpu(s):  0.0 us,     0.1 sy,      0.0 ni,         99.8 id,     0.0 wa,      0.0 hi,   0.2 si,   0.0 st</li><li>第三行：CPU占用率  us用户程序   sy系统程序   ni优先级高的占用  id空闲的CPU  wa等待CPU等待 hi硬件占用 si软件占用 st虚拟机占用</li><li>第四行：KiB Mem :   1881624 total,  1562348 free,   195620 used,   123656 buff&#x2F;cache</li><li>第四行：物理内存(字节) 总共约1.9G    空闲内存约1.6G    使用内存约195M  cache缓存硬盘内容124M</li><li>第五行：KiB Swap:                          2097148 total,  2097148 free,  0 used. 1544956 avail Mem</li><li>第五行：交换内存，硬盘的一部分，虚拟内存(字节) 总共约2.1G       空闲内存约2.1G  未使用 创建新进程时，在不使用swap分区的情况下，能够分配的内存大小。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">下半部分：进程状态</span><br><span class="line"> PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                </span><br><span class="line">    1 root      20   0  128008   6700   4148 S   0.0  0.4   0:00.80 systemd                                                </span><br><span class="line">    2 root      20   0       0      0      0 S   0.0  0.0   0:00.00 kthreadd                                               </span><br><span class="line">    4 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H                                           </span><br><span class="line">    5 root      20   0       0      0      0 S   0.0  0.0   0:00.00 kworker/u8:0                                           </span><br><span class="line">    6 root      20   0       0      0      0 S   0.0  0.0   0:00.02 ksoftirqd/0                                            </span><br><span class="line">    7 root      rt   0       0      0      0 S   0.0  0.0   0:00.01 migration/0                                            </span><br><span class="line">    8 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcu_bh                                                 </span><br><span class="line">    9 root      20   0       0      0      0 S   0.0  0.0   0:02.35 rcu_sched                                              </span><br><span class="line">   10 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 lru-add-drain                                          </span><br><span class="line">   11 root      rt   0       0      0      0 S   0.0  0.0   0:00.14 watchdog/0                                             </span><br><span class="line">   12 root      rt   0       0      0      0 S   0.0  0.0   0:00.10 watchdog/1</span><br></pre></td></tr></table></figure></li><li>第一列PID：进程的唯一进程号</li><li>第二列USER：运行进程的用户</li><li>第三列PR：priority，表示内核在调度该进程的优先级</li><li>第四列NI：nice 会影响PR</li><li>第五列VIRT：VIRT表示进程使用的所有内存大小，包括虚拟使用的swap内存和物理内存，申请的内存，但并没占满</li><li>第六列RES：是使用的物理内存大小，占用实际内存大小</li><li>第七列SHR：当前进程同其它进程共享内存的大小</li><li>第八列S：进程状态</li><li>第九列%CPU：CPU的占用率，百分比</li><li>第十列%MEM：内存的占用率，百分比</li><li>第十一列TIME：进程占用CPU的时间</li><li>第十二列COMMAND：命令&#x2F;程序名称，命令的路径</li></ul><h4 id="top内部的常用命令"><a href="#top内部的常用命令" class="headerlink" title="top内部的常用命令"></a>top内部的常用命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">h #帮助</span><br><span class="line">M #按内存的使用排序</span><br><span class="line">P #按CPU的使用排序</span><br><span class="line">N #以PID的大小排序</span><br><span class="line">&lt; #向前</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="comment">#向后</span></span></span><br><span class="line">z #彩色</span><br><span class="line">Z #设置彩色，用数字调整</span><br></pre></td></tr></table></figure><h4 id="top的使用技巧"><a href="#top的使用技巧" class="headerlink" title="top的使用技巧"></a>top的使用技巧</h4><ul><li>能用ps就不用top，top消耗资源</li><li>top -d n # 每过n秒刷新一次</li><li>top -p 进程号1,进程号2 #只显示对应的进程号的信息</li></ul><h4 id="使用信号控制进程"><a href="#使用信号控制进程" class="headerlink" title="使用信号控制进程"></a>使用信号控制进程</h4><ul><li>给进程发送信号</li><li>kill -l #列出所有支持的信号</li><li>kill -编号 PID #给进程发送信号</li><li>kill PID #默认是15号<br>编号 型号名</li></ul><ol><li>SIGHUP 重新加载配置文件</li><li>SIGINT 键盘中断Ctrl+C</li><li>SIGQUIT 键盘退出Ctrl+\ ，类似SIGINT</li><li>SIGKILL 强制终止，无条件</li><li>SIGTERM 终止（正常结束），缺省信号</li><li>SIGCONT 继续</li><li>SIGSTOP 暂停</li><li>SIGTSTP 键盘暂停 Ctrl+Z</li></ol><h4 id="进程优先级nice"><a href="#进程优先级nice" class="headerlink" title="进程优先级nice"></a>进程优先级nice</h4><ul><li>简介：Linux进程调度及多任务时，每个CPU在一个时间点上只能处理一个进程，通过时间切片技术，来同时运行多个程序，如果某个进程需要更多的消耗CPU。</li><li>优先级范围和特性：</li></ul><ol><li>范围：-20 - +19，一般为0</li><li>nice值越大优先级越小，如+19</li><li>nice值越小优先级越大，如-20</li></ol><ul><li>系统中的两种优先级</li></ul><ol><li>NI：实际nice值</li><li>PR(+20)：将nice级别显示为映射到更大有限队列，当nice为-20时，将会映射到0。</li><li>加上的之后的优先级PR才会最终影响进程的优先级。</li></ol><ul><li>查看优先级<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps axo pid,command,nice --sort nice #以nice值升序排列</span><br><span class="line">ps axo pid,command,nice --sort -nice #以nice值降序排列，-号表示降序</span><br></pre></td></tr></table></figure></li><li>调整nice值<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进程默认会继承父进程的<span class="built_in">nice</span>值</span></span><br><span class="line">nice -n 优先级数 命令名 #运行时改变优先级</span><br><span class="line">renice 优先级数 PID #运行后改变优先级</span><br></pre></td></tr></table></figure></li></ul><h4 id="作业控制jobs"><a href="#作业控制jobs" class="headerlink" title="作业控制jobs"></a>作业控制jobs</h4><ul><li>简介：作业控制是一个命令行功能，也叫后台运行</li><li>foreground(fg) 前台进程：是在终端中运行的命令，占领终端</li><li>background(bg) 后台运行：没有控制终端，它不需要终端的交互。看不见，但在运行<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用&amp;可以放到后台运行</span><br><span class="line">sleep 3300 &amp;</span><br><span class="line">jops #可以查看后台工作的进程，看不了前台进程</span><br><span class="line">[root@master ~]# jobs</span><br><span class="line">[1]+  Running                 sleep 3000 &amp;</span><br><span class="line">fg 1 #将进程调回前台</span><br><span class="line">[root@master ~]# fg 1</span><br><span class="line">sleep 3000</span><br><span class="line">Ctrl + z #可以使得前台程序放到后台，但是程序停止</span><br><span class="line">[root@master ~]# jobs</span><br><span class="line">[1]+  Stopped                 sleep 3000</span><br><span class="line">bg 1 #使得后台暂停的程序运行</span><br><span class="line">[root@master ~]# jobs</span><br><span class="line">[1]+  Running                 sleep 3000 &amp;</span><br><span class="line">kill %1 # 杀死后台程序</span><br><span class="line">[root@master ~]# jobs</span><br><span class="line">[1]+  Terminated              sleep 3000</span><br></pre></td></tr></table></figure></li></ul><h4 id="虚拟文件系统proc"><a href="#虚拟文件系统proc" class="headerlink" title="虚拟文件系统proc"></a>虚拟文件系统proc</h4><ul><li>简介：细腻文件系统：采集服务器自身内核，进程运行状态信息，里面的数字代表进程信息，进程号</li><li>CPU：&#x2F;proc&#x2F;cpuinfo，CPU的参数，可以查看CPU的信息</li><li>内存：&#x2F;proc&#x2F;meminfo，内存的信息</li><li>内核：&#x2F;proc&#x2F;cmdline，内核信息</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.gnu.org/gnu/about-gnu.zh-cn.html" title="简说 GNU">简说 GNU</a></li><li><a href="https://www.debian.org/releases/stable/s390x/ch01s02.zh-cn.html" title="什么是 GNU/Linux？">什么是 GNU&#x2F;Linux？</a></li><li><a href="https://blog.csdn.net/da_ge_de_nv_ren/article/details/128391575" title="Linux">Linux</a></li><li><a href="https://www.jianshu.com/p/a38cd22b28ad" title="Linux TOP 命令">Linux TOP 命令</a></li><li><a href="https://www.bilibili.com/video/BV1pz4y1D73n?p=29&vd_source=4470be84aba61145fe9d1690fe726951" title="千锋云计算Linux教程650集，linux系统运维从入门到精通教程（Linux安装极速入门，零基础必备）">千锋云计算Linux教程650集，linux系统运维从入门到精通教程（Linux安装极速入门，零基础必备）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机的网络类型和静态ip的设置</title>
      <link href="/2024/03/21/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E7%B1%BB%E5%9E%8B%E5%92%8C%E9%9D%99%E6%80%81ip%E7%9A%84%E8%AE%BE%E7%BD%AE/"/>
      <url>/2024/03/21/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E7%B1%BB%E5%9E%8B%E5%92%8C%E9%9D%99%E6%80%81ip%E7%9A%84%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>虚拟机的网络配置对于使用虚拟机特别重要，我去了解了一下关于虚拟机网络的东西，在这里做个记录。</p><h1 id="虚拟机的网络配置"><a href="#虚拟机的网络配置" class="headerlink" title="虚拟机的网络配置"></a>虚拟机的网络配置</h1><h2 id="虚拟机的网络类型"><a href="#虚拟机的网络类型" class="headerlink" title="虚拟机的网络类型"></a>虚拟机的网络类型</h2><ul><li>NAT (Network address translation) 模式<br>也叫网络地址转换模式。在 NAT 模式下，虚拟机要访问外部网络，需要经过宿主机进行处理，再连接到外部网络。虚拟机可以访问外部网络和宿主机，宿主机无法访问虚拟机。举个形象的例子，小红（虚拟机）要过桥去村子外面买菜，但是这座桥是小黄（宿主机）的，因此需要小黄同意才可以过桥。在这种情况下，宿主机可以看做充当路由器的作用，宿主机虚拟出来的dhcp服务器会给虚拟机分配一个局域网的 ip 地址。在这种情况下，外部网络无法访问我们的虚拟机，比较安全。</li><li>桥接模式<br>在桥接模式下，虚拟机和宿主机类似于兄弟，属于同一网段的独立网络。虚拟机直接和外部网络相连，宿主机充当了虚拟机和外部网络的桥梁，从而实现了虚拟机和外部网络的通信。虚拟机可以访问外部网络和宿主机，宿主机也可以访问虚拟机。但是在这种情况下，外部网络可以访问虚拟机，并不安全。</li><li>仅主机模式Host-only网络<br>开启仅主机模式Host-only网络之前，我们需要在Virtual Box创建一个Ethernet Adapter，其和宿主机虚拟出来的网卡处于在同一个网段，虚拟机和宿主机共享一个网络，从而实现了主机和多个虚拟机之间的通信。虚拟机可以访问宿主机，无法访问外部网络。宿主机可以访问虚拟机。</li></ul><h2 id="NAT模式"><a href="#NAT模式" class="headerlink" title="NAT模式"></a>NAT模式</h2><ol><li>将虚拟机设置为 NAT 模式<br><img src="1.png"></li><li>查看 ip<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="2.png"><br>ip 为10.0.2.15</li><li>访问宿主机(172.16.34.145)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 172.16.34.145</span><br></pre></td></tr></table></figure><img src="3.png"><br>能和宿主机通信</li><li>访问外部网络<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><img src="4.png"><br>能够访问外部网络。</li><li>宿主机访问虚拟机<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 10.0.2.15</span><br></pre></td></tr></table></figure><img src="5.png"><br>宿主机无法访问虚拟机。</li></ol><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><ol><li>将虚拟机设置为桥接模式<br><img src="6.png"></li><li>查看 ip<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="7.png"><br>ip 为172.16.34.246，与宿主机的外部网络在同一网段。</li><li>访问宿主机(172.16.34.145)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 172.16.34.145</span><br></pre></td></tr></table></figure><img src="8.png"><br>能和宿主机通信</li><li>访问外部网络<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><img src="9.png"><br>能够访问外部网络。</li><li>宿主机访问虚拟机<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 172.16.34.246</span><br></pre></td></tr></table></figure><img src="10.png"><br>宿主机可以访问虚拟机。</li></ol><h2 id="仅主机模式Host-only网络"><a href="#仅主机模式Host-only网络" class="headerlink" title="仅主机模式Host-only网络"></a>仅主机模式Host-only网络</h2><ol><li>设置全局的网卡：管理 -&gt; 工具 -&gt; 网络配置管理器 -&gt; 创建<br><img src="12.png"><br>启动DHCP服务器<br><img src="13.png"><br><img src="14.png"></li><li>将虚拟机设置为仅主机模式Host-only网络<br><img src="11.png"></li><li>查看 ip<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="15.png"><br>ip 为192.168.176.3</li><li>访问宿主机(172.16.34.145)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 172.16.34.145</span><br></pre></td></tr></table></figure><img src="16.png"><br>无法和宿主机进行通信，经过分析发现宿主机和虚拟机的 ip 不在一个网段，肯定无法访问的，现在宿主机的 ip 相当于一个外部网络的 ip 。 我们可以通过宿主机的局域网 ip (192.168.176.1)进行访问，其和虚拟机的 ip 在同一个网段。<br><img src="17.png"><br>可以访问宿主机<br><img src="18.png"><br>通过查看 Virtual Box的网络配置，可以看到相应的 ip 地址分配方案，ip 地址会在最小地址和最大地址之间随机生成。<br><img src="19.png"></li><li>访问外部网络<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><img src="20.png"><br>无法访问外部网络。</li><li>宿主机访问虚拟机<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 192.168.176.3</span><br></pre></td></tr></table></figure><img src="21.png"><br>宿主机可以访问虚拟机，如果访问不了，请关闭宿主机的防火墙。</li></ol><h2 id="常用的网络配置"><a href="#常用的网络配置" class="headerlink" title="常用的网络配置"></a>常用的网络配置</h2><ul><li>NAT模式+仅主机模式Host-only网络</li><li>桥接网络</li></ul><h2 id="NAT模式-仅主机模式Host-only网络"><a href="#NAT模式-仅主机模式Host-only网络" class="headerlink" title="NAT模式+仅主机模式Host-only网络"></a>NAT模式+仅主机模式Host-only网络</h2><ol><li>网卡1设置为仅主机模式Host-only网络，网卡2设置设置为NAT模式<br><img src="22.png"><br><img src="23.png"></li><li>查看 ip<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="24.png"><br>存在两张网卡：enp0s3 (192.168.176.3)，enp0s8 (10.0.3.15)</li><li>访问宿主机(172.16.34.145)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 172.16.34.145</span><br></pre></td></tr></table></figure><img src="25.png"><br>能和宿主机通信</li><li>访问外部网络<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><img src="26.png"><br>能够访问外部网络。</li><li>宿主机访问虚拟机<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 192.168.176.3</span><br></pre></td></tr></table></figure><img src="27.png"><br>宿主机可以访问虚拟机。</li></ol><h2 id="静态-ip-地址配置：以桥接网络为例"><a href="#静态-ip-地址配置：以桥接网络为例" class="headerlink" title="静态 ip 地址配置：以桥接网络为例"></a>静态 ip 地址配置：以桥接网络为例</h2><ol><li>查看 ip<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="28.png"><br>ip 为172.16.34.246，与宿主机的外部网络在同一网段。</li><li>该 ip 为动态分配的，下次开机可能 ip 会改变，因此需要设置静态 ip。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-enp0s3</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=172.16.34.123</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=172.16.34.1 #和宿主机一样</span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line">DNS2=8.8.8.8</span><br></pre></td></tr></table></figure><img src="29.png"></li><li>重启网卡<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmcli connection down enp0s3 &amp;&amp; nmcli connection up enp0s3 ——重启网卡enp0s3</span><br></pre></td></tr></table></figure></li><li>查看 ip<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="30.png"><br>修改 ip 为：172.16.34.123</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://cloud.tencent.com/developer/article/1463782" title="桥接、NAT、Host-only上网方式的区别">桥接、NAT、Host-only上网方式的区别</a></li><li><a href="https://www.ctyun.cn/developer/article/353763363754053" title="Linux虚拟机的创建与配网（一）">Linux虚拟机的创建与配网（一）</a></li><li><a href="https://www.bilibili.com/video/BV1nF41117d1/?spm_id_from=333.788.recommend_more_video.-1&vd_source=4470be84aba61145fe9d1690fe726951" title="002.十分钟带你搞懂虚拟机各种网络配置以及centos7配置静态IP,看完学的会，配的出！">002.十分钟带你搞懂虚拟机各种网络配置以及centos7配置静态IP,看完学的会，配的出！</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 虚拟机网络配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> Virtual Box </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加hexo搭建个人博客（七）</title>
      <link href="/2024/03/21/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%83%EF%BC%89/"/>
      <url>/2024/03/21/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%83%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>主要是自己想把收集来的好看的图片整理成相册之类的，所以想着在博客中添加一个相册功能。</p><h1 id="相册仓库搭建"><a href="#相册仓库搭建" class="headerlink" title="相册仓库搭建"></a>相册仓库搭建</h1><ol><li>在主题配置文件 _config.butterfly.yml 中设置相册<br><img src="5.png"></li><li>在 Git Bash 输入：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new [layout] gallery</span><br></pre></td></tr></table></figure>创建相册仓库</li><li>修改仓库 &#x2F;source&#x2F;gallery&#x2F;index.md<br><img src="1.png"></li><li>创建相册<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;gallery-group-main&quot;&gt;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><ul><li>name：图库名字</li><li>description：图库描述</li><li>link：连接到对应相册的地址</li><li>img-url：图库封面的地址<br>例如：<br><img src="2.png"></li></ul><h1 id="相册的创建"><a href="#相册的创建" class="headerlink" title="相册的创建"></a>相册的创建</h1><ol><li>在 Git Bash 输入：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page landscape</span><br></pre></td></tr></table></figure>创建相册</li><li>修改相册 &#x2F;source&#x2F;landscape&#x2F;index.md<br><img src="3.png"></li><li>创建相册内容<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% gallery [lazyload],[rowHeight],[limit] %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>lazyload ：【可选】点击按钮加载更多图片，填写 true&#x2F;false。默认为 false。</li><li>rowHeight ：【可选】图片显示的高度，如果需要一行显示更多的图片，可设置更小的数字。默认为 220。</li><li>limit ：【可选】每次加载多少张照片。默认为 10。<br>例如：<br><img src="4.png"></li></ul><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="6.png"><br><img src="7.png"><br><img src="8.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://butterfly.js.org/" title="butterfly 的官方教程网站">butterfly 的官方教程网站</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
          <category> 个人博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机安装Centos8 stream以及网络配置</title>
      <link href="/2024/03/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Centos8-stream%E4%BB%A5%E5%8F%8A%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/03/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Centos8-stream%E4%BB%A5%E5%8F%8A%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>由于以后会从事和 Linux 相关的工作，但我手头没有服务器，组里的服务器我也没有权限去动，所以只能在虚拟机里面搞一搞，学习学习。</p><h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><h2 id="相关软件"><a href="#相关软件" class="headerlink" title="相关软件"></a>相关软件</h2><ul><li><a href="https://www.virtualbox.org/wiki/Downloads" title="Virtual Box 下载链接">Virtual Box</a></li><li><a href="https://mirrors.aliyun.com/centos/8-stream/" title="Centos8 stream 下载链接">Centos8 stream</a></li></ul><h2 id="下载Virtual-Box"><a href="#下载Virtual-Box" class="headerlink" title="下载Virtual Box"></a>下载Virtual Box</h2><ol><li>前往<a href="https://www.virtualbox.org/wiki/Downloads" title="Virtual Box 下载链接">Virtual Box 官网</a>下载对应版本的 Virtual Box 。<br><img src="1.png"></li><li>除了修改安装目录其他就是傻瓜式一路下一步就行。<br><img src="2.png"><br><img src="3.png"></li></ol><h2 id="安装-Centos8-stream-系统"><a href="#安装-Centos8-stream-系统" class="headerlink" title="安装 Centos8 stream 系统"></a>安装 Centos8 stream 系统</h2><ol><li>打开Virtual Box ，新建一个虚拟机。<br><img src="4.png"></li><li>设置好虚拟机名称，安装路径，Centos8 stream 的目录，内存，CPU和硬盘大小。<br><img src="5.png"><br><img src="6.png"><br><img src="7.png"><br><img src="8.png"></li><li>设置好网络，这里选择桥接网卡，之后会介绍其他网卡类型。<br><img src="9.png"><br><img src="10.png"></li><li>“原神”启动！<br><img src="11.png"></li><li>设置最小化安装，选择好硬盘，连接好网络设置好root密码，开始安装。<br><img src="12.png"><br><img src="13.png"><br><img src="14.png"><br><img src="16.png"><br><img src="15.png"><br><img src="17.png"></li><li>重启后，用 root 账户登录。<br><img src="18.png"><br><img src="19.png"><br><img src="20.png"></li><li>查看 ip 为172.16.34.246。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure><img src="21.png"></li><li>检查网络是否通畅。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><img src="22.png"></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/111567471" title="win10虚拟机Oracle VM VirtualBox安装和使用教程">win10虚拟机Oracle VM VirtualBox安装和使用教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> Virtual Box </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos8 stream安装VASP--2024 Intel oneAPI</title>
      <link href="/2024/03/20/Centos8-stream%E5%AE%89%E8%A3%85VASP-2024-Intel-oneAPI/"/>
      <url>/2024/03/20/Centos8-stream%E5%AE%89%E8%A3%85VASP-2024-Intel-oneAPI/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>组里的服务器安装的是 Centos7的系统，在2020年的时候 Centos 项目与红帽联合宣布将全部投资转向Centos stream , Centos7 将会在2024年6月30日停止维护。并且组里之前安装 VASP 是依赖于 Intel Parallel Studio ，但是现在 Intel 也不继续更新这个软件了，转而去开发 Intel oneAPI 。 再加上我以后从事的工作和这个很相关，因此就想着自己先试着安装一下看看，以这篇文章记录一下自己的安装过程，估计以后应该会用得到。</p><h1 id="软件的安装"><a href="#软件的安装" class="headerlink" title="软件的安装"></a>软件的安装</h1><h2 id="相关的软件"><a href="#相关的软件" class="headerlink" title="相关的软件"></a>相关的软件</h2><ul><li><a href="https://www.virtualbox.org/wiki/Downloads" title="Virtual Box 下载链接">Virtual Box</a></li><li><a href="https://mirrors.aliyun.com/centos/8-stream/" title="Centos8 stream 下载链接">Centos8 stream</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/developer/tools/oneapi/base-toolkit-download.html" title="l_BaseKit 下载链接">l_BaseKit</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/developer/tools/oneapi/hpc-toolkit-download.html" title="l_HPCKit 下载链接">l_HPCKit</a></li><li><a href="https://www.vasp.at/" title="VASP 官网">VASP</a></li></ul><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><p>由于我手头没有服务器，组里的服务器我也没有权限去动，所以只能在虚拟机里面搞一搞了。相应的软件可以在官网上进行下载，由于 VASP 是收费的软件，因为版权原因，这里就不提供了，需要的话可以评论区说一下。</p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><ol><li><p>Virtual Box 和 Centos8 stream 的安装很简单，可以参考这篇知乎文章：<a href="https://zhuanlan.zhihu.com/p/111567471" title="win10虚拟机Oracle VM VirtualBox安装和使用教程">win10虚拟机Oracle VM VirtualBox安装和使用教程</a>和之前的文章：<a href="/2024/03/20/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85Centos8-stream%E4%BB%A5%E5%8F%8A%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/" title="虚拟机安装Centos8 stream以及网络配置">虚拟机安装Centos8 stream以及网络配置</a>，最小化安装即可。</p></li><li><p>安装一些 Linux 的软件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install gcc</span><br><span class="line">yum install gcc-c++</span><br><span class="line">yum install make</span><br><span class="line">yum install tar</span><br><span class="line">yum install rsync</span><br></pre></td></tr></table></figure></li><li><p>对于这两个 Intel 软件 ，我这里分别下载的是：l_BaseKit_p_2024.0.1.46_offline.sh 和 l_HPCKit_p_2024.0.1.38_offline.sh 。<br><img src="1.png"></p></li><li><p>首先安装 l_BaseKit_p_2024.0.1.46_offline.sh，输入命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh l_BaseKit_p_2024.0.1.46_offline.sh</span><br></pre></td></tr></table></figure><p>按照提示一步一步安装就行。</p></li><li><p>安装 l_HPCKit_p_2024.0.1.38_offline.sh，同上。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh l_HPCKit_p_2024.0.1.38_offline.sh</span><br></pre></td></tr></table></figure><p>安装成功后在 &#x2F;opt 下面会出现 intel 文件夹。 </p></li><li><p>执行以下命令设置环境变量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /opt/intel/oneapi/setvars.sh</span><br></pre></td></tr></table></figure><p>会出现一下信息：<br><img src="2.png"></p></li><li><p>执行以下命令生成 libfftw3xf_intel.a 。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /opt/intel/oneapi/mkl/2024.0/share/mkl/interfaces/fftw3xf</span><br><span class="line">source /opt/intel/oneapi/setvars.sh</span><br><span class="line">make libintel64</span><br></pre></td></tr></table></figure><p><img src="3.png"></p></li><li><p>解压 VASP 我这里的版本是 6.3.0</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf vasp.6.3.0.tgz</span><br></pre></td></tr></table></figure></li><li><p>复制生成 makefile.include </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd vasp.6.3.0</span><br><span class="line">cp arch/makefile.include.intel makefile.include</span><br></pre></td></tr></table></figure></li><li><p>修改 makefile.include</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MKLROOT    ?=        #直接设置为空，之前设置好了环境变量了，可以使用 echo $MKLROOT 查看环境变量</span><br><span class="line">CC_LIB      = icx</span><br><span class="line">CXX_PARS    = icpx</span><br></pre></td></tr></table></figure></li><li><p>修改后保存，之后直接安装。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make all</span><br></pre></td></tr></table></figure><p>大概等个半个小时就可以安装成功了。<br><img src="4.png"></p></li><li><p>每次登陆都要添加 oneAPI 的环境变量，配置好 VASP的环境变量。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi ~/.bashrc</span><br><span class="line">添加 ：</span><br><span class="line">export PATH=/opt/vasp.6.3.0/bin/:$PATH</span><br><span class="line">source /opt/intel/oneapi/setvars.sh</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p><img src="5.png"></p></li></ol><h2 id="测试-VASP"><a href="#测试-VASP" class="headerlink" title="测试 VASP"></a>测试 VASP</h2><ol><li>准备好输入文件后启动 VASP。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mpirun -np 2 vasp_std</span><br></pre></td></tr></table></figure><img src="6.png"></li><li>出现了相应的结果，表明安装成功！<br><img src="7.png"></li><li>注意如果是非 root 用户安装， intel 文件夹将会出现在 &#x2F;home&#x2F;用户名&#x2F; 下面，剩下的安装方法都是一样的。</li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/qq_28778001/article/details/135576784" title="VASP6.3.2版本安装教程及运行测试(续)  --2024 intel OneAPI">VASP6.3.2版本安装教程及运行测试(续) – 2024 intel OneAPI</a></li><li><a href="https://blog.csdn.net/passsive/article/details/132982277" title="VASP6.3.2版本安装教程">VASP6.3.2版本安装教程</a></li><li><a href="https://www.intel.cn/content/www/cn/zh/developer/articles/technical/building-vasp-with-intel-mkl-and-intel-compilers.html?&us" title="Building VASP* with Intel® oneAPI Base and HPC toolkits">Building VASP* with Intel® oneAPI Base and HPC toolkits</a></li><li><a href="https://zhuanlan.zhihu.com/p/565198883" title="Vasp5.4.4最新安装教程">Vasp5.4.4最新安装教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VASP </tag>
            
            <tag> Linux </tag>
            
            <tag> Centos8 stream </tag>
            
            <tag> Intel oneAPI </tag>
            
            <tag> Virtual Box </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加hexo搭建个人博客（六）</title>
      <link href="/2024/03/20/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2024/03/20/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="图床的搭建和使用"><a href="#图床的搭建和使用" class="headerlink" title="图床的搭建和使用"></a>图床的搭建和使用</h1><h2 id="为什么要使用图床"><a href="#为什么要使用图床" class="headerlink" title="为什么要使用图床"></a>为什么要使用图床</h2><p>在前面的文章中，我们使用了大量的图片。但是图片存储在什么地方，将会是一个很大的问题。如果将图片存储在hexo的项目文件中，就会使得整个项目很臃肿。同时我们也会使用大量的图片的url，通过网上去定位图片，但是这样做有时候，无法定位到这些图片。当然我们可以下载图片之后，再进行引用，这就又回到了前一个问题。解决这个问题的方式，可以将所有的本地图片上传到服务器，也就是图床。</p><h2 id="github仓库加Picogo软件"><a href="#github仓库加Picogo软件" class="headerlink" title="github仓库加Picogo软件"></a>github仓库加Picogo软件</h2><p>有很多方式都可以实现图床的功能，既然我们是要免费搭建，那就要白嫖到底了。这里我们选择采用 github 仓库 加 Picogo 的方式。</p><h3 id="新建-github-仓库"><a href="#新建-github-仓库" class="headerlink" title="新建 github 仓库"></a>新建 github 仓库</h3><p>这里就不多说了，参考前面：<a href="/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/" title="github加hexo搭建个人博客（一）">github加hexo搭建个人博客（一）</a>。</p><h3 id="Picogo-的安装和配置"><a href="#Picogo-的安装和配置" class="headerlink" title="Picogo 的安装和配置"></a>Picogo 的安装和配置</h3><h4 id="下载和安装-Picogo"><a href="#下载和安装-Picogo" class="headerlink" title="下载和安装 Picogo"></a>下载和安装 Picogo</h4><p>在这里<a href="https://github.com/Molunerfinn/PicGo/releases" title="Picogo的下载地址">下载</a>后，正常安装就行，傻瓜式安装。</p><h4 id="生成-github-token"><a href="#生成-github-token" class="headerlink" title="生成 github token"></a>生成 github token</h4><ol><li>进入主页，点击右上角的头像，点击 Settings<br><img src="3.png"></li><li>下拉至最末尾，点击 Developer settings<br><img src="4.png"></li><li>依次点击：Personal access tokens -&gt; Token -&gt; Generate a personal access token<br><img src="5.png"></li><li>Note 随便填，然后将所有都打勾选上，点击 Generate token<br><img src="6.png"></li><li>复制 token 备用<br><img src="7.png"></li></ol><h4 id="配置-Picogo"><a href="#配置-Picogo" class="headerlink" title="配置 Picogo"></a>配置 Picogo</h4><ol><li>打开软件后，进入图床设置，进行 github 的图床配置<br><img src="1.png"></li><li>按照下图进行配置，设定为新建的仓库名，在 token 那一栏中输入复制的 token ，保存即可。<br><img src="2.png"></li><li>在 PicGo 设置中可以开启代理，如果不需要的话，也可以不用开。<br><img src="11.png"></li><li>能够上传图片和复制 url 表明配置成功。<br><img src="8.png"><br><img src="9.png"><br><img src="10.png"></li><li>可以在 新建的 github 仓库中看到上传的图片。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
          <category> 个人博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
            <tag> Picgo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加hexo搭建个人博客（五）</title>
      <link href="/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hexo-主题的使用和相关设置"><a href="#hexo-主题的使用和相关设置" class="headerlink" title="hexo 主题的使用和相关设置"></a>hexo 主题的使用和相关设置</h1><p>hexo 有着很多好看有趣的主题，我们可以去<a href="https://hexo.io/themes/" title="hexo 主题">主题</a>官网上查看、下载和使用。 我这里使用的是 <a href="https://github.com/jerryc127/hexo-theme-butterfly" title="butterfly 主题">butterfly</a>。</p><h2 id="butterfly-主题的安装和配置"><a href="#butterfly-主题的安装和配置" class="headerlink" title="butterfly 主题的安装和配置"></a>butterfly 主题的安装和配置</h2><p>在博客目录下，打开 Git Bash，输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>进行安装。<br><img src="1.png"><br>安装 pug 以及 stylus 的渲染器。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p><img src="2.png"><br>将 _config.yml 中的主题换成 butterfly 。<br><img src="3.png"><br>部署成功后，我们的博客变得更加的漂亮。<br><img src="4.png"><br>我们接下来可以按照 <a href="https://butterfly.js.org/" title="butterfly 的官方教程网站">butterfly 的官方教程网站</a>进行修改，加上特效和一些其他的功能，就可以让博客变得很漂亮和炫酷，就像<a href="https://butterfly.js.org/" title="butterfly 的官方教程网站">butterfly 的官方教程网站</a>一样。</p><h2 id="设置搜索功能"><a href="#设置搜索功能" class="headerlink" title="设置搜索功能"></a>设置搜索功能</h2><p>当我们的博客内容越来越多的时候，能够快速搜索到相应的文章，就会显得越来越重要。 我们采用本地搜索，先安装相关的插件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p><img src="5.png"><br>install hexo-generator-search 插件会把文章的信息生成一个搜素的数据库保存到本地，因此搜素的速度很快。在博客的配置文件 _config.yml 中添加：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml #生成的搜素文件名</span><br><span class="line">  field: post  #指定搜素的对象，我们这里用的是文章</span><br><span class="line">  format: html #搜素结果的格式</span><br><span class="line">  limit: 10000 #最多的显示结果数</span><br></pre></td></tr></table></figure><p>修改主题的配置文件 _config.butterfly.yml ，打开 local_search：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # Preload the search data when the page loads.</span><br><span class="line">  preload: false</span><br><span class="line">  # Show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  # Unescape html strings to the readable one.</span><br><span class="line">  unescape: false</span><br><span class="line">  CDN:</span><br></pre></td></tr></table></figure><p>生成搜素文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>部署到 github 上，可以看到搜素栏可以使用。<br><img src="6.png"></p><h2 id="设置评论区和-Gitalk-的使用"><a href="#设置评论区和-Gitalk-的使用" class="headerlink" title="设置评论区和 Gitalk 的使用"></a>设置评论区和 Gitalk 的使用</h2><p>由于 hexo 是纯静态博客框架，所以其本身无法支持评论功能，需要第三方平台和软件的支持。在博客中我们需要读者的评论和交流，以提高我们的技术。因此我们需要给博客添加评论功能，我们采用的是利用 github 的免费评论平台—— Gitalk 。</p><h3 id="配置部署"><a href="#配置部署" class="headerlink" title="配置部署"></a>配置部署</h3><ul><li>进入 github 主页，点击右上方头像，点击 Settings<br><img src="7.png"></li><li>下拉到最后点击 Developer settings<br><img src="8.png"></li><li>依次点击 QAuth Apps ，Register a new application<br><img src="9.png"></li><li>填好之后点击 Regiter application<br><img src="10.png"></li><li>点击 Generate a new client secret , 并复制 Client ID 和 Client secrets。<br><img src="11.jpg"></li><li>修改主题的配置文件 _config.butterfly.yml<br><img src="12.png"><br><img src="13.png"><br>部署到 github 上可以看到评论已经开启。<br><img src="14.png"></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://butterfly.js.org/" title="butterfly 的官方教程网站">butterfly 的官方教程网站</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
          <category> 个人博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdownpad2的安装和破解</title>
      <link href="/2024/03/19/markdownpad2%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%A0%B4%E8%A7%A3/"/>
      <url>/2024/03/19/markdownpad2%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="软件下载和安装"><a href="#软件下载和安装" class="headerlink" title="软件下载和安装"></a>软件下载和安装</h2><p>markdownpad2 和 awesomium_v1.6.6_sdk_win 的下载链接可以在<a href="https://haharcher1.github.io/download/" title="博客的资源页面">博客的资源页面</a>找到。<br>先安装 awesomium_v1.6.6_sdk_win 。<br><img src="1.png"><br>一路next下去，安装路径可以自己选。<br><img src="2.png"><br>最后完成安装。<br><img src="3.png"><br>接下来安装 markdownpad2 。<br><img src="4.png"><br>一路next下去，安装路径可以自己选。<br><img src="5.png"><br>最后安装成功。<br><img src="6.png"></p><h2 id="markdownpad2-的破解"><a href="#markdownpad2-的破解" class="headerlink" title="markdownpad2 的破解"></a>markdownpad2 的破解</h2><p>运行 markdownpad2 之后会出现激活的界面。<br><img src="7.png"><br>输入邮箱地址：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Soar360@live.com</span><br></pre></td></tr></table></figure><p>输入 License key</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ==</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="8.png"><br>最后激活成功。<br><img src="9.png"><br>感谢<a href="https://www.cnblogs.com/Ning-Blog/p/15142839.html" title="MarkdownPad 2在win10上安装及破解（含安装包">这篇博客的博主提供的破解码</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdownpad2 </tag>
            
            <tag> awesomium_v1.6.6_sdk_win </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加hexo搭建个人博客（四）</title>
      <link href="/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文章书写和图片插入"><a href="#文章书写和图片插入" class="headerlink" title="文章书写和图片插入"></a>文章书写和图片插入</h1><h2 id="文章创建"><a href="#文章创建" class="headerlink" title="文章创建"></a>文章创建</h2><p>在 My_Blog 目录下打开 Git Bash ，输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new [layout] &quot;文章名字&quot; # layout 可以省略</span><br></pre></td></tr></table></figure><p>关于 layout 的说明可以参考，<a href="https://fuguigui.github.io/hexo2/" title="一次完整的Hexo写作流程">这篇博客</a>和<a href="https://hexo.io/zh-cn/docs/writing.html" title="官方文档">官方文档</a>。<br><img src="1.png"><br>执行结束后会在 My_Blog\source_posts 文件夹下面生成 demo.md 文件。 hexo 支持将 markdown 语法写出来的文章转换为 Html 的格式。 因此我们在demo.md 文件中只需要按照 markdown 语法进行写作就可以了。 markdown 的语法可以参考<a href="https://www.zhihu.com/tardis/zm/art/99319314?source_id=1003" title="Markdown语法及原理从入门到高级（可能是全网最全）">这篇知乎专栏</a>。书写 markdown 的软件，我使用的是 markdownpad2 和 awesomium_v1.6.6_sdk 。软件的下载和安装请参考：<a href="/2024/03/19/markdownpad2%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%A0%B4%E8%A7%A3/" title="markdownpad2的安装和破解">markdownpad2的安装和破解</a>。</p><p>软件安装成功后，直接打开 demo.md ，输入博客内容就行，如图：<br><img src="2.png"><br>依次在 Git Bash 中输入命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>部署到 github 上，进入博客网站，可以看到：<br><img src="3.png"></p><h2 id="图片的插入"><a href="#图片的插入" class="headerlink" title="图片的插入"></a>图片的插入</h2><p>修改主目录 My_Blog 中的配置文件 _config.yml 中的参数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p><img src="4.png"><br>修改之后，每次我们用命令在 _posts 文件夹下面生成 .md 文件时，将会同时生成一个同名的文件夹，图片就可以放在这个文件夹下。<br><img src="5.png"><br><img src="6.png"><br>在 Git Bash 输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>安装插件。<br><img src="7.png"><br>按照<a href="https://github.com/xcodebuild/hexo-asset-image" title="官方文档">官方的使用说明</a>。<br><img src="14.png"><br>我的图片位置和文档中的书写方法。<br><img src="8.png"><br><img src="9.png"><br>部署成功后，发现图片无法显示：<br><img src="10.png"></p><p>我在这里卡了好久，在网上找了好多教程，都发现没有用。我用谷歌浏览器的开发者工具，发现在图片的 url 中莫名其妙会多出来一个 .com ，完全不能理解。<br><img src="11.png"><br>我都快放弃了，最后在一篇<a href="https://zhuanlan.zhihu.com/p/542101567" title="Hexo 图片插入无法显示的问题">知乎文章</a>中找到了解决方案。主要是这个插件太老了，出bug了，作者也不更新了，而hexo 都已经更新了好几个版本了。解决方法是在根目录中，我这里是 My_Blog ，按照以下顺序：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node_modules -&gt; hexo-asset-image -&gt; index.js</span><br></pre></td></tr></table></figure><ul><li>找到 index.js 文件</li><li>用记事本打开 index.js 文件</li><li>修改内容 index.js 里面的内容</li></ul><p>修改前：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, config.<span class="property">root</span> + link + src);</span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, src);</span><br></pre></td></tr></table></figure><p><img src="12.png"><br>重新部署到 github 上，可以看到图片加载成功！<br><img src="13.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
          <category> 个人博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加hexo搭建个人博客（三）</title>
      <link href="/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装-hexo-并生成网页"><a href="#安装-hexo-并生成网页" class="headerlink" title="安装 hexo 并生成网页"></a>安装 hexo 并生成网页</h1><h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><p>创建一个任意名字的文件夹，这里我创建的是 My_Blog 。 进入该文件夹，右键进入 Git Bash 输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="1.png"><br>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>初始化我们的博客。<br><img src="2.png"><br>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>生成静态文件。<br><img src="3.png"><br>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>进行本地查看。<br><img src="4.png"><br>在浏览器中输入： <a href="http://localhost:4000/">http://localhost:4000/</a><br><img src="5.png"><br>可以看到我们的博客已经布置成功了。</p><h2 id="部署到github上"><a href="#部署到github上" class="headerlink" title="部署到github上"></a>部署到github上</h2><p>在 My_Blog 文件夹中，用笔记本打开 _config.yml 文件，在最后添加：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/你的 github 用户名/你的 github 用户名.github.io.git  #你的仓库地址</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p><img src="6.png"></p><p>在 My_Blog 文件夹中，打开 Git Bash，输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装 Git 部署插件。<br><img src="7.png"><br>第一次提交到 github ，会报错，我们需要先配置邮箱和用户名。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;you@example.com&quot; #注册 github 时的邮箱</span><br><span class="line"></span><br><span class="line">git config --global user.name &quot;Your Name&quot; #注册 github 时的用户名</span><br></pre></td></tr></table></figure><p>依次输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean #清除缓存文件和静态文件</span><br><span class="line"></span><br><span class="line">hexo g #生成静态文件</span><br><span class="line"></span><br><span class="line">hexo d # 部署到对应的 github 仓库</span><br></pre></td></tr></table></figure><p>在浏览器中输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://你的 github 用户名.github.io/</span><br></pre></td></tr></table></figure><p>就可以看到相应的网站：<br><img src="8.png"><br>同时对应的 github 仓库也存在文件。<br><img src="9.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
          <category> 个人博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加hexo搭建个人博客（二）</title>
      <link href="/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装-node-js-并配置-node-js-的环境"><a href="#安装-node-js-并配置-node-js-的环境" class="headerlink" title="安装 node.js 并配置 node.js 的环境"></a>安装 node.js 并配置 node.js 的环境</h1><p>由于 hexo 是基于 node.js 开发的框架，因此我们需要安装 node.js 并配置好相应的环境。</p><h2 id="下载并安装-node-js"><a href="#下载并安装-node-js" class="headerlink" title="下载并安装 node.js"></a>下载并安装 node.js</h2><p>进入 <a href="https://nodejs.org/en," title="node.js 的官网">node.js</a> 的官网，选择相应的版本下载就行。<br><img src="1.png"><br>安装路径那里可以选择安装的地方，其他就是一路 next 就好。<br><img src="2.png"><br>安装完成后，node.js 默认会添加进环境变量中，因此在windows的命令提示符窗口中输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line"></span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>可以看到下面的版本信息，就表明安装成功了。<br><img src="3.png"></p><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>我们在使用 npm 安装一些包和插件的时候，会默认安装到 C 盘，占用系统盘的空间，影响计算机的运行速度，因此我们需要更改默认设置。在命令提示符窗口中输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set prefix &quot;D:\Program Files\nodejs\node_global&quot;</span><br><span class="line"></span><br><span class="line">npm config set cache &quot;D:\Program Files\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure><p><img src="4.png"><br>在我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量 -&gt; 系统环境变量，新建一个名叫 NODE_PATH 的变量名，在变量值处，输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\Program Files\nodejs\node_modules</span><br></pre></td></tr></table></figure><p><img src="10.png"></p><p>再编辑上面的用户环境变量中的 Path。<br>修改前：<br><img src="5.png"><br>编辑为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\Program Files\nodejs\node_global</span><br></pre></td></tr></table></figure><p>修改后：<br><img src="6.png"><br>在命令提示符中输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure><p>可以看到安装的包已经安装到了我们所指定的文件夹，对于 node.js 的安装和环境的配置就算完成了。<br><img src="7.png"><br><img src="8.png"><br><img src="9.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/antma/article/details/86104068," title="node.js 安装详细步骤教程">node.js 安装详细步骤教程</a>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
          <category> 个人博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github加hexo搭建个人博客（一）</title>
      <link href="/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/03/19/github%E5%8A%A0hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>由于本人刚准备转码，希望可以提高个人技术，因此搭建个人博客，来记录学习过程，遇到的问题以及解决问题的方法。希望这个搭建的方法可以帮助到大家。</p><p><a href="https://hexo.io/" title="hexo官网">hexo</a> 是一个快速、简洁且高效的博客框架。hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。我们可以利用大型同性交友网站<a href="https://github.com/" title="github官网">github</a>和 hexo 免费搭建个人博客，白嫖是第一声力！</p><h1 id="github账号注册和git软件的下载"><a href="#github账号注册和git软件的下载" class="headerlink" title="github账号注册和git软件的下载"></a>github账号注册和git软件的下载</h1><h2 id="github账号注册"><a href="#github账号注册" class="headerlink" title="github账号注册"></a>github账号注册</h2><p>进入<a href="https://github.com/" title="github官网">github</a>官网，点击右上角用邮箱进行注册。<br><img src="1.png"><br><img src="2.png"><br>注册完成，登录之后，选择免费的就好。<br><img src="3.png"><br>创建仓库：<br><img src="4.png"><br>仓库名为：你的github账号名.github.io 如图：<br><img src="5.png"><br>创建好仓库之后，在浏览器中输入：https:&#x2F;&#x2F;你的github账号名.github.io&#x2F; 可以看到相应的网站，当然现在都是空白的网页：<br><img src="6.png"></p><h2 id="git软件的下载"><a href="#git软件的下载" class="headerlink" title="git软件的下载"></a>git软件的下载</h2><p>前往<a href="https://git-scm.com/" title="git官网">git</a>官网，下载git软件：<br><img src="7.png"><br>下载相应的版本，本人是win10 64位系统：<br><img src="8.png"><br>接下来安装git软件，除了选择安装目录那里，其他的按照默认的就可以了：<br><img src="9.png"><br>安装完成后，右键选择Open Git Bash here ，打开Git Bash<br><img src="10.png"><br>输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git</span><br></pre></td></tr></table></figure><p><img src="11.png"><br>得到以下信息，表示git安装成功！<br><img src="12.png"></p><h2 id="与github进行绑定"><a href="#与github进行绑定" class="headerlink" title="与github进行绑定"></a>与github进行绑定</h2><p>由于本人的博客会利用github，需要利用git将相应的文件上传到github，因此需用通过SSH登录远程的主机，相应的方式有两种：1，口令登录。2，公钥登录。前者每次都要输入密码，比较繁琐。本人选择公钥登录，以避免频繁输入密码，在 git bash 中输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>然后一直回车进行，如果出现下面的图，表示生成成功。<br><img src="13.png"><br>生成的秘钥 id_rsa 和公钥 id_rsa.pub 在 C:\Users\你的windows用户名\.ssh 目录下：<br><img src="14.png"><br>用记事本打开公钥，将里面的内容复制，进入github主页点击右边头像，然后点击 Settings<br><img src="15.png"><br>点击SSH and GPG keys ，再点击 New SSH key<br><img src="16.png"><br>在 Key 中输入公钥的内容，然后点击 Add SSH key<br><img src="17.png"><br>在 Git Bash 中输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>再输入 yes ，得到下面的结果就表示和github连接成功。<br><img src="18.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件安装 </category>
          
          <category> 技术学习 </category>
          
          <category> 个人博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
